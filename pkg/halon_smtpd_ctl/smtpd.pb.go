// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v3.12.4
// source: smtpd.proto

package halon_smtpd_ctl

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Queue int32

const (
	Queue_ACTIVE Queue = 0
	Queue_DEFER  Queue = 1
)

// Enum value maps for Queue.
var (
	Queue_name = map[int32]string{
		0: "ACTIVE",
		1: "DEFER",
	}
	Queue_value = map[string]int32{
		"ACTIVE": 0,
		"DEFER":  1,
	}
)

func (x Queue) Enum() *Queue {
	p := new(Queue)
	*p = x
	return p
}

func (x Queue) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Queue) Descriptor() protoreflect.EnumDescriptor {
	return file_smtpd_proto_enumTypes[0].Descriptor()
}

func (Queue) Type() protoreflect.EnumType {
	return &file_smtpd_proto_enumTypes[0]
}

func (x Queue) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Queue.Descriptor instead.
func (Queue) EnumDescriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{0}
}

type Freeze int32

const (
	Freeze_HOLD   Freeze = 0
	Freeze_UPDATE Freeze = 1
)

// Enum value maps for Freeze.
var (
	Freeze_name = map[int32]string{
		0: "HOLD",
		1: "UPDATE",
	}
	Freeze_value = map[string]int32{
		"HOLD":   0,
		"UPDATE": 1,
	}
)

func (x Freeze) Enum() *Freeze {
	p := new(Freeze)
	*p = x
	return p
}

func (x Freeze) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Freeze) Descriptor() protoreflect.EnumDescriptor {
	return file_smtpd_proto_enumTypes[1].Descriptor()
}

func (Freeze) Type() protoreflect.EnumType {
	return &file_smtpd_proto_enumTypes[1]
}

func (x Freeze) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Freeze.Descriptor instead.
func (Freeze) EnumDescriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{1}
}

type Working int32

const (
	Working_UNKNOWN Working = 0
	Working_SENDING Working = 1
)

// Enum value maps for Working.
var (
	Working_name = map[int32]string{
		0: "UNKNOWN",
		1: "SENDING",
	}
	Working_value = map[string]int32{
		"UNKNOWN": 0,
		"SENDING": 1,
	}
)

func (x Working) Enum() *Working {
	p := new(Working)
	*p = x
	return p
}

func (x Working) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Working) Descriptor() protoreflect.EnumDescriptor {
	return file_smtpd_proto_enumTypes[2].Descriptor()
}

func (Working) Type() protoreflect.EnumType {
	return &file_smtpd_proto_enumTypes[2]
}

func (x Working) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Working.Descriptor instead.
func (Working) EnumDescriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{2}
}

type ActionType int32

const (
	ActionType_DELETE ActionType = 0
	ActionType_BOUNCE ActionType = 1
)

// Enum value maps for ActionType.
var (
	ActionType_name = map[int32]string{
		0: "DELETE",
		1: "BOUNCE",
	}
	ActionType_value = map[string]int32{
		"DELETE": 0,
		"BOUNCE": 1,
	}
)

func (x ActionType) Enum() *ActionType {
	p := new(ActionType)
	*p = x
	return p
}

func (x ActionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ActionType) Descriptor() protoreflect.EnumDescriptor {
	return file_smtpd_proto_enumTypes[3].Descriptor()
}

func (ActionType) Type() protoreflect.EnumType {
	return &file_smtpd_proto_enumTypes[3]
}

func (x ActionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ActionType.Descriptor instead.
func (ActionType) EnumDescriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{3}
}

type Order int32

const (
	Order_ASC  Order = 0
	Order_DESC Order = 1
)

// Enum value maps for Order.
var (
	Order_name = map[int32]string{
		0: "ASC",
		1: "DESC",
	}
	Order_value = map[string]int32{
		"ASC":  0,
		"DESC": 1,
	}
)

func (x Order) Enum() *Order {
	p := new(Order)
	*p = x
	return p
}

func (x Order) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Order) Descriptor() protoreflect.EnumDescriptor {
	return file_smtpd_proto_enumTypes[4].Descriptor()
}

func (Order) Type() protoreflect.EnumType {
	return &file_smtpd_proto_enumTypes[4]
}

func (x Order) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Order.Descriptor instead.
func (Order) EnumDescriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{4}
}

type StringRegexValue_MatchType int32

const (
	StringRegexValue_EXACT StringRegexValue_MatchType = 0
	StringRegexValue_REGEX StringRegexValue_MatchType = 1
)

// Enum value maps for StringRegexValue_MatchType.
var (
	StringRegexValue_MatchType_name = map[int32]string{
		0: "EXACT",
		1: "REGEX",
	}
	StringRegexValue_MatchType_value = map[string]int32{
		"EXACT": 0,
		"REGEX": 1,
	}
)

func (x StringRegexValue_MatchType) Enum() *StringRegexValue_MatchType {
	p := new(StringRegexValue_MatchType)
	*p = x
	return p
}

func (x StringRegexValue_MatchType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StringRegexValue_MatchType) Descriptor() protoreflect.EnumDescriptor {
	return file_smtpd_proto_enumTypes[5].Descriptor()
}

func (StringRegexValue_MatchType) Type() protoreflect.EnumType {
	return &file_smtpd_proto_enumTypes[5]
}

func (x StringRegexValue_MatchType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StringRegexValue_MatchType.Descriptor instead.
func (StringRegexValue_MatchType) EnumDescriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{3, 0}
}

type StringMatch_MatchType int32

const (
	StringMatch_EXACT   StringMatch_MatchType = 0
	StringMatch_PARTIAL StringMatch_MatchType = 1
	StringMatch_REGEX   StringMatch_MatchType = 2
)

// Enum value maps for StringMatch_MatchType.
var (
	StringMatch_MatchType_name = map[int32]string{
		0: "EXACT",
		1: "PARTIAL",
		2: "REGEX",
	}
	StringMatch_MatchType_value = map[string]int32{
		"EXACT":   0,
		"PARTIAL": 1,
		"REGEX":   2,
	}
)

func (x StringMatch_MatchType) Enum() *StringMatch_MatchType {
	p := new(StringMatch_MatchType)
	*p = x
	return p
}

func (x StringMatch_MatchType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StringMatch_MatchType) Descriptor() protoreflect.EnumDescriptor {
	return file_smtpd_proto_enumTypes[6].Descriptor()
}

func (StringMatch_MatchType) Type() protoreflect.EnumType {
	return &file_smtpd_proto_enumTypes[6]
}

func (x StringMatch_MatchType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StringMatch_MatchType.Descriptor instead.
func (StringMatch_MatchType) EnumDescriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{9, 0}
}

type Condition_CompareStringRegexValue_MatchType int32

const (
	Condition_CompareStringRegexValue_EXACT Condition_CompareStringRegexValue_MatchType = 0
	Condition_CompareStringRegexValue_REGEX Condition_CompareStringRegexValue_MatchType = 1
)

// Enum value maps for Condition_CompareStringRegexValue_MatchType.
var (
	Condition_CompareStringRegexValue_MatchType_name = map[int32]string{
		0: "EXACT",
		1: "REGEX",
	}
	Condition_CompareStringRegexValue_MatchType_value = map[string]int32{
		"EXACT": 0,
		"REGEX": 1,
	}
)

func (x Condition_CompareStringRegexValue_MatchType) Enum() *Condition_CompareStringRegexValue_MatchType {
	p := new(Condition_CompareStringRegexValue_MatchType)
	*p = x
	return p
}

func (x Condition_CompareStringRegexValue_MatchType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Condition_CompareStringRegexValue_MatchType) Descriptor() protoreflect.EnumDescriptor {
	return file_smtpd_proto_enumTypes[7].Descriptor()
}

func (Condition_CompareStringRegexValue_MatchType) Type() protoreflect.EnumType {
	return &file_smtpd_proto_enumTypes[7]
}

func (x Condition_CompareStringRegexValue_MatchType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Condition_CompareStringRegexValue_MatchType.Descriptor instead.
func (Condition_CompareStringRegexValue_MatchType) EnumDescriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{12, 8, 0}
}

type QueueGroupByRequest_ReturnType int32

const (
	QueueGroupByRequest_COUNT QueueGroupByRequest_ReturnType = 0
	QueueGroupByRequest_BYTES QueueGroupByRequest_ReturnType = 1
)

// Enum value maps for QueueGroupByRequest_ReturnType.
var (
	QueueGroupByRequest_ReturnType_name = map[int32]string{
		0: "COUNT",
		1: "BYTES",
	}
	QueueGroupByRequest_ReturnType_value = map[string]int32{
		"COUNT": 0,
		"BYTES": 1,
	}
)

func (x QueueGroupByRequest_ReturnType) Enum() *QueueGroupByRequest_ReturnType {
	p := new(QueueGroupByRequest_ReturnType)
	*p = x
	return p
}

func (x QueueGroupByRequest_ReturnType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QueueGroupByRequest_ReturnType) Descriptor() protoreflect.EnumDescriptor {
	return file_smtpd_proto_enumTypes[8].Descriptor()
}

func (QueueGroupByRequest_ReturnType) Type() protoreflect.EnumType {
	return &file_smtpd_proto_enumTypes[8]
}

func (x QueueGroupByRequest_ReturnType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QueueGroupByRequest_ReturnType.Descriptor instead.
func (QueueGroupByRequest_ReturnType) EnumDescriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{16, 0}
}

type QueueGroupByRequest_Counts_ReturnType_Type int32

const (
	QueueGroupByRequest_Counts_ReturnType_COUNT QueueGroupByRequest_Counts_ReturnType_Type = 0
	QueueGroupByRequest_Counts_ReturnType_BYTES QueueGroupByRequest_Counts_ReturnType_Type = 1
)

// Enum value maps for QueueGroupByRequest_Counts_ReturnType_Type.
var (
	QueueGroupByRequest_Counts_ReturnType_Type_name = map[int32]string{
		0: "COUNT",
		1: "BYTES",
	}
	QueueGroupByRequest_Counts_ReturnType_Type_value = map[string]int32{
		"COUNT": 0,
		"BYTES": 1,
	}
)

func (x QueueGroupByRequest_Counts_ReturnType_Type) Enum() *QueueGroupByRequest_Counts_ReturnType_Type {
	p := new(QueueGroupByRequest_Counts_ReturnType_Type)
	*p = x
	return p
}

func (x QueueGroupByRequest_Counts_ReturnType_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QueueGroupByRequest_Counts_ReturnType_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_smtpd_proto_enumTypes[9].Descriptor()
}

func (QueueGroupByRequest_Counts_ReturnType_Type) Type() protoreflect.EnumType {
	return &file_smtpd_proto_enumTypes[9]
}

func (x QueueGroupByRequest_Counts_ReturnType_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QueueGroupByRequest_Counts_ReturnType_Type.Descriptor instead.
func (QueueGroupByRequest_Counts_ReturnType_Type) EnumDescriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{16, 6, 0, 0}
}

type SuspendResponse_Source int32

const (
	SuspendResponse_STATIC      SuspendResponse_Source = 0
	SuspendResponse_CONCURRENCY SuspendResponse_Source = 1
	SuspendResponse_RATE        SuspendResponse_Source = 2
	SuspendResponse_DYNAMIC     SuspendResponse_Source = 3
)

// Enum value maps for SuspendResponse_Source.
var (
	SuspendResponse_Source_name = map[int32]string{
		0: "STATIC",
		1: "CONCURRENCY",
		2: "RATE",
		3: "DYNAMIC",
	}
	SuspendResponse_Source_value = map[string]int32{
		"STATIC":      0,
		"CONCURRENCY": 1,
		"RATE":        2,
		"DYNAMIC":     3,
	}
)

func (x SuspendResponse_Source) Enum() *SuspendResponse_Source {
	p := new(SuspendResponse_Source)
	*p = x
	return p
}

func (x SuspendResponse_Source) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SuspendResponse_Source) Descriptor() protoreflect.EnumDescriptor {
	return file_smtpd_proto_enumTypes[10].Descriptor()
}

func (SuspendResponse_Source) Type() protoreflect.EnumType {
	return &file_smtpd_proto_enumTypes[10]
}

func (x SuspendResponse_Source) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SuspendResponse_Source.Descriptor instead.
func (SuspendResponse_Source) EnumDescriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{45, 0}
}

type UInt64Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value uint64 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *UInt64Value) Reset() {
	*x = UInt64Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UInt64Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UInt64Value) ProtoMessage() {}

func (x *UInt64Value) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UInt64Value.ProtoReflect.Descriptor instead.
func (*UInt64Value) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{0}
}

func (x *UInt64Value) GetValue() uint64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type DoubleValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value float64 `protobuf:"fixed64,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *DoubleValue) Reset() {
	*x = DoubleValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DoubleValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DoubleValue) ProtoMessage() {}

func (x *DoubleValue) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DoubleValue.ProtoReflect.Descriptor instead.
func (*DoubleValue) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{1}
}

func (x *DoubleValue) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type StringValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *StringValue) Reset() {
	*x = StringValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StringValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringValue) ProtoMessage() {}

func (x *StringValue) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringValue.ProtoReflect.Descriptor instead.
func (*StringValue) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{2}
}

func (x *StringValue) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type StringRegexValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string                     `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Type  StringRegexValue_MatchType `protobuf:"varint,2,opt,name=type,proto3,enum=smtpd.StringRegexValue_MatchType" json:"type,omitempty"`
}

func (x *StringRegexValue) Reset() {
	*x = StringRegexValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StringRegexValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringRegexValue) ProtoMessage() {}

func (x *StringRegexValue) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringRegexValue.ProtoReflect.Descriptor instead.
func (*StringRegexValue) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{3}
}

func (x *StringRegexValue) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *StringRegexValue) GetType() StringRegexValue_MatchType {
	if x != nil {
		return x.Type
	}
	return StringRegexValue_EXACT
}

type BoolValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value bool `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *BoolValue) Reset() {
	*x = BoolValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BoolValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoolValue) ProtoMessage() {}

func (x *BoolValue) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoolValue.ProtoReflect.Descriptor instead.
func (*BoolValue) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{4}
}

func (x *BoolValue) GetValue() bool {
	if x != nil {
		return x.Value
	}
	return false
}

type TimeValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Time:
	//
	//	*TimeValue_Absolute
	//	*TimeValue_Relative
	Time isTimeValue_Time `protobuf_oneof:"time"`
}

func (x *TimeValue) Reset() {
	*x = TimeValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimeValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeValue) ProtoMessage() {}

func (x *TimeValue) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeValue.ProtoReflect.Descriptor instead.
func (*TimeValue) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{5}
}

func (m *TimeValue) GetTime() isTimeValue_Time {
	if m != nil {
		return m.Time
	}
	return nil
}

func (x *TimeValue) GetAbsolute() float64 {
	if x, ok := x.GetTime().(*TimeValue_Absolute); ok {
		return x.Absolute
	}
	return 0
}

func (x *TimeValue) GetRelative() float64 {
	if x, ok := x.GetTime().(*TimeValue_Relative); ok {
		return x.Relative
	}
	return 0
}

type isTimeValue_Time interface {
	isTimeValue_Time()
}

type TimeValue_Absolute struct {
	Absolute float64 `protobuf:"fixed64,1,opt,name=absolute,proto3,oneof"`
}

type TimeValue_Relative struct {
	Relative float64 `protobuf:"fixed64,2,opt,name=relative,proto3,oneof"`
}

func (*TimeValue_Absolute) isTimeValue_Time() {}

func (*TimeValue_Relative) isTimeValue_Time() {}

type CompareTime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Eq  *TimeValue `protobuf:"bytes,1,opt,name=eq,proto3" json:"eq,omitempty"`
	Neq *TimeValue `protobuf:"bytes,2,opt,name=neq,proto3" json:"neq,omitempty"`
	Lt  *TimeValue `protobuf:"bytes,3,opt,name=lt,proto3" json:"lt,omitempty"`
	Gt  *TimeValue `protobuf:"bytes,4,opt,name=gt,proto3" json:"gt,omitempty"`
	Gte *TimeValue `protobuf:"bytes,5,opt,name=gte,proto3" json:"gte,omitempty"`
	Lte *TimeValue `protobuf:"bytes,6,opt,name=lte,proto3" json:"lte,omitempty"`
}

func (x *CompareTime) Reset() {
	*x = CompareTime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompareTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompareTime) ProtoMessage() {}

func (x *CompareTime) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompareTime.ProtoReflect.Descriptor instead.
func (*CompareTime) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{6}
}

func (x *CompareTime) GetEq() *TimeValue {
	if x != nil {
		return x.Eq
	}
	return nil
}

func (x *CompareTime) GetNeq() *TimeValue {
	if x != nil {
		return x.Neq
	}
	return nil
}

func (x *CompareTime) GetLt() *TimeValue {
	if x != nil {
		return x.Lt
	}
	return nil
}

func (x *CompareTime) GetGt() *TimeValue {
	if x != nil {
		return x.Gt
	}
	return nil
}

func (x *CompareTime) GetGte() *TimeValue {
	if x != nil {
		return x.Gte
	}
	return nil
}

func (x *CompareTime) GetLte() *TimeValue {
	if x != nil {
		return x.Lte
	}
	return nil
}

type CompareUInt64 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Eq  *UInt64Value `protobuf:"bytes,1,opt,name=eq,proto3" json:"eq,omitempty"`
	Neq *UInt64Value `protobuf:"bytes,2,opt,name=neq,proto3" json:"neq,omitempty"`
	Lt  *UInt64Value `protobuf:"bytes,3,opt,name=lt,proto3" json:"lt,omitempty"`
	Gt  *UInt64Value `protobuf:"bytes,4,opt,name=gt,proto3" json:"gt,omitempty"`
	Gte *UInt64Value `protobuf:"bytes,5,opt,name=gte,proto3" json:"gte,omitempty"`
	Lte *UInt64Value `protobuf:"bytes,6,opt,name=lte,proto3" json:"lte,omitempty"`
}

func (x *CompareUInt64) Reset() {
	*x = CompareUInt64{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompareUInt64) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompareUInt64) ProtoMessage() {}

func (x *CompareUInt64) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompareUInt64.ProtoReflect.Descriptor instead.
func (*CompareUInt64) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{7}
}

func (x *CompareUInt64) GetEq() *UInt64Value {
	if x != nil {
		return x.Eq
	}
	return nil
}

func (x *CompareUInt64) GetNeq() *UInt64Value {
	if x != nil {
		return x.Neq
	}
	return nil
}

func (x *CompareUInt64) GetLt() *UInt64Value {
	if x != nil {
		return x.Lt
	}
	return nil
}

func (x *CompareUInt64) GetGt() *UInt64Value {
	if x != nil {
		return x.Gt
	}
	return nil
}

func (x *CompareUInt64) GetGte() *UInt64Value {
	if x != nil {
		return x.Gte
	}
	return nil
}

func (x *CompareUInt64) GetLte() *UInt64Value {
	if x != nil {
		return x.Lte
	}
	return nil
}

type CompareDouble struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Eq  *DoubleValue `protobuf:"bytes,1,opt,name=eq,proto3" json:"eq,omitempty"`
	Neq *DoubleValue `protobuf:"bytes,2,opt,name=neq,proto3" json:"neq,omitempty"`
	Lt  *DoubleValue `protobuf:"bytes,3,opt,name=lt,proto3" json:"lt,omitempty"`
	Gt  *DoubleValue `protobuf:"bytes,4,opt,name=gt,proto3" json:"gt,omitempty"`
	Gte *DoubleValue `protobuf:"bytes,5,opt,name=gte,proto3" json:"gte,omitempty"`
	Lte *DoubleValue `protobuf:"bytes,6,opt,name=lte,proto3" json:"lte,omitempty"`
}

func (x *CompareDouble) Reset() {
	*x = CompareDouble{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompareDouble) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompareDouble) ProtoMessage() {}

func (x *CompareDouble) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompareDouble.ProtoReflect.Descriptor instead.
func (*CompareDouble) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{8}
}

func (x *CompareDouble) GetEq() *DoubleValue {
	if x != nil {
		return x.Eq
	}
	return nil
}

func (x *CompareDouble) GetNeq() *DoubleValue {
	if x != nil {
		return x.Neq
	}
	return nil
}

func (x *CompareDouble) GetLt() *DoubleValue {
	if x != nil {
		return x.Lt
	}
	return nil
}

func (x *CompareDouble) GetGt() *DoubleValue {
	if x != nil {
		return x.Gt
	}
	return nil
}

func (x *CompareDouble) GetGte() *DoubleValue {
	if x != nil {
		return x.Gte
	}
	return nil
}

func (x *CompareDouble) GetLte() *DoubleValue {
	if x != nil {
		return x.Lte
	}
	return nil
}

type StringMatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exclude  bool                  `protobuf:"varint,1,opt,name=exclude,proto3" json:"exclude,omitempty"`
	Value    string                `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Type     StringMatch_MatchType `protobuf:"varint,3,opt,name=type,proto3,enum=smtpd.StringMatch_MatchType" json:"type,omitempty"`
	Caseless bool                  `protobuf:"varint,4,opt,name=caseless,proto3" json:"caseless,omitempty"`
}

func (x *StringMatch) Reset() {
	*x = StringMatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StringMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringMatch) ProtoMessage() {}

func (x *StringMatch) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringMatch.ProtoReflect.Descriptor instead.
func (*StringMatch) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{9}
}

func (x *StringMatch) GetExclude() bool {
	if x != nil {
		return x.Exclude
	}
	return false
}

func (x *StringMatch) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *StringMatch) GetType() StringMatch_MatchType {
	if x != nil {
		return x.Type
	}
	return StringMatch_EXACT
}

func (x *StringMatch) GetCaseless() bool {
	if x != nil {
		return x.Caseless
	}
	return false
}

type VersionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Major uint64 `protobuf:"varint,1,opt,name=major,proto3" json:"major,omitempty"`
	Minor uint64 `protobuf:"varint,2,opt,name=minor,proto3" json:"minor,omitempty"`
	Patch uint64 `protobuf:"varint,3,opt,name=patch,proto3" json:"patch,omitempty"`
}

func (x *VersionResponse) Reset() {
	*x = VersionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VersionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VersionResponse) ProtoMessage() {}

func (x *VersionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VersionResponse.ProtoReflect.Descriptor instead.
func (*VersionResponse) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{10}
}

func (x *VersionResponse) GetMajor() uint64 {
	if x != nil {
		return x.Major
	}
	return 0
}

func (x *VersionResponse) GetMinor() uint64 {
	if x != nil {
		return x.Minor
	}
	return 0
}

func (x *VersionResponse) GetPatch() uint64 {
	if x != nil {
		return x.Patch
	}
	return 0
}

type QueueItemID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transaction string `protobuf:"bytes,1,opt,name=transaction,proto3" json:"transaction,omitempty"`
	Queue       uint64 `protobuf:"varint,2,opt,name=queue,proto3" json:"queue,omitempty"`
}

func (x *QueueItemID) Reset() {
	*x = QueueItemID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueueItemID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueItemID) ProtoMessage() {}

func (x *QueueItemID) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueItemID.ProtoReflect.Descriptor instead.
func (*QueueItemID) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{11}
}

func (x *QueueItemID) GetTransaction() string {
	if x != nil {
		return x.Transaction
	}
	return ""
}

func (x *QueueItemID) GetQueue() uint64 {
	if x != nil {
		return x.Queue
	}
	return 0
}

type Condition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Queues          []*Condition_QueueState              `protobuf:"bytes,1,rep,name=queues,proto3" json:"queues,omitempty"`
	Freezes         []*Condition_FreezeState             `protobuf:"bytes,2,rep,name=freezes,proto3" json:"freezes,omitempty"`
	Workings        []*Condition_WorkingState            `protobuf:"bytes,3,rep,name=workings,proto3" json:"workings,omitempty"`
	Ids             []*Condition_QueueItemID             `protobuf:"bytes,4,rep,name=ids,proto3" json:"ids,omitempty"`
	Hold            *BoolValue                           `protobuf:"bytes,5,opt,name=hold,proto3" json:"hold,omitempty"`
	Serverids       []*Condition_CompareStringValue      `protobuf:"bytes,6,rep,name=serverids,proto3" json:"serverids,omitempty"`
	Senderips       []*Condition_CompareStringValue      `protobuf:"bytes,7,rep,name=senderips,proto3" json:"senderips,omitempty"`
	Transportids    []*Condition_CompareStringRegexValue `protobuf:"bytes,8,rep,name=transportids,proto3" json:"transportids,omitempty"`
	Jobids          []*Condition_CompareStringRegexValue `protobuf:"bytes,9,rep,name=jobids,proto3" json:"jobids,omitempty"`
	Groupings       []*Condition_CompareStringRegexValue `protobuf:"bytes,27,rep,name=groupings,proto3" json:"groupings,omitempty"`
	Stageids        []*Condition_CompareStringValue      `protobuf:"bytes,10,rep,name=stageids,proto3" json:"stageids,omitempty"`
	Senders         []*Condition_MailAddress             `protobuf:"bytes,11,rep,name=senders,proto3" json:"senders,omitempty"`
	Recipients      []*Condition_MailAddress             `protobuf:"bytes,12,rep,name=recipients,proto3" json:"recipients,omitempty"`
	Tss             []*CompareTime                       `protobuf:"bytes,13,rep,name=tss,proto3" json:"tss,omitempty"`
	Retrytss        []*CompareTime                       `protobuf:"bytes,14,rep,name=retrytss,proto3" json:"retrytss,omitempty"`
	Retrycounts     []*CompareUInt64                     `protobuf:"bytes,15,rep,name=retrycounts,proto3" json:"retrycounts,omitempty"`
	Subjects        []*StringMatch                       `protobuf:"bytes,16,rep,name=subjects,proto3" json:"subjects,omitempty"`
	Metadatas       []*Condition_MapStringValue          `protobuf:"bytes,17,rep,name=metadatas,proto3" json:"metadatas,omitempty"`
	Quotas          []*Condition_CompareStringValue      `protobuf:"bytes,18,rep,name=quotas,proto3" json:"quotas,omitempty"`
	Sizes           []*CompareUInt64                     `protobuf:"bytes,19,rep,name=sizes,proto3" json:"sizes,omitempty"`
	Retryreasons    []*StringMatch                       `protobuf:"bytes,20,rep,name=retryreasons,proto3" json:"retryreasons,omitempty"`
	Localips        []*Condition_CompareStringValue      `protobuf:"bytes,21,rep,name=localips,proto3" json:"localips,omitempty"`
	Remoteips       []*Condition_CompareStringValue      `protobuf:"bytes,22,rep,name=remoteips,proto3" json:"remoteips,omitempty"`
	Remotemxs       []*Condition_CompareStringRegexValue `protobuf:"bytes,23,rep,name=remotemxs,proto3" json:"remotemxs,omitempty"`
	Tags            []*Condition_CompareStringValue      `protobuf:"bytes,24,rep,name=tags,proto3" json:"tags,omitempty"`
	Priorities      []*CompareUInt64                     `protobuf:"bytes,25,rep,name=priorities,proto3" json:"priorities,omitempty"`
	Probability     float32                              `protobuf:"fixed32,28,opt,name=probability,proto3" json:"probability,omitempty"`
	Policygroupings *Condition_Fields                    `protobuf:"bytes,26,opt,name=policygroupings,proto3" json:"policygroupings,omitempty"`
}

func (x *Condition) Reset() {
	*x = Condition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Condition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Condition) ProtoMessage() {}

func (x *Condition) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Condition.ProtoReflect.Descriptor instead.
func (*Condition) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{12}
}

func (x *Condition) GetQueues() []*Condition_QueueState {
	if x != nil {
		return x.Queues
	}
	return nil
}

func (x *Condition) GetFreezes() []*Condition_FreezeState {
	if x != nil {
		return x.Freezes
	}
	return nil
}

func (x *Condition) GetWorkings() []*Condition_WorkingState {
	if x != nil {
		return x.Workings
	}
	return nil
}

func (x *Condition) GetIds() []*Condition_QueueItemID {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *Condition) GetHold() *BoolValue {
	if x != nil {
		return x.Hold
	}
	return nil
}

func (x *Condition) GetServerids() []*Condition_CompareStringValue {
	if x != nil {
		return x.Serverids
	}
	return nil
}

func (x *Condition) GetSenderips() []*Condition_CompareStringValue {
	if x != nil {
		return x.Senderips
	}
	return nil
}

func (x *Condition) GetTransportids() []*Condition_CompareStringRegexValue {
	if x != nil {
		return x.Transportids
	}
	return nil
}

func (x *Condition) GetJobids() []*Condition_CompareStringRegexValue {
	if x != nil {
		return x.Jobids
	}
	return nil
}

func (x *Condition) GetGroupings() []*Condition_CompareStringRegexValue {
	if x != nil {
		return x.Groupings
	}
	return nil
}

func (x *Condition) GetStageids() []*Condition_CompareStringValue {
	if x != nil {
		return x.Stageids
	}
	return nil
}

func (x *Condition) GetSenders() []*Condition_MailAddress {
	if x != nil {
		return x.Senders
	}
	return nil
}

func (x *Condition) GetRecipients() []*Condition_MailAddress {
	if x != nil {
		return x.Recipients
	}
	return nil
}

func (x *Condition) GetTss() []*CompareTime {
	if x != nil {
		return x.Tss
	}
	return nil
}

func (x *Condition) GetRetrytss() []*CompareTime {
	if x != nil {
		return x.Retrytss
	}
	return nil
}

func (x *Condition) GetRetrycounts() []*CompareUInt64 {
	if x != nil {
		return x.Retrycounts
	}
	return nil
}

func (x *Condition) GetSubjects() []*StringMatch {
	if x != nil {
		return x.Subjects
	}
	return nil
}

func (x *Condition) GetMetadatas() []*Condition_MapStringValue {
	if x != nil {
		return x.Metadatas
	}
	return nil
}

func (x *Condition) GetQuotas() []*Condition_CompareStringValue {
	if x != nil {
		return x.Quotas
	}
	return nil
}

func (x *Condition) GetSizes() []*CompareUInt64 {
	if x != nil {
		return x.Sizes
	}
	return nil
}

func (x *Condition) GetRetryreasons() []*StringMatch {
	if x != nil {
		return x.Retryreasons
	}
	return nil
}

func (x *Condition) GetLocalips() []*Condition_CompareStringValue {
	if x != nil {
		return x.Localips
	}
	return nil
}

func (x *Condition) GetRemoteips() []*Condition_CompareStringValue {
	if x != nil {
		return x.Remoteips
	}
	return nil
}

func (x *Condition) GetRemotemxs() []*Condition_CompareStringRegexValue {
	if x != nil {
		return x.Remotemxs
	}
	return nil
}

func (x *Condition) GetTags() []*Condition_CompareStringValue {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Condition) GetPriorities() []*CompareUInt64 {
	if x != nil {
		return x.Priorities
	}
	return nil
}

func (x *Condition) GetProbability() float32 {
	if x != nil {
		return x.Probability
	}
	return 0
}

func (x *Condition) GetPolicygroupings() *Condition_Fields {
	if x != nil {
		return x.Policygroupings
	}
	return nil
}

type QueueUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conditions *Condition `protobuf:"bytes,1,opt,name=conditions,proto3" json:"conditions,omitempty"`
	// Types that are assignable to Task:
	//
	//	*QueueUpdateRequest_Move_
	//	*QueueUpdateRequest_Actiontype
	//	*QueueUpdateRequest_Action_
	Task        isQueueUpdateRequest_Task       `protobuf_oneof:"task"`
	Transportid *StringValue                    `protobuf:"bytes,4,opt,name=transportid,proto3" json:"transportid,omitempty"`
	Metadata    map[string]string               `protobuf:"bytes,5,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Freeze      bool                            `protobuf:"varint,6,opt,name=freeze,proto3" json:"freeze,omitempty"`
	Duplicate   bool                            `protobuf:"varint,7,opt,name=duplicate,proto3" json:"duplicate,omitempty"`
	Sender      *QueueUpdateRequest_MailAddress `protobuf:"bytes,8,opt,name=sender,proto3" json:"sender,omitempty"`
	Recipient   *QueueUpdateRequest_MailAddress `protobuf:"bytes,9,opt,name=recipient,proto3" json:"recipient,omitempty"`
	Retrycount  *UInt64Value                    `protobuf:"bytes,10,opt,name=retrycount,proto3" json:"retrycount,omitempty"`
	Priority    *UInt64Value                    `protobuf:"bytes,12,opt,name=priority,proto3" json:"priority,omitempty"`
	Paging      *QueueUpdateRequest_Paging      `protobuf:"bytes,13,opt,name=paging,proto3" json:"paging,omitempty"`
}

func (x *QueueUpdateRequest) Reset() {
	*x = QueueUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueueUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueUpdateRequest) ProtoMessage() {}

func (x *QueueUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueUpdateRequest.ProtoReflect.Descriptor instead.
func (*QueueUpdateRequest) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{13}
}

func (x *QueueUpdateRequest) GetConditions() *Condition {
	if x != nil {
		return x.Conditions
	}
	return nil
}

func (m *QueueUpdateRequest) GetTask() isQueueUpdateRequest_Task {
	if m != nil {
		return m.Task
	}
	return nil
}

func (x *QueueUpdateRequest) GetMove() *QueueUpdateRequest_Move {
	if x, ok := x.GetTask().(*QueueUpdateRequest_Move_); ok {
		return x.Move
	}
	return nil
}

func (x *QueueUpdateRequest) GetActiontype() ActionType {
	if x, ok := x.GetTask().(*QueueUpdateRequest_Actiontype); ok {
		return x.Actiontype
	}
	return ActionType_DELETE
}

func (x *QueueUpdateRequest) GetAction() *QueueUpdateRequest_Action {
	if x, ok := x.GetTask().(*QueueUpdateRequest_Action_); ok {
		return x.Action
	}
	return nil
}

func (x *QueueUpdateRequest) GetTransportid() *StringValue {
	if x != nil {
		return x.Transportid
	}
	return nil
}

func (x *QueueUpdateRequest) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *QueueUpdateRequest) GetFreeze() bool {
	if x != nil {
		return x.Freeze
	}
	return false
}

func (x *QueueUpdateRequest) GetDuplicate() bool {
	if x != nil {
		return x.Duplicate
	}
	return false
}

func (x *QueueUpdateRequest) GetSender() *QueueUpdateRequest_MailAddress {
	if x != nil {
		return x.Sender
	}
	return nil
}

func (x *QueueUpdateRequest) GetRecipient() *QueueUpdateRequest_MailAddress {
	if x != nil {
		return x.Recipient
	}
	return nil
}

func (x *QueueUpdateRequest) GetRetrycount() *UInt64Value {
	if x != nil {
		return x.Retrycount
	}
	return nil
}

func (x *QueueUpdateRequest) GetPriority() *UInt64Value {
	if x != nil {
		return x.Priority
	}
	return nil
}

func (x *QueueUpdateRequest) GetPaging() *QueueUpdateRequest_Paging {
	if x != nil {
		return x.Paging
	}
	return nil
}

type isQueueUpdateRequest_Task interface {
	isQueueUpdateRequest_Task()
}

type QueueUpdateRequest_Move_ struct {
	Move *QueueUpdateRequest_Move `protobuf:"bytes,2,opt,name=move,proto3,oneof"`
}

type QueueUpdateRequest_Actiontype struct {
	Actiontype ActionType `protobuf:"varint,3,opt,name=actiontype,proto3,enum=smtpd.ActionType,oneof"`
}

type QueueUpdateRequest_Action_ struct {
	Action *QueueUpdateRequest_Action `protobuf:"bytes,11,opt,name=action,proto3,oneof"`
}

func (*QueueUpdateRequest_Move_) isQueueUpdateRequest_Task() {}

func (*QueueUpdateRequest_Actiontype) isQueueUpdateRequest_Task() {}

func (*QueueUpdateRequest_Action_) isQueueUpdateRequest_Task() {}

type QueueUpdateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Affected uint64 `protobuf:"varint,1,opt,name=affected,proto3" json:"affected,omitempty"`
	Working  uint64 `protobuf:"varint,2,opt,name=working,proto3" json:"working,omitempty"`
}

func (x *QueueUpdateResponse) Reset() {
	*x = QueueUpdateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueueUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueUpdateResponse) ProtoMessage() {}

func (x *QueueUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueUpdateResponse.ProtoReflect.Descriptor instead.
func (*QueueUpdateResponse) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{14}
}

func (x *QueueUpdateResponse) GetAffected() uint64 {
	if x != nil {
		return x.Affected
	}
	return 0
}

func (x *QueueUpdateResponse) GetWorking() uint64 {
	if x != nil {
		return x.Working
	}
	return 0
}

type Groupings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transportid     []*StringRegexValue `protobuf:"bytes,1,rep,name=transportid,proto3" json:"transportid,omitempty"`
	Localip         []*StringValue      `protobuf:"bytes,2,rep,name=localip,proto3" json:"localip,omitempty"`
	Remoteip        []*StringValue      `protobuf:"bytes,3,rep,name=remoteip,proto3" json:"remoteip,omitempty"`
	Remotemx        []*StringRegexValue `protobuf:"bytes,4,rep,name=remotemx,proto3" json:"remotemx,omitempty"`
	Recipientdomain []*StringRegexValue `protobuf:"bytes,5,rep,name=recipientdomain,proto3" json:"recipientdomain,omitempty"`
	Jobid           []*StringRegexValue `protobuf:"bytes,6,rep,name=jobid,proto3" json:"jobid,omitempty"`
	Grouping        []*StringRegexValue `protobuf:"bytes,7,rep,name=grouping,proto3" json:"grouping,omitempty"`
}

func (x *Groupings) Reset() {
	*x = Groupings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Groupings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Groupings) ProtoMessage() {}

func (x *Groupings) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Groupings.ProtoReflect.Descriptor instead.
func (*Groupings) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{15}
}

func (x *Groupings) GetTransportid() []*StringRegexValue {
	if x != nil {
		return x.Transportid
	}
	return nil
}

func (x *Groupings) GetLocalip() []*StringValue {
	if x != nil {
		return x.Localip
	}
	return nil
}

func (x *Groupings) GetRemoteip() []*StringValue {
	if x != nil {
		return x.Remoteip
	}
	return nil
}

func (x *Groupings) GetRemotemx() []*StringRegexValue {
	if x != nil {
		return x.Remotemx
	}
	return nil
}

func (x *Groupings) GetRecipientdomain() []*StringRegexValue {
	if x != nil {
		return x.Recipientdomain
	}
	return nil
}

func (x *Groupings) GetJobid() []*StringRegexValue {
	if x != nil {
		return x.Jobid
	}
	return nil
}

func (x *Groupings) GetGrouping() []*StringRegexValue {
	if x != nil {
		return x.Grouping
	}
	return nil
}

type QueueGroupByRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conditions      *Condition                     `protobuf:"bytes,1,opt,name=conditions,proto3" json:"conditions,omitempty"`
	Sortings        []*QueueGroupByRequest_Sorting `protobuf:"bytes,2,rep,name=sortings,proto3" json:"sortings,omitempty"`
	Paging          *QueueGroupByRequest_Paging    `protobuf:"bytes,3,opt,name=paging,proto3" json:"paging,omitempty"`
	Groupbys        []*QueueGroupByRequest_GroupBy `protobuf:"bytes,4,rep,name=groupbys,proto3" json:"groupbys,omitempty"`
	Counts          []*QueueGroupByRequest_Counts  `protobuf:"bytes,5,rep,name=counts,proto3" json:"counts,omitempty"`
	Return          QueueGroupByRequest_ReturnType `protobuf:"varint,6,opt,name=return,proto3,enum=smtpd.QueueGroupByRequest_ReturnType" json:"return,omitempty"`
	Groupings       map[string]*Groupings          `protobuf:"bytes,7,rep,name=groupings,proto3" json:"groupings,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Policygroupings *QueueGroupByRequest_Fields    `protobuf:"bytes,8,opt,name=policygroupings,proto3" json:"policygroupings,omitempty"`
}

func (x *QueueGroupByRequest) Reset() {
	*x = QueueGroupByRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueueGroupByRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueGroupByRequest) ProtoMessage() {}

func (x *QueueGroupByRequest) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueGroupByRequest.ProtoReflect.Descriptor instead.
func (*QueueGroupByRequest) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{16}
}

func (x *QueueGroupByRequest) GetConditions() *Condition {
	if x != nil {
		return x.Conditions
	}
	return nil
}

func (x *QueueGroupByRequest) GetSortings() []*QueueGroupByRequest_Sorting {
	if x != nil {
		return x.Sortings
	}
	return nil
}

func (x *QueueGroupByRequest) GetPaging() *QueueGroupByRequest_Paging {
	if x != nil {
		return x.Paging
	}
	return nil
}

func (x *QueueGroupByRequest) GetGroupbys() []*QueueGroupByRequest_GroupBy {
	if x != nil {
		return x.Groupbys
	}
	return nil
}

func (x *QueueGroupByRequest) GetCounts() []*QueueGroupByRequest_Counts {
	if x != nil {
		return x.Counts
	}
	return nil
}

func (x *QueueGroupByRequest) GetReturn() QueueGroupByRequest_ReturnType {
	if x != nil {
		return x.Return
	}
	return QueueGroupByRequest_COUNT
}

func (x *QueueGroupByRequest) GetGroupings() map[string]*Groupings {
	if x != nil {
		return x.Groupings
	}
	return nil
}

func (x *QueueGroupByRequest) GetPolicygroupings() *QueueGroupByRequest_Fields {
	if x != nil {
		return x.Policygroupings
	}
	return nil
}

type QueueGroupByResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items  []*QueueGroupByResponse_Item `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	Paging *QueueGroupByResponse_Paging `protobuf:"bytes,2,opt,name=paging,proto3" json:"paging,omitempty"`
}

func (x *QueueGroupByResponse) Reset() {
	*x = QueueGroupByResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueueGroupByResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueGroupByResponse) ProtoMessage() {}

func (x *QueueGroupByResponse) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueGroupByResponse.ProtoReflect.Descriptor instead.
func (*QueueGroupByResponse) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{17}
}

func (x *QueueGroupByResponse) GetItems() []*QueueGroupByResponse_Item {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *QueueGroupByResponse) GetPaging() *QueueGroupByResponse_Paging {
	if x != nil {
		return x.Paging
	}
	return nil
}

type QueueListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conditions *Condition                  `protobuf:"bytes,1,opt,name=conditions,proto3" json:"conditions,omitempty"`
	Sortings   []*QueueListRequest_Sorting `protobuf:"bytes,2,rep,name=sortings,proto3" json:"sortings,omitempty"`
	Paging     *QueueListRequest_Paging    `protobuf:"bytes,3,opt,name=paging,proto3" json:"paging,omitempty"`
}

func (x *QueueListRequest) Reset() {
	*x = QueueListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueueListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueListRequest) ProtoMessage() {}

func (x *QueueListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueListRequest.ProtoReflect.Descriptor instead.
func (*QueueListRequest) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{18}
}

func (x *QueueListRequest) GetConditions() *Condition {
	if x != nil {
		return x.Conditions
	}
	return nil
}

func (x *QueueListRequest) GetSortings() []*QueueListRequest_Sorting {
	if x != nil {
		return x.Sortings
	}
	return nil
}

func (x *QueueListRequest) GetPaging() *QueueListRequest_Paging {
	if x != nil {
		return x.Paging
	}
	return nil
}

type QueueListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items  []*QueueListResponse_QueueItem `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	Paging *QueueListResponse_Paging      `protobuf:"bytes,2,opt,name=paging,proto3" json:"paging,omitempty"`
}

func (x *QueueListResponse) Reset() {
	*x = QueueListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueueListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueListResponse) ProtoMessage() {}

func (x *QueueListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueListResponse.ProtoReflect.Descriptor instead.
func (*QueueListResponse) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{19}
}

func (x *QueueListResponse) GetItems() []*QueueListResponse_QueueItem {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *QueueListResponse) GetPaging() *QueueListResponse_Paging {
	if x != nil {
		return x.Paging
	}
	return nil
}

type QueueUnloadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conditions *Condition `protobuf:"bytes,1,opt,name=conditions,proto3" json:"conditions,omitempty"`
	Freeze     bool       `protobuf:"varint,2,opt,name=freeze,proto3" json:"freeze,omitempty"`
	Partial    bool       `protobuf:"varint,3,opt,name=partial,proto3" json:"partial,omitempty"`
}

func (x *QueueUnloadRequest) Reset() {
	*x = QueueUnloadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueueUnloadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueUnloadRequest) ProtoMessage() {}

func (x *QueueUnloadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueUnloadRequest.ProtoReflect.Descriptor instead.
func (*QueueUnloadRequest) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{20}
}

func (x *QueueUnloadRequest) GetConditions() *Condition {
	if x != nil {
		return x.Conditions
	}
	return nil
}

func (x *QueueUnloadRequest) GetFreeze() bool {
	if x != nil {
		return x.Freeze
	}
	return false
}

func (x *QueueUnloadRequest) GetPartial() bool {
	if x != nil {
		return x.Partial
	}
	return false
}

type QueueUnloadResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hqfpaths []string `protobuf:"bytes,1,rep,name=hqfpaths,proto3" json:"hqfpaths,omitempty"`
	Partial  uint64   `protobuf:"varint,2,opt,name=partial,proto3" json:"partial,omitempty"`
	Working  uint64   `protobuf:"varint,3,opt,name=working,proto3" json:"working,omitempty"`
}

func (x *QueueUnloadResponse) Reset() {
	*x = QueueUnloadResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueueUnloadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueUnloadResponse) ProtoMessage() {}

func (x *QueueUnloadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueUnloadResponse.ProtoReflect.Descriptor instead.
func (*QueueUnloadResponse) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{21}
}

func (x *QueueUnloadResponse) GetHqfpaths() []string {
	if x != nil {
		return x.Hqfpaths
	}
	return nil
}

func (x *QueueUnloadResponse) GetPartial() uint64 {
	if x != nil {
		return x.Partial
	}
	return 0
}

func (x *QueueUnloadResponse) GetWorking() uint64 {
	if x != nil {
		return x.Working
	}
	return 0
}

type QueueImportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data   *QueueImportRequest_ImportData `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Reset_ *QueueImportRequest_Reset      `protobuf:"bytes,2,opt,name=reset,proto3" json:"reset,omitempty"`
}

func (x *QueueImportRequest) Reset() {
	*x = QueueImportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueueImportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueImportRequest) ProtoMessage() {}

func (x *QueueImportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueImportRequest.ProtoReflect.Descriptor instead.
func (*QueueImportRequest) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{22}
}

func (x *QueueImportRequest) GetData() *QueueImportRequest_ImportData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *QueueImportRequest) GetReset_() *QueueImportRequest_Reset {
	if x != nil {
		return x.Reset_
	}
	return nil
}

type QueueImportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transactionid string `protobuf:"bytes,1,opt,name=transactionid,proto3" json:"transactionid,omitempty"`
}

func (x *QueueImportResponse) Reset() {
	*x = QueueImportResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueueImportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueImportResponse) ProtoMessage() {}

func (x *QueueImportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueImportResponse.ProtoReflect.Descriptor instead.
func (*QueueImportResponse) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{23}
}

func (x *QueueImportResponse) GetTransactionid() string {
	if x != nil {
		return x.Transactionid
	}
	return ""
}

type QueueExportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id *QueueItemID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *QueueExportRequest) Reset() {
	*x = QueueExportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueueExportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueExportRequest) ProtoMessage() {}

func (x *QueueExportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueExportRequest.ProtoReflect.Descriptor instead.
func (*QueueExportRequest) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{24}
}

func (x *QueueExportRequest) GetId() *QueueItemID {
	if x != nil {
		return x.Id
	}
	return nil
}

type ConfigGreenConditions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Remoteips   []string `protobuf:"bytes,1,rep,name=remoteips,proto3" json:"remoteips,omitempty"`
	Serverids   []string `protobuf:"bytes,2,rep,name=serverids,proto3" json:"serverids,omitempty"`
	Probability float32  `protobuf:"fixed32,3,opt,name=probability,proto3" json:"probability,omitempty"`
	Time        uint64   `protobuf:"varint,4,opt,name=time,proto3" json:"time,omitempty"`
	Count       uint64   `protobuf:"varint,5,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *ConfigGreenConditions) Reset() {
	*x = ConfigGreenConditions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigGreenConditions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigGreenConditions) ProtoMessage() {}

func (x *ConfigGreenConditions) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigGreenConditions.ProtoReflect.Descriptor instead.
func (*ConfigGreenConditions) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{25}
}

func (x *ConfigGreenConditions) GetRemoteips() []string {
	if x != nil {
		return x.Remoteips
	}
	return nil
}

func (x *ConfigGreenConditions) GetServerids() []string {
	if x != nil {
		return x.Serverids
	}
	return nil
}

func (x *ConfigGreenConditions) GetProbability() float32 {
	if x != nil {
		return x.Probability
	}
	return 0
}

func (x *ConfigGreenConditions) GetTime() uint64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *ConfigGreenConditions) GetCount() uint64 {
	if x != nil {
		return x.Count
	}
	return 0
}

type ConfigGreenStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Expired    bool                   `protobuf:"varint,2,opt,name=expired,proto3" json:"expired,omitempty"`
	Time       uint64                 `protobuf:"varint,3,opt,name=time,proto3" json:"time,omitempty"`
	Count      uint64                 `protobuf:"varint,4,opt,name=count,proto3" json:"count,omitempty"`
	Conditions *ConfigGreenConditions `protobuf:"bytes,5,opt,name=conditions,proto3" json:"conditions,omitempty"`
}

func (x *ConfigGreenStatusResponse) Reset() {
	*x = ConfigGreenStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigGreenStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigGreenStatusResponse) ProtoMessage() {}

func (x *ConfigGreenStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigGreenStatusResponse.ProtoReflect.Descriptor instead.
func (*ConfigGreenStatusResponse) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{26}
}

func (x *ConfigGreenStatusResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ConfigGreenStatusResponse) GetExpired() bool {
	if x != nil {
		return x.Expired
	}
	return false
}

func (x *ConfigGreenStatusResponse) GetTime() uint64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *ConfigGreenStatusResponse) GetCount() uint64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ConfigGreenStatusResponse) GetConditions() *ConfigGreenConditions {
	if x != nil {
		return x.Conditions
	}
	return nil
}

type ConfigGreenDeployRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Conditions      *ConfigGreenConditions `protobuf:"bytes,2,opt,name=conditions,proto3" json:"conditions,omitempty"`
	Config          string                 `protobuf:"bytes,3,opt,name=config,proto3" json:"config,omitempty"`
	Connectionbound bool                   `protobuf:"varint,4,opt,name=connectionbound,proto3" json:"connectionbound,omitempty"`
}

func (x *ConfigGreenDeployRequest) Reset() {
	*x = ConfigGreenDeployRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigGreenDeployRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigGreenDeployRequest) ProtoMessage() {}

func (x *ConfigGreenDeployRequest) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigGreenDeployRequest.ProtoReflect.Descriptor instead.
func (*ConfigGreenDeployRequest) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{27}
}

func (x *ConfigGreenDeployRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ConfigGreenDeployRequest) GetConditions() *ConfigGreenConditions {
	if x != nil {
		return x.Conditions
	}
	return nil
}

func (x *ConfigGreenDeployRequest) GetConfig() string {
	if x != nil {
		return x.Config
	}
	return ""
}

func (x *ConfigGreenDeployRequest) GetConnectionbound() bool {
	if x != nil {
		return x.Connectionbound
	}
	return false
}

type HSLCacheResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*HSLCacheResponse_Item `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *HSLCacheResponse) Reset() {
	*x = HSLCacheResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HSLCacheResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HSLCacheResponse) ProtoMessage() {}

func (x *HSLCacheResponse) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HSLCacheResponse.ProtoReflect.Descriptor instead.
func (*HSLCacheResponse) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{28}
}

func (x *HSLCacheResponse) GetItems() []*HSLCacheResponse_Item {
	if x != nil {
		return x.Items
	}
	return nil
}

type HSLLogResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Location *HSLLogResponse_Location `protobuf:"bytes,1,opt,name=location,proto3" json:"location,omitempty"`
	Text     []byte                   `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	Id       string                   `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *HSLLogResponse) Reset() {
	*x = HSLLogResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HSLLogResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HSLLogResponse) ProtoMessage() {}

func (x *HSLLogResponse) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HSLLogResponse.ProtoReflect.Descriptor instead.
func (*HSLLogResponse) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{29}
}

func (x *HSLLogResponse) GetLocation() *HSLLogResponse_Location {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *HSLLogResponse) GetText() []byte {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *HSLLogResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type HSLBreakPointResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string                             `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Debugid       string                             `protobuf:"bytes,2,opt,name=debugid,proto3" json:"debugid,omitempty"`
	Transactionid string                             `protobuf:"bytes,3,opt,name=transactionid,proto3" json:"transactionid,omitempty"`
	Location      *HSLBreakPointResponse_Location    `protobuf:"bytes,4,opt,name=location,proto3" json:"location,omitempty"`
	Time          float64                            `protobuf:"fixed64,5,opt,name=time,proto3" json:"time,omitempty"`
	Values        string                             `protobuf:"bytes,6,opt,name=values,proto3" json:"values,omitempty"`
	Callstack     []*HSLBreakPointResponse_Callstack `protobuf:"bytes,7,rep,name=callstack,proto3" json:"callstack,omitempty"`
}

func (x *HSLBreakPointResponse) Reset() {
	*x = HSLBreakPointResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HSLBreakPointResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HSLBreakPointResponse) ProtoMessage() {}

func (x *HSLBreakPointResponse) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HSLBreakPointResponse.ProtoReflect.Descriptor instead.
func (*HSLBreakPointResponse) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{30}
}

func (x *HSLBreakPointResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *HSLBreakPointResponse) GetDebugid() string {
	if x != nil {
		return x.Debugid
	}
	return ""
}

func (x *HSLBreakPointResponse) GetTransactionid() string {
	if x != nil {
		return x.Transactionid
	}
	return ""
}

func (x *HSLBreakPointResponse) GetLocation() *HSLBreakPointResponse_Location {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *HSLBreakPointResponse) GetTime() float64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *HSLBreakPointResponse) GetValues() string {
	if x != nil {
		return x.Values
	}
	return ""
}

func (x *HSLBreakPointResponse) GetCallstack() []*HSLBreakPointResponse_Callstack {
	if x != nil {
		return x.Callstack
	}
	return nil
}

type HSLCacheClearRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace *StringValue      `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Function  *StringValue      `protobuf:"bytes,2,opt,name=function,proto3" json:"function,omitempty"`
	Arguments map[uint64]string `protobuf:"bytes,3,rep,name=arguments,proto3" json:"arguments,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *HSLCacheClearRequest) Reset() {
	*x = HSLCacheClearRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HSLCacheClearRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HSLCacheClearRequest) ProtoMessage() {}

func (x *HSLCacheClearRequest) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HSLCacheClearRequest.ProtoReflect.Descriptor instead.
func (*HSLCacheClearRequest) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{31}
}

func (x *HSLCacheClearRequest) GetNamespace() *StringValue {
	if x != nil {
		return x.Namespace
	}
	return nil
}

func (x *HSLCacheClearRequest) GetFunction() *StringValue {
	if x != nil {
		return x.Function
	}
	return nil
}

func (x *HSLCacheClearRequest) GetArguments() map[uint64]string {
	if x != nil {
		return x.Arguments
	}
	return nil
}

type HSLCacheClearResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Affected uint64 `protobuf:"varint,1,opt,name=affected,proto3" json:"affected,omitempty"`
}

func (x *HSLCacheClearResponse) Reset() {
	*x = HSLCacheClearResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HSLCacheClearResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HSLCacheClearResponse) ProtoMessage() {}

func (x *HSLCacheClearResponse) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HSLCacheClearResponse.ProtoReflect.Descriptor instead.
func (*HSLCacheClearResponse) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{32}
}

func (x *HSLCacheClearResponse) GetAffected() uint64 {
	if x != nil {
		return x.Affected
	}
	return 0
}

type ProcessStatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Process  *ProcessStatsResponse_Process          `protobuf:"bytes,1,opt,name=process,proto3" json:"process,omitempty"`
	Resolver *ProcessStatsResponse_Resolver         `protobuf:"bytes,2,opt,name=resolver,proto3" json:"resolver,omitempty"`
	Servers  []*ProcessStatsResponse_ServerCounters `protobuf:"bytes,3,rep,name=servers,proto3" json:"servers,omitempty"`
	Queue    *ProcessStatsResponse_Queue            `protobuf:"bytes,4,opt,name=queue,proto3" json:"queue,omitempty"`
	Threads  *ProcessStatsResponse_Threads          `protobuf:"bytes,5,opt,name=threads,proto3" json:"threads,omitempty"`
}

func (x *ProcessStatsResponse) Reset() {
	*x = ProcessStatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessStatsResponse) ProtoMessage() {}

func (x *ProcessStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessStatsResponse.ProtoReflect.Descriptor instead.
func (*ProcessStatsResponse) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{33}
}

func (x *ProcessStatsResponse) GetProcess() *ProcessStatsResponse_Process {
	if x != nil {
		return x.Process
	}
	return nil
}

func (x *ProcessStatsResponse) GetResolver() *ProcessStatsResponse_Resolver {
	if x != nil {
		return x.Resolver
	}
	return nil
}

func (x *ProcessStatsResponse) GetServers() []*ProcessStatsResponse_ServerCounters {
	if x != nil {
		return x.Servers
	}
	return nil
}

func (x *ProcessStatsResponse) GetQueue() *ProcessStatsResponse_Queue {
	if x != nil {
		return x.Queue
	}
	return nil
}

func (x *ProcessStatsResponse) GetThreads() *ProcessStatsResponse_Threads {
	if x != nil {
		return x.Threads
	}
	return nil
}

type QueueQuotaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Quota string `protobuf:"bytes,1,opt,name=quota,proto3" json:"quota,omitempty"`
}

func (x *QueueQuotaRequest) Reset() {
	*x = QueueQuotaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueueQuotaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueQuotaRequest) ProtoMessage() {}

func (x *QueueQuotaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueQuotaRequest.ProtoReflect.Descriptor instead.
func (*QueueQuotaRequest) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{34}
}

func (x *QueueQuotaRequest) GetQuota() string {
	if x != nil {
		return x.Quota
	}
	return ""
}

type QueueQuotaResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count uint64 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	Bytes uint64 `protobuf:"varint,2,opt,name=bytes,proto3" json:"bytes,omitempty"`
}

func (x *QueueQuotaResponse) Reset() {
	*x = QueueQuotaResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueueQuotaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueQuotaResponse) ProtoMessage() {}

func (x *QueueQuotaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueQuotaResponse.ProtoReflect.Descriptor instead.
func (*QueueQuotaResponse) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{35}
}

func (x *QueueQuotaResponse) GetCount() uint64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *QueueQuotaResponse) GetBytes() uint64 {
	if x != nil {
		return x.Bytes
	}
	return 0
}

type HSLMemoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *HSLMemoryRequest) Reset() {
	*x = HSLMemoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HSLMemoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HSLMemoryRequest) ProtoMessage() {}

func (x *HSLMemoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HSLMemoryRequest.ProtoReflect.Descriptor instead.
func (*HSLMemoryRequest) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{36}
}

func (x *HSLMemoryRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type HSLMemoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *HSLMemoryResponse) Reset() {
	*x = HSLMemoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HSLMemoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HSLMemoryResponse) ProtoMessage() {}

func (x *HSLMemoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HSLMemoryResponse.ProtoReflect.Descriptor instead.
func (*HSLMemoryResponse) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{37}
}

func (x *HSLMemoryResponse) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type HSLMemoryListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Condition *HSLMemoryListRequest_Condition `protobuf:"bytes,1,opt,name=condition,proto3" json:"condition,omitempty"`
	Paging    *HSLMemoryListRequest_Paging    `protobuf:"bytes,2,opt,name=paging,proto3" json:"paging,omitempty"`
}

func (x *HSLMemoryListRequest) Reset() {
	*x = HSLMemoryListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HSLMemoryListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HSLMemoryListRequest) ProtoMessage() {}

func (x *HSLMemoryListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HSLMemoryListRequest.ProtoReflect.Descriptor instead.
func (*HSLMemoryListRequest) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{38}
}

func (x *HSLMemoryListRequest) GetCondition() *HSLMemoryListRequest_Condition {
	if x != nil {
		return x.Condition
	}
	return nil
}

func (x *HSLMemoryListRequest) GetPaging() *HSLMemoryListRequest_Paging {
	if x != nil {
		return x.Paging
	}
	return nil
}

type HSLMemoryListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keys []string `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"`
}

func (x *HSLMemoryListResponse) Reset() {
	*x = HSLMemoryListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HSLMemoryListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HSLMemoryListResponse) ProtoMessage() {}

func (x *HSLMemoryListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HSLMemoryListResponse.ProtoReflect.Descriptor instead.
func (*HSLMemoryListResponse) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{39}
}

func (x *HSLMemoryListResponse) GetKeys() []string {
	if x != nil {
		return x.Keys
	}
	return nil
}

type HSLMemoryStoreRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key    string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value  string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Return bool   `protobuf:"varint,3,opt,name=return,proto3" json:"return,omitempty"`
}

func (x *HSLMemoryStoreRequest) Reset() {
	*x = HSLMemoryStoreRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HSLMemoryStoreRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HSLMemoryStoreRequest) ProtoMessage() {}

func (x *HSLMemoryStoreRequest) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HSLMemoryStoreRequest.ProtoReflect.Descriptor instead.
func (*HSLMemoryStoreRequest) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{40}
}

func (x *HSLMemoryStoreRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *HSLMemoryStoreRequest) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *HSLMemoryStoreRequest) GetReturn() bool {
	if x != nil {
		return x.Return
	}
	return false
}

type HSLMemoryStoreResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *HSLMemoryStoreResponse) Reset() {
	*x = HSLMemoryStoreResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HSLMemoryStoreResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HSLMemoryStoreResponse) ProtoMessage() {}

func (x *HSLMemoryStoreResponse) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HSLMemoryStoreResponse.ProtoReflect.Descriptor instead.
func (*HSLMemoryStoreResponse) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{41}
}

func (x *HSLMemoryStoreResponse) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type HSLMemoryDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key    string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Return bool   `protobuf:"varint,2,opt,name=return,proto3" json:"return,omitempty"`
}

func (x *HSLMemoryDeleteRequest) Reset() {
	*x = HSLMemoryDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HSLMemoryDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HSLMemoryDeleteRequest) ProtoMessage() {}

func (x *HSLMemoryDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HSLMemoryDeleteRequest.ProtoReflect.Descriptor instead.
func (*HSLMemoryDeleteRequest) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{42}
}

func (x *HSLMemoryDeleteRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *HSLMemoryDeleteRequest) GetReturn() bool {
	if x != nil {
		return x.Return
	}
	return false
}

type HSLMemoryDeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Affected uint64 `protobuf:"varint,1,opt,name=affected,proto3" json:"affected,omitempty"`
	Value    string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *HSLMemoryDeleteResponse) Reset() {
	*x = HSLMemoryDeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HSLMemoryDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HSLMemoryDeleteResponse) ProtoMessage() {}

func (x *HSLMemoryDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HSLMemoryDeleteResponse.ProtoReflect.Descriptor instead.
func (*HSLMemoryDeleteResponse) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{43}
}

func (x *HSLMemoryDeleteResponse) GetAffected() uint64 {
	if x != nil {
		return x.Affected
	}
	return 0
}

func (x *HSLMemoryDeleteResponse) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type SuspendRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Filter:
	//
	//	*SuspendRequest_Id
	//	*SuspendRequest_Condition_
	Filter isSuspendRequest_Filter `protobuf_oneof:"filter"`
	Paging *SuspendRequest_Paging  `protobuf:"bytes,4,opt,name=paging,proto3" json:"paging,omitempty"`
}

func (x *SuspendRequest) Reset() {
	*x = SuspendRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuspendRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuspendRequest) ProtoMessage() {}

func (x *SuspendRequest) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuspendRequest.ProtoReflect.Descriptor instead.
func (*SuspendRequest) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{44}
}

func (m *SuspendRequest) GetFilter() isSuspendRequest_Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (x *SuspendRequest) GetId() string {
	if x, ok := x.GetFilter().(*SuspendRequest_Id); ok {
		return x.Id
	}
	return ""
}

func (x *SuspendRequest) GetCondition() *SuspendRequest_Condition {
	if x, ok := x.GetFilter().(*SuspendRequest_Condition_); ok {
		return x.Condition
	}
	return nil
}

func (x *SuspendRequest) GetPaging() *SuspendRequest_Paging {
	if x != nil {
		return x.Paging
	}
	return nil
}

type isSuspendRequest_Filter interface {
	isSuspendRequest_Filter()
}

type SuspendRequest_Id struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3,oneof"`
}

type SuspendRequest_Condition_ struct {
	Condition *SuspendRequest_Condition `protobuf:"bytes,2,opt,name=condition,proto3,oneof"`
}

func (*SuspendRequest_Id) isSuspendRequest_Filter() {}

func (*SuspendRequest_Condition_) isSuspendRequest_Filter() {}

type SuspendResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*SuspendResponse_Item `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *SuspendResponse) Reset() {
	*x = SuspendResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuspendResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuspendResponse) ProtoMessage() {}

func (x *SuspendResponse) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuspendResponse.ProtoReflect.Descriptor instead.
func (*SuspendResponse) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{45}
}

func (x *SuspendResponse) GetItems() []*SuspendResponse_Item {
	if x != nil {
		return x.Items
	}
	return nil
}

type SuspendAddRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string       `protobuf:"bytes,9,opt,name=id,proto3" json:"id,omitempty"`
	Transportid     *StringValue `protobuf:"bytes,1,opt,name=transportid,proto3" json:"transportid,omitempty"`
	Localip         *StringValue `protobuf:"bytes,2,opt,name=localip,proto3" json:"localip,omitempty"`
	Remoteip        *StringValue `protobuf:"bytes,3,opt,name=remoteip,proto3" json:"remoteip,omitempty"`
	Remotemx        *StringValue `protobuf:"bytes,4,opt,name=remotemx,proto3" json:"remotemx,omitempty"`
	Recipientdomain *StringValue `protobuf:"bytes,5,opt,name=recipientdomain,proto3" json:"recipientdomain,omitempty"`
	Jobid           *StringValue `protobuf:"bytes,6,opt,name=jobid,proto3" json:"jobid,omitempty"`
	Grouping        *StringValue `protobuf:"bytes,10,opt,name=grouping,proto3" json:"grouping,omitempty"`
	Ttl             float64      `protobuf:"fixed64,7,opt,name=ttl,proto3" json:"ttl,omitempty"`
	Tag             *StringValue `protobuf:"bytes,8,opt,name=tag,proto3" json:"tag,omitempty"`
}

func (x *SuspendAddRequest) Reset() {
	*x = SuspendAddRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuspendAddRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuspendAddRequest) ProtoMessage() {}

func (x *SuspendAddRequest) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuspendAddRequest.ProtoReflect.Descriptor instead.
func (*SuspendAddRequest) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{46}
}

func (x *SuspendAddRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SuspendAddRequest) GetTransportid() *StringValue {
	if x != nil {
		return x.Transportid
	}
	return nil
}

func (x *SuspendAddRequest) GetLocalip() *StringValue {
	if x != nil {
		return x.Localip
	}
	return nil
}

func (x *SuspendAddRequest) GetRemoteip() *StringValue {
	if x != nil {
		return x.Remoteip
	}
	return nil
}

func (x *SuspendAddRequest) GetRemotemx() *StringValue {
	if x != nil {
		return x.Remotemx
	}
	return nil
}

func (x *SuspendAddRequest) GetRecipientdomain() *StringValue {
	if x != nil {
		return x.Recipientdomain
	}
	return nil
}

func (x *SuspendAddRequest) GetJobid() *StringValue {
	if x != nil {
		return x.Jobid
	}
	return nil
}

func (x *SuspendAddRequest) GetGrouping() *StringValue {
	if x != nil {
		return x.Grouping
	}
	return nil
}

func (x *SuspendAddRequest) GetTtl() float64 {
	if x != nil {
		return x.Ttl
	}
	return 0
}

func (x *SuspendAddRequest) GetTag() *StringValue {
	if x != nil {
		return x.Tag
	}
	return nil
}

type SuspendAddResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *SuspendAddResponse) Reset() {
	*x = SuspendAddResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuspendAddResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuspendAddResponse) ProtoMessage() {}

func (x *SuspendAddResponse) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuspendAddResponse.ProtoReflect.Descriptor instead.
func (*SuspendAddResponse) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{47}
}

func (x *SuspendAddResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type SuspendUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id  string       `protobuf:"bytes,9,opt,name=id,proto3" json:"id,omitempty"`
	Ttl float64      `protobuf:"fixed64,7,opt,name=ttl,proto3" json:"ttl,omitempty"`
	Tag *StringValue `protobuf:"bytes,8,opt,name=tag,proto3" json:"tag,omitempty"`
}

func (x *SuspendUpdateRequest) Reset() {
	*x = SuspendUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuspendUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuspendUpdateRequest) ProtoMessage() {}

func (x *SuspendUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuspendUpdateRequest.ProtoReflect.Descriptor instead.
func (*SuspendUpdateRequest) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{48}
}

func (x *SuspendUpdateRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SuspendUpdateRequest) GetTtl() float64 {
	if x != nil {
		return x.Ttl
	}
	return 0
}

func (x *SuspendUpdateRequest) GetTag() *StringValue {
	if x != nil {
		return x.Tag
	}
	return nil
}

type SuspendUpdateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Affected uint64 `protobuf:"varint,1,opt,name=affected,proto3" json:"affected,omitempty"`
}

func (x *SuspendUpdateResponse) Reset() {
	*x = SuspendUpdateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuspendUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuspendUpdateResponse) ProtoMessage() {}

func (x *SuspendUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuspendUpdateResponse.ProtoReflect.Descriptor instead.
func (*SuspendUpdateResponse) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{49}
}

func (x *SuspendUpdateResponse) GetAffected() uint64 {
	if x != nil {
		return x.Affected
	}
	return 0
}

type SuspendDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *SuspendDeleteRequest) Reset() {
	*x = SuspendDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuspendDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuspendDeleteRequest) ProtoMessage() {}

func (x *SuspendDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuspendDeleteRequest.ProtoReflect.Descriptor instead.
func (*SuspendDeleteRequest) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{50}
}

func (x *SuspendDeleteRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type SuspendDeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Affected uint64 `protobuf:"varint,1,opt,name=affected,proto3" json:"affected,omitempty"`
}

func (x *SuspendDeleteResponse) Reset() {
	*x = SuspendDeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuspendDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuspendDeleteResponse) ProtoMessage() {}

func (x *SuspendDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuspendDeleteResponse.ProtoReflect.Descriptor instead.
func (*SuspendDeleteResponse) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{51}
}

func (x *SuspendDeleteResponse) GetAffected() uint64 {
	if x != nil {
		return x.Affected
	}
	return 0
}

type PolicyConditionAddRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     string                            `protobuf:"bytes,5,opt,name=id,proto3" json:"id,omitempty"`
	Fields *PolicyConditionAddRequest_Fields `protobuf:"bytes,1,opt,name=fields,proto3" json:"fields,omitempty"`
	If     *PolicyConditionAddRequest_If     `protobuf:"bytes,2,opt,name=if,proto3" json:"if,omitempty"`
	Then   *PolicyConditionAddRequest_Then   `protobuf:"bytes,3,opt,name=then,proto3" json:"then,omitempty"`
	Ttl    float64                           `protobuf:"fixed64,4,opt,name=ttl,proto3" json:"ttl,omitempty"`
}

func (x *PolicyConditionAddRequest) Reset() {
	*x = PolicyConditionAddRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyConditionAddRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyConditionAddRequest) ProtoMessage() {}

func (x *PolicyConditionAddRequest) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyConditionAddRequest.ProtoReflect.Descriptor instead.
func (*PolicyConditionAddRequest) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{52}
}

func (x *PolicyConditionAddRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PolicyConditionAddRequest) GetFields() *PolicyConditionAddRequest_Fields {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *PolicyConditionAddRequest) GetIf() *PolicyConditionAddRequest_If {
	if x != nil {
		return x.If
	}
	return nil
}

func (x *PolicyConditionAddRequest) GetThen() *PolicyConditionAddRequest_Then {
	if x != nil {
		return x.Then
	}
	return nil
}

func (x *PolicyConditionAddRequest) GetTtl() float64 {
	if x != nil {
		return x.Ttl
	}
	return 0
}

type PolicyConditionAddResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *PolicyConditionAddResponse) Reset() {
	*x = PolicyConditionAddResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyConditionAddResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyConditionAddResponse) ProtoMessage() {}

func (x *PolicyConditionAddResponse) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyConditionAddResponse.ProtoReflect.Descriptor instead.
func (*PolicyConditionAddResponse) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{53}
}

func (x *PolicyConditionAddResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type PolicyConditionUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string                             `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Then *PolicyConditionUpdateRequest_Then `protobuf:"bytes,2,opt,name=then,proto3" json:"then,omitempty"`
	Ttl  float64                            `protobuf:"fixed64,3,opt,name=ttl,proto3" json:"ttl,omitempty"`
}

func (x *PolicyConditionUpdateRequest) Reset() {
	*x = PolicyConditionUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyConditionUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyConditionUpdateRequest) ProtoMessage() {}

func (x *PolicyConditionUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyConditionUpdateRequest.ProtoReflect.Descriptor instead.
func (*PolicyConditionUpdateRequest) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{54}
}

func (x *PolicyConditionUpdateRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PolicyConditionUpdateRequest) GetThen() *PolicyConditionUpdateRequest_Then {
	if x != nil {
		return x.Then
	}
	return nil
}

func (x *PolicyConditionUpdateRequest) GetTtl() float64 {
	if x != nil {
		return x.Ttl
	}
	return 0
}

type PolicyConditionUpdateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Affected uint64 `protobuf:"varint,1,opt,name=affected,proto3" json:"affected,omitempty"`
}

func (x *PolicyConditionUpdateResponse) Reset() {
	*x = PolicyConditionUpdateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyConditionUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyConditionUpdateResponse) ProtoMessage() {}

func (x *PolicyConditionUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyConditionUpdateResponse.ProtoReflect.Descriptor instead.
func (*PolicyConditionUpdateResponse) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{55}
}

func (x *PolicyConditionUpdateResponse) GetAffected() uint64 {
	if x != nil {
		return x.Affected
	}
	return 0
}

type PolicyConditionDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *PolicyConditionDeleteRequest) Reset() {
	*x = PolicyConditionDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyConditionDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyConditionDeleteRequest) ProtoMessage() {}

func (x *PolicyConditionDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyConditionDeleteRequest.ProtoReflect.Descriptor instead.
func (*PolicyConditionDeleteRequest) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{56}
}

func (x *PolicyConditionDeleteRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type PolicyConditionDeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Affected uint64 `protobuf:"varint,1,opt,name=affected,proto3" json:"affected,omitempty"`
}

func (x *PolicyConditionDeleteResponse) Reset() {
	*x = PolicyConditionDeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyConditionDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyConditionDeleteResponse) ProtoMessage() {}

func (x *PolicyConditionDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyConditionDeleteResponse.ProtoReflect.Descriptor instead.
func (*PolicyConditionDeleteResponse) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{57}
}

func (x *PolicyConditionDeleteResponse) GetAffected() uint64 {
	if x != nil {
		return x.Affected
	}
	return 0
}

type PolicyConditionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*PolicyConditionResponse_Item `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *PolicyConditionResponse) Reset() {
	*x = PolicyConditionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyConditionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyConditionResponse) ProtoMessage() {}

func (x *PolicyConditionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyConditionResponse.ProtoReflect.Descriptor instead.
func (*PolicyConditionResponse) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{58}
}

func (x *PolicyConditionResponse) GetItems() []*PolicyConditionResponse_Item {
	if x != nil {
		return x.Items
	}
	return nil
}

type PolicyRateRefillRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transportid     *StringValue `protobuf:"bytes,1,opt,name=transportid,proto3" json:"transportid,omitempty"`
	Localip         *StringValue `protobuf:"bytes,2,opt,name=localip,proto3" json:"localip,omitempty"`
	Remoteip        *StringValue `protobuf:"bytes,3,opt,name=remoteip,proto3" json:"remoteip,omitempty"`
	Remotemx        *StringValue `protobuf:"bytes,4,opt,name=remotemx,proto3" json:"remotemx,omitempty"`
	Recipientdomain *StringValue `protobuf:"bytes,5,opt,name=recipientdomain,proto3" json:"recipientdomain,omitempty"`
	Jobid           *StringValue `protobuf:"bytes,6,opt,name=jobid,proto3" json:"jobid,omitempty"`
	Grouping        *StringValue `protobuf:"bytes,8,opt,name=grouping,proto3" json:"grouping,omitempty"`
	Tokens          float64      `protobuf:"fixed64,7,opt,name=tokens,proto3" json:"tokens,omitempty"`
}

func (x *PolicyRateRefillRequest) Reset() {
	*x = PolicyRateRefillRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyRateRefillRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyRateRefillRequest) ProtoMessage() {}

func (x *PolicyRateRefillRequest) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyRateRefillRequest.ProtoReflect.Descriptor instead.
func (*PolicyRateRefillRequest) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{59}
}

func (x *PolicyRateRefillRequest) GetTransportid() *StringValue {
	if x != nil {
		return x.Transportid
	}
	return nil
}

func (x *PolicyRateRefillRequest) GetLocalip() *StringValue {
	if x != nil {
		return x.Localip
	}
	return nil
}

func (x *PolicyRateRefillRequest) GetRemoteip() *StringValue {
	if x != nil {
		return x.Remoteip
	}
	return nil
}

func (x *PolicyRateRefillRequest) GetRemotemx() *StringValue {
	if x != nil {
		return x.Remotemx
	}
	return nil
}

func (x *PolicyRateRefillRequest) GetRecipientdomain() *StringValue {
	if x != nil {
		return x.Recipientdomain
	}
	return nil
}

func (x *PolicyRateRefillRequest) GetJobid() *StringValue {
	if x != nil {
		return x.Jobid
	}
	return nil
}

func (x *PolicyRateRefillRequest) GetGrouping() *StringValue {
	if x != nil {
		return x.Grouping
	}
	return nil
}

func (x *PolicyRateRefillRequest) GetTokens() float64 {
	if x != nil {
		return x.Tokens
	}
	return 0
}

type PolicyRateRefillResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Affected uint64 `protobuf:"varint,1,opt,name=affected,proto3" json:"affected,omitempty"`
}

func (x *PolicyRateRefillResponse) Reset() {
	*x = PolicyRateRefillResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyRateRefillResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyRateRefillResponse) ProtoMessage() {}

func (x *PolicyRateRefillResponse) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyRateRefillResponse.ProtoReflect.Descriptor instead.
func (*PolicyRateRefillResponse) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{60}
}

func (x *PolicyRateRefillResponse) GetAffected() uint64 {
	if x != nil {
		return x.Affected
	}
	return 0
}

type PluginCommandRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Arguments [][]byte `protobuf:"bytes,2,rep,name=arguments,proto3" json:"arguments,omitempty"`
}

func (x *PluginCommandRequest) Reset() {
	*x = PluginCommandRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PluginCommandRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PluginCommandRequest) ProtoMessage() {}

func (x *PluginCommandRequest) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PluginCommandRequest.ProtoReflect.Descriptor instead.
func (*PluginCommandRequest) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{61}
}

func (x *PluginCommandRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PluginCommandRequest) GetArguments() [][]byte {
	if x != nil {
		return x.Arguments
	}
	return nil
}

type PluginCommandResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response []byte `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *PluginCommandResponse) Reset() {
	*x = PluginCommandResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PluginCommandResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PluginCommandResponse) ProtoMessage() {}

func (x *PluginCommandResponse) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PluginCommandResponse.ProtoReflect.Descriptor instead.
func (*PluginCommandResponse) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{62}
}

func (x *PluginCommandResponse) GetResponse() []byte {
	if x != nil {
		return x.Response
	}
	return nil
}

type ServerConnectionsListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Condition *ServerConnectionsListRequest_Condition `protobuf:"bytes,1,opt,name=condition,proto3" json:"condition,omitempty"`
	Paging    *ServerConnectionsListRequest_Paging    `protobuf:"bytes,2,opt,name=paging,proto3" json:"paging,omitempty"`
}

func (x *ServerConnectionsListRequest) Reset() {
	*x = ServerConnectionsListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerConnectionsListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerConnectionsListRequest) ProtoMessage() {}

func (x *ServerConnectionsListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerConnectionsListRequest.ProtoReflect.Descriptor instead.
func (*ServerConnectionsListRequest) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{63}
}

func (x *ServerConnectionsListRequest) GetCondition() *ServerConnectionsListRequest_Condition {
	if x != nil {
		return x.Condition
	}
	return nil
}

func (x *ServerConnectionsListRequest) GetPaging() *ServerConnectionsListRequest_Paging {
	if x != nil {
		return x.Paging
	}
	return nil
}

type ServerConnectionsListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Connections []*ServerConnectionsListResponse_Connection `protobuf:"bytes,1,rep,name=connections,proto3" json:"connections,omitempty"`
}

func (x *ServerConnectionsListResponse) Reset() {
	*x = ServerConnectionsListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerConnectionsListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerConnectionsListResponse) ProtoMessage() {}

func (x *ServerConnectionsListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerConnectionsListResponse.ProtoReflect.Descriptor instead.
func (*ServerConnectionsListResponse) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{64}
}

func (x *ServerConnectionsListResponse) GetConnections() []*ServerConnectionsListResponse_Connection {
	if x != nil {
		return x.Connections
	}
	return nil
}

type ServerConnectionsCloseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reply        *ServerConnectionsCloseRequest_Reply `protobuf:"bytes,1,opt,name=reply,proto3" json:"reply,omitempty"`
	Connectionid string                               `protobuf:"bytes,2,opt,name=connectionid,proto3" json:"connectionid,omitempty"`
	Remoteip     string                               `protobuf:"bytes,3,opt,name=remoteip,proto3" json:"remoteip,omitempty"`
	Serverid     string                               `protobuf:"bytes,4,opt,name=serverid,proto3" json:"serverid,omitempty"`
	Localip      string                               `protobuf:"bytes,5,opt,name=localip,proto3" json:"localip,omitempty"`
}

func (x *ServerConnectionsCloseRequest) Reset() {
	*x = ServerConnectionsCloseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerConnectionsCloseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerConnectionsCloseRequest) ProtoMessage() {}

func (x *ServerConnectionsCloseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerConnectionsCloseRequest.ProtoReflect.Descriptor instead.
func (*ServerConnectionsCloseRequest) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{65}
}

func (x *ServerConnectionsCloseRequest) GetReply() *ServerConnectionsCloseRequest_Reply {
	if x != nil {
		return x.Reply
	}
	return nil
}

func (x *ServerConnectionsCloseRequest) GetConnectionid() string {
	if x != nil {
		return x.Connectionid
	}
	return ""
}

func (x *ServerConnectionsCloseRequest) GetRemoteip() string {
	if x != nil {
		return x.Remoteip
	}
	return ""
}

func (x *ServerConnectionsCloseRequest) GetServerid() string {
	if x != nil {
		return x.Serverid
	}
	return ""
}

func (x *ServerConnectionsCloseRequest) GetLocalip() string {
	if x != nil {
		return x.Localip
	}
	return ""
}

type ServerConnectionsCloseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Affected uint64 `protobuf:"varint,1,opt,name=affected,proto3" json:"affected,omitempty"`
}

func (x *ServerConnectionsCloseResponse) Reset() {
	*x = ServerConnectionsCloseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerConnectionsCloseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerConnectionsCloseResponse) ProtoMessage() {}

func (x *ServerConnectionsCloseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerConnectionsCloseResponse.ProtoReflect.Descriptor instead.
func (*ServerConnectionsCloseResponse) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{66}
}

func (x *ServerConnectionsCloseResponse) GetAffected() uint64 {
	if x != nil {
		return x.Affected
	}
	return 0
}

type QueueConnectionsListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Condition *QueueConnectionsListRequest_Condition `protobuf:"bytes,1,opt,name=condition,proto3" json:"condition,omitempty"`
	Paging    *QueueConnectionsListRequest_Paging    `protobuf:"bytes,2,opt,name=paging,proto3" json:"paging,omitempty"`
}

func (x *QueueConnectionsListRequest) Reset() {
	*x = QueueConnectionsListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueueConnectionsListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueConnectionsListRequest) ProtoMessage() {}

func (x *QueueConnectionsListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueConnectionsListRequest.ProtoReflect.Descriptor instead.
func (*QueueConnectionsListRequest) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{67}
}

func (x *QueueConnectionsListRequest) GetCondition() *QueueConnectionsListRequest_Condition {
	if x != nil {
		return x.Condition
	}
	return nil
}

func (x *QueueConnectionsListRequest) GetPaging() *QueueConnectionsListRequest_Paging {
	if x != nil {
		return x.Paging
	}
	return nil
}

type QueueConnectionsListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Connections []*QueueConnectionsListResponse_Connection `protobuf:"bytes,1,rep,name=connections,proto3" json:"connections,omitempty"`
}

func (x *QueueConnectionsListResponse) Reset() {
	*x = QueueConnectionsListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueueConnectionsListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueConnectionsListResponse) ProtoMessage() {}

func (x *QueueConnectionsListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueConnectionsListResponse.ProtoReflect.Descriptor instead.
func (*QueueConnectionsListResponse) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{68}
}

func (x *QueueConnectionsListResponse) GetConnections() []*QueueConnectionsListResponse_Connection {
	if x != nil {
		return x.Connections
	}
	return nil
}

type QueueConnectionsCloseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Connectionid string       `protobuf:"bytes,1,opt,name=connectionid,proto3" json:"connectionid,omitempty"`
	Localip      string       `protobuf:"bytes,2,opt,name=localip,proto3" json:"localip,omitempty"`
	Remoteip     string       `protobuf:"bytes,3,opt,name=remoteip,proto3" json:"remoteip,omitempty"`
	Remotemx     string       `protobuf:"bytes,6,opt,name=remotemx,proto3" json:"remotemx,omitempty"`
	Proxyip      string       `protobuf:"bytes,4,opt,name=proxyip,proto3" json:"proxyip,omitempty"`
	Id           *QueueItemID `protobuf:"bytes,5,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *QueueConnectionsCloseRequest) Reset() {
	*x = QueueConnectionsCloseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueueConnectionsCloseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueConnectionsCloseRequest) ProtoMessage() {}

func (x *QueueConnectionsCloseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueConnectionsCloseRequest.ProtoReflect.Descriptor instead.
func (*QueueConnectionsCloseRequest) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{69}
}

func (x *QueueConnectionsCloseRequest) GetConnectionid() string {
	if x != nil {
		return x.Connectionid
	}
	return ""
}

func (x *QueueConnectionsCloseRequest) GetLocalip() string {
	if x != nil {
		return x.Localip
	}
	return ""
}

func (x *QueueConnectionsCloseRequest) GetRemoteip() string {
	if x != nil {
		return x.Remoteip
	}
	return ""
}

func (x *QueueConnectionsCloseRequest) GetRemotemx() string {
	if x != nil {
		return x.Remotemx
	}
	return ""
}

func (x *QueueConnectionsCloseRequest) GetProxyip() string {
	if x != nil {
		return x.Proxyip
	}
	return ""
}

func (x *QueueConnectionsCloseRequest) GetId() *QueueItemID {
	if x != nil {
		return x.Id
	}
	return nil
}

type QueueConnectionsCloseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Affected uint64 `protobuf:"varint,1,opt,name=affected,proto3" json:"affected,omitempty"`
}

func (x *QueueConnectionsCloseResponse) Reset() {
	*x = QueueConnectionsCloseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueueConnectionsCloseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueConnectionsCloseResponse) ProtoMessage() {}

func (x *QueueConnectionsCloseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueConnectionsCloseResponse.ProtoReflect.Descriptor instead.
func (*QueueConnectionsCloseResponse) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{70}
}

func (x *QueueConnectionsCloseResponse) GetAffected() uint64 {
	if x != nil {
		return x.Affected
	}
	return 0
}

type PolicyMatchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transportid     string `protobuf:"bytes,1,opt,name=transportid,proto3" json:"transportid,omitempty"`
	Localip         string `protobuf:"bytes,2,opt,name=localip,proto3" json:"localip,omitempty"`
	Remoteip        string `protobuf:"bytes,3,opt,name=remoteip,proto3" json:"remoteip,omitempty"`
	Remotemx        string `protobuf:"bytes,4,opt,name=remotemx,proto3" json:"remotemx,omitempty"`
	Recipientdomain string `protobuf:"bytes,5,opt,name=recipientdomain,proto3" json:"recipientdomain,omitempty"`
	Jobid           string `protobuf:"bytes,6,opt,name=jobid,proto3" json:"jobid,omitempty"`
	Grouping        string `protobuf:"bytes,7,opt,name=grouping,proto3" json:"grouping,omitempty"`
}

func (x *PolicyMatchRequest) Reset() {
	*x = PolicyMatchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyMatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyMatchRequest) ProtoMessage() {}

func (x *PolicyMatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyMatchRequest.ProtoReflect.Descriptor instead.
func (*PolicyMatchRequest) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{71}
}

func (x *PolicyMatchRequest) GetTransportid() string {
	if x != nil {
		return x.Transportid
	}
	return ""
}

func (x *PolicyMatchRequest) GetLocalip() string {
	if x != nil {
		return x.Localip
	}
	return ""
}

func (x *PolicyMatchRequest) GetRemoteip() string {
	if x != nil {
		return x.Remoteip
	}
	return ""
}

func (x *PolicyMatchRequest) GetRemotemx() string {
	if x != nil {
		return x.Remotemx
	}
	return ""
}

func (x *PolicyMatchRequest) GetRecipientdomain() string {
	if x != nil {
		return x.Recipientdomain
	}
	return ""
}

func (x *PolicyMatchRequest) GetJobid() string {
	if x != nil {
		return x.Jobid
	}
	return ""
}

func (x *PolicyMatchRequest) GetGrouping() string {
	if x != nil {
		return x.Grouping
	}
	return ""
}

type PolicyMatchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Policies []*PolicyMatchResponse_PolicyMatch `protobuf:"bytes,1,rep,name=policies,proto3" json:"policies,omitempty"`
}

func (x *PolicyMatchResponse) Reset() {
	*x = PolicyMatchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyMatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyMatchResponse) ProtoMessage() {}

func (x *PolicyMatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyMatchResponse.ProtoReflect.Descriptor instead.
func (*PolicyMatchResponse) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{72}
}

func (x *PolicyMatchResponse) GetPolicies() []*PolicyMatchResponse_PolicyMatch {
	if x != nil {
		return x.Policies
	}
	return nil
}

type PolicyGroupingListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Paging *PolicyGroupingListRequest_Paging `protobuf:"bytes,1,opt,name=paging,proto3" json:"paging,omitempty"`
}

func (x *PolicyGroupingListRequest) Reset() {
	*x = PolicyGroupingListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyGroupingListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyGroupingListRequest) ProtoMessage() {}

func (x *PolicyGroupingListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyGroupingListRequest.ProtoReflect.Descriptor instead.
func (*PolicyGroupingListRequest) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{73}
}

func (x *PolicyGroupingListRequest) GetPaging() *PolicyGroupingListRequest_Paging {
	if x != nil {
		return x.Paging
	}
	return nil
}

type PolicyGroupingListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Groupings []*PolicyGroupingListResponse_Grouping `protobuf:"bytes,1,rep,name=groupings,proto3" json:"groupings,omitempty"`
}

func (x *PolicyGroupingListResponse) Reset() {
	*x = PolicyGroupingListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyGroupingListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyGroupingListResponse) ProtoMessage() {}

func (x *PolicyGroupingListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyGroupingListResponse.ProtoReflect.Descriptor instead.
func (*PolicyGroupingListResponse) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{74}
}

func (x *PolicyGroupingListResponse) GetGroupings() []*PolicyGroupingListResponse_Grouping {
	if x != nil {
		return x.Groupings
	}
	return nil
}

type PolicyGroupingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields *PolicyGroupingRequest_Fields `protobuf:"bytes,1,opt,name=fields,proto3" json:"fields,omitempty"`
	// Types that are assignable to Field:
	//
	//	*PolicyGroupingRequest_Transportid
	//	*PolicyGroupingRequest_Localip
	//	*PolicyGroupingRequest_Remoteip
	//	*PolicyGroupingRequest_Remotemx
	//	*PolicyGroupingRequest_Recipientdomain
	//	*PolicyGroupingRequest_Jobid
	//	*PolicyGroupingRequest_Grouping
	Field isPolicyGroupingRequest_Field `protobuf_oneof:"field"`
}

func (x *PolicyGroupingRequest) Reset() {
	*x = PolicyGroupingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyGroupingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyGroupingRequest) ProtoMessage() {}

func (x *PolicyGroupingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyGroupingRequest.ProtoReflect.Descriptor instead.
func (*PolicyGroupingRequest) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{75}
}

func (x *PolicyGroupingRequest) GetFields() *PolicyGroupingRequest_Fields {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (m *PolicyGroupingRequest) GetField() isPolicyGroupingRequest_Field {
	if m != nil {
		return m.Field
	}
	return nil
}

func (x *PolicyGroupingRequest) GetTransportid() string {
	if x, ok := x.GetField().(*PolicyGroupingRequest_Transportid); ok {
		return x.Transportid
	}
	return ""
}

func (x *PolicyGroupingRequest) GetLocalip() string {
	if x, ok := x.GetField().(*PolicyGroupingRequest_Localip); ok {
		return x.Localip
	}
	return ""
}

func (x *PolicyGroupingRequest) GetRemoteip() string {
	if x, ok := x.GetField().(*PolicyGroupingRequest_Remoteip); ok {
		return x.Remoteip
	}
	return ""
}

func (x *PolicyGroupingRequest) GetRemotemx() string {
	if x, ok := x.GetField().(*PolicyGroupingRequest_Remotemx); ok {
		return x.Remotemx
	}
	return ""
}

func (x *PolicyGroupingRequest) GetRecipientdomain() string {
	if x, ok := x.GetField().(*PolicyGroupingRequest_Recipientdomain); ok {
		return x.Recipientdomain
	}
	return ""
}

func (x *PolicyGroupingRequest) GetJobid() string {
	if x, ok := x.GetField().(*PolicyGroupingRequest_Jobid); ok {
		return x.Jobid
	}
	return ""
}

func (x *PolicyGroupingRequest) GetGrouping() string {
	if x, ok := x.GetField().(*PolicyGroupingRequest_Grouping); ok {
		return x.Grouping
	}
	return ""
}

type isPolicyGroupingRequest_Field interface {
	isPolicyGroupingRequest_Field()
}

type PolicyGroupingRequest_Transportid struct {
	Transportid string `protobuf:"bytes,2,opt,name=transportid,proto3,oneof"`
}

type PolicyGroupingRequest_Localip struct {
	Localip string `protobuf:"bytes,3,opt,name=localip,proto3,oneof"`
}

type PolicyGroupingRequest_Remoteip struct {
	Remoteip string `protobuf:"bytes,4,opt,name=remoteip,proto3,oneof"`
}

type PolicyGroupingRequest_Remotemx struct {
	Remotemx string `protobuf:"bytes,5,opt,name=remotemx,proto3,oneof"`
}

type PolicyGroupingRequest_Recipientdomain struct {
	Recipientdomain string `protobuf:"bytes,6,opt,name=recipientdomain,proto3,oneof"`
}

type PolicyGroupingRequest_Jobid struct {
	Jobid string `protobuf:"bytes,7,opt,name=jobid,proto3,oneof"`
}

type PolicyGroupingRequest_Grouping struct {
	Grouping string `protobuf:"bytes,8,opt,name=grouping,proto3,oneof"`
}

func (*PolicyGroupingRequest_Transportid) isPolicyGroupingRequest_Field() {}

func (*PolicyGroupingRequest_Localip) isPolicyGroupingRequest_Field() {}

func (*PolicyGroupingRequest_Remoteip) isPolicyGroupingRequest_Field() {}

func (*PolicyGroupingRequest_Remotemx) isPolicyGroupingRequest_Field() {}

func (*PolicyGroupingRequest_Recipientdomain) isPolicyGroupingRequest_Field() {}

func (*PolicyGroupingRequest_Jobid) isPolicyGroupingRequest_Field() {}

func (*PolicyGroupingRequest_Grouping) isPolicyGroupingRequest_Field() {}

type PolicyGroupingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []string `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *PolicyGroupingResponse) Reset() {
	*x = PolicyGroupingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyGroupingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyGroupingResponse) ProtoMessage() {}

func (x *PolicyGroupingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyGroupingResponse.ProtoReflect.Descriptor instead.
func (*PolicyGroupingResponse) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{76}
}

func (x *PolicyGroupingResponse) GetItems() []string {
	if x != nil {
		return x.Items
	}
	return nil
}

type ResolverCacheClearRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Domain *StringValue `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
}

func (x *ResolverCacheClearRequest) Reset() {
	*x = ResolverCacheClearRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResolverCacheClearRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolverCacheClearRequest) ProtoMessage() {}

func (x *ResolverCacheClearRequest) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolverCacheClearRequest.ProtoReflect.Descriptor instead.
func (*ResolverCacheClearRequest) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{77}
}

func (x *ResolverCacheClearRequest) GetDomain() *StringValue {
	if x != nil {
		return x.Domain
	}
	return nil
}

type ResolverCacheClearResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Affected uint64 `protobuf:"varint,1,opt,name=affected,proto3" json:"affected,omitempty"`
}

func (x *ResolverCacheClearResponse) Reset() {
	*x = ResolverCacheClearResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResolverCacheClearResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolverCacheClearResponse) ProtoMessage() {}

func (x *ResolverCacheClearResponse) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolverCacheClearResponse.ProtoReflect.Descriptor instead.
func (*ResolverCacheClearResponse) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{78}
}

func (x *ResolverCacheClearResponse) GetAffected() uint64 {
	if x != nil {
		return x.Affected
	}
	return 0
}

type TraceSMTPRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transportid     *StringValue `protobuf:"bytes,1,opt,name=transportid,proto3" json:"transportid,omitempty"`
	Localip         *StringValue `protobuf:"bytes,2,opt,name=localip,proto3" json:"localip,omitempty"`
	Remoteip        *StringValue `protobuf:"bytes,3,opt,name=remoteip,proto3" json:"remoteip,omitempty"`
	Remotemx        *StringValue `protobuf:"bytes,4,opt,name=remotemx,proto3" json:"remotemx,omitempty"`
	Recipientdomain *StringValue `protobuf:"bytes,5,opt,name=recipientdomain,proto3" json:"recipientdomain,omitempty"`
	Jobid           *StringValue `protobuf:"bytes,6,opt,name=jobid,proto3" json:"jobid,omitempty"`
	Grouping        *StringValue `protobuf:"bytes,10,opt,name=grouping,proto3" json:"grouping,omitempty"`
	Connect         bool         `protobuf:"varint,7,opt,name=connect,proto3" json:"connect,omitempty"`
	Hexdump         bool         `protobuf:"varint,8,opt,name=hexdump,proto3" json:"hexdump,omitempty"`
	Nopipelining    bool         `protobuf:"varint,9,opt,name=nopipelining,proto3" json:"nopipelining,omitempty"`
}

func (x *TraceSMTPRequest) Reset() {
	*x = TraceSMTPRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TraceSMTPRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraceSMTPRequest) ProtoMessage() {}

func (x *TraceSMTPRequest) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraceSMTPRequest.ProtoReflect.Descriptor instead.
func (*TraceSMTPRequest) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{79}
}

func (x *TraceSMTPRequest) GetTransportid() *StringValue {
	if x != nil {
		return x.Transportid
	}
	return nil
}

func (x *TraceSMTPRequest) GetLocalip() *StringValue {
	if x != nil {
		return x.Localip
	}
	return nil
}

func (x *TraceSMTPRequest) GetRemoteip() *StringValue {
	if x != nil {
		return x.Remoteip
	}
	return nil
}

func (x *TraceSMTPRequest) GetRemotemx() *StringValue {
	if x != nil {
		return x.Remotemx
	}
	return nil
}

func (x *TraceSMTPRequest) GetRecipientdomain() *StringValue {
	if x != nil {
		return x.Recipientdomain
	}
	return nil
}

func (x *TraceSMTPRequest) GetJobid() *StringValue {
	if x != nil {
		return x.Jobid
	}
	return nil
}

func (x *TraceSMTPRequest) GetGrouping() *StringValue {
	if x != nil {
		return x.Grouping
	}
	return nil
}

func (x *TraceSMTPRequest) GetConnect() bool {
	if x != nil {
		return x.Connect
	}
	return false
}

func (x *TraceSMTPRequest) GetHexdump() bool {
	if x != nil {
		return x.Hexdump
	}
	return false
}

func (x *TraceSMTPRequest) GetNopipelining() bool {
	if x != nil {
		return x.Nopipelining
	}
	return false
}

type Condition_QueueItemID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transaction string `protobuf:"bytes,1,opt,name=transaction,proto3" json:"transaction,omitempty"`
	Queue       uint64 `protobuf:"varint,2,opt,name=queue,proto3" json:"queue,omitempty"`
	Exclude     bool   `protobuf:"varint,3,opt,name=exclude,proto3" json:"exclude,omitempty"`
}

func (x *Condition_QueueItemID) Reset() {
	*x = Condition_QueueItemID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Condition_QueueItemID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Condition_QueueItemID) ProtoMessage() {}

func (x *Condition_QueueItemID) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Condition_QueueItemID.ProtoReflect.Descriptor instead.
func (*Condition_QueueItemID) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{12, 0}
}

func (x *Condition_QueueItemID) GetTransaction() string {
	if x != nil {
		return x.Transaction
	}
	return ""
}

func (x *Condition_QueueItemID) GetQueue() uint64 {
	if x != nil {
		return x.Queue
	}
	return 0
}

func (x *Condition_QueueItemID) GetExclude() bool {
	if x != nil {
		return x.Exclude
	}
	return false
}

type Condition_AnyMatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	String_ []*StringMatch   `protobuf:"bytes,1,rep,name=string,proto3" json:"string,omitempty"`
	Double  []*CompareDouble `protobuf:"bytes,2,rep,name=double,proto3" json:"double,omitempty"`
}

func (x *Condition_AnyMatch) Reset() {
	*x = Condition_AnyMatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Condition_AnyMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Condition_AnyMatch) ProtoMessage() {}

func (x *Condition_AnyMatch) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Condition_AnyMatch.ProtoReflect.Descriptor instead.
func (*Condition_AnyMatch) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{12, 1}
}

func (x *Condition_AnyMatch) GetString_() []*StringMatch {
	if x != nil {
		return x.String_
	}
	return nil
}

func (x *Condition_AnyMatch) GetDouble() []*CompareDouble {
	if x != nil {
		return x.Double
	}
	return nil
}

type Condition_MailAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Localpart *StringMatch      `protobuf:"bytes,1,opt,name=localpart,proto3" json:"localpart,omitempty"`
	Domain    *StringRegexValue `protobuf:"bytes,2,opt,name=domain,proto3" json:"domain,omitempty"`
	Exclude   bool              `protobuf:"varint,3,opt,name=exclude,proto3" json:"exclude,omitempty"`
}

func (x *Condition_MailAddress) Reset() {
	*x = Condition_MailAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Condition_MailAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Condition_MailAddress) ProtoMessage() {}

func (x *Condition_MailAddress) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Condition_MailAddress.ProtoReflect.Descriptor instead.
func (*Condition_MailAddress) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{12, 2}
}

func (x *Condition_MailAddress) GetLocalpart() *StringMatch {
	if x != nil {
		return x.Localpart
	}
	return nil
}

func (x *Condition_MailAddress) GetDomain() *StringRegexValue {
	if x != nil {
		return x.Domain
	}
	return nil
}

func (x *Condition_MailAddress) GetExclude() bool {
	if x != nil {
		return x.Exclude
	}
	return false
}

type Condition_MapStringValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value   map[string]*Condition_AnyMatch `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Exclude bool                           `protobuf:"varint,2,opt,name=exclude,proto3" json:"exclude,omitempty"`
}

func (x *Condition_MapStringValue) Reset() {
	*x = Condition_MapStringValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Condition_MapStringValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Condition_MapStringValue) ProtoMessage() {}

func (x *Condition_MapStringValue) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Condition_MapStringValue.ProtoReflect.Descriptor instead.
func (*Condition_MapStringValue) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{12, 3}
}

func (x *Condition_MapStringValue) GetValue() map[string]*Condition_AnyMatch {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Condition_MapStringValue) GetExclude() bool {
	if x != nil {
		return x.Exclude
	}
	return false
}

type Condition_QueueState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Queue Queue `protobuf:"varint,1,opt,name=queue,proto3,enum=smtpd.Queue" json:"queue,omitempty"`
}

func (x *Condition_QueueState) Reset() {
	*x = Condition_QueueState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Condition_QueueState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Condition_QueueState) ProtoMessage() {}

func (x *Condition_QueueState) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Condition_QueueState.ProtoReflect.Descriptor instead.
func (*Condition_QueueState) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{12, 4}
}

func (x *Condition_QueueState) GetQueue() Queue {
	if x != nil {
		return x.Queue
	}
	return Queue_ACTIVE
}

type Condition_FreezeState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Freeze Freeze `protobuf:"varint,1,opt,name=freeze,proto3,enum=smtpd.Freeze" json:"freeze,omitempty"`
}

func (x *Condition_FreezeState) Reset() {
	*x = Condition_FreezeState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Condition_FreezeState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Condition_FreezeState) ProtoMessage() {}

func (x *Condition_FreezeState) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Condition_FreezeState.ProtoReflect.Descriptor instead.
func (*Condition_FreezeState) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{12, 5}
}

func (x *Condition_FreezeState) GetFreeze() Freeze {
	if x != nil {
		return x.Freeze
	}
	return Freeze_HOLD
}

type Condition_WorkingState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Working        Working    `protobuf:"varint,1,opt,name=working,proto3,enum=smtpd.Working" json:"working,omitempty"`
	Updatefreezing *BoolValue `protobuf:"bytes,2,opt,name=updatefreezing,proto3" json:"updatefreezing,omitempty"`
}

func (x *Condition_WorkingState) Reset() {
	*x = Condition_WorkingState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Condition_WorkingState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Condition_WorkingState) ProtoMessage() {}

func (x *Condition_WorkingState) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Condition_WorkingState.ProtoReflect.Descriptor instead.
func (*Condition_WorkingState) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{12, 6}
}

func (x *Condition_WorkingState) GetWorking() Working {
	if x != nil {
		return x.Working
	}
	return Working_UNKNOWN
}

func (x *Condition_WorkingState) GetUpdatefreezing() *BoolValue {
	if x != nil {
		return x.Updatefreezing
	}
	return nil
}

type Condition_CompareStringValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value   string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Exclude bool   `protobuf:"varint,1,opt,name=exclude,proto3" json:"exclude,omitempty"`
}

func (x *Condition_CompareStringValue) Reset() {
	*x = Condition_CompareStringValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Condition_CompareStringValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Condition_CompareStringValue) ProtoMessage() {}

func (x *Condition_CompareStringValue) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Condition_CompareStringValue.ProtoReflect.Descriptor instead.
func (*Condition_CompareStringValue) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{12, 7}
}

func (x *Condition_CompareStringValue) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *Condition_CompareStringValue) GetExclude() bool {
	if x != nil {
		return x.Exclude
	}
	return false
}

type Condition_CompareStringRegexValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value   string                                      `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Exclude bool                                        `protobuf:"varint,1,opt,name=exclude,proto3" json:"exclude,omitempty"`
	Type    Condition_CompareStringRegexValue_MatchType `protobuf:"varint,3,opt,name=type,proto3,enum=smtpd.Condition_CompareStringRegexValue_MatchType" json:"type,omitempty"`
}

func (x *Condition_CompareStringRegexValue) Reset() {
	*x = Condition_CompareStringRegexValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Condition_CompareStringRegexValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Condition_CompareStringRegexValue) ProtoMessage() {}

func (x *Condition_CompareStringRegexValue) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Condition_CompareStringRegexValue.ProtoReflect.Descriptor instead.
func (*Condition_CompareStringRegexValue) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{12, 8}
}

func (x *Condition_CompareStringRegexValue) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *Condition_CompareStringRegexValue) GetExclude() bool {
	if x != nil {
		return x.Exclude
	}
	return false
}

func (x *Condition_CompareStringRegexValue) GetType() Condition_CompareStringRegexValue_MatchType {
	if x != nil {
		return x.Type
	}
	return Condition_CompareStringRegexValue_EXACT
}

type Condition_Fields struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transportid     bool `protobuf:"varint,1,opt,name=transportid,proto3" json:"transportid,omitempty"`
	Localip         bool `protobuf:"varint,2,opt,name=localip,proto3" json:"localip,omitempty"`
	Remoteip        bool `protobuf:"varint,3,opt,name=remoteip,proto3" json:"remoteip,omitempty"`
	Remotemx        bool `protobuf:"varint,4,opt,name=remotemx,proto3" json:"remotemx,omitempty"`
	Recipientdomain bool `protobuf:"varint,5,opt,name=recipientdomain,proto3" json:"recipientdomain,omitempty"`
	Jobid           bool `protobuf:"varint,6,opt,name=jobid,proto3" json:"jobid,omitempty"`
	Grouping        bool `protobuf:"varint,7,opt,name=grouping,proto3" json:"grouping,omitempty"`
}

func (x *Condition_Fields) Reset() {
	*x = Condition_Fields{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Condition_Fields) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Condition_Fields) ProtoMessage() {}

func (x *Condition_Fields) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Condition_Fields.ProtoReflect.Descriptor instead.
func (*Condition_Fields) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{12, 9}
}

func (x *Condition_Fields) GetTransportid() bool {
	if x != nil {
		return x.Transportid
	}
	return false
}

func (x *Condition_Fields) GetLocalip() bool {
	if x != nil {
		return x.Localip
	}
	return false
}

func (x *Condition_Fields) GetRemoteip() bool {
	if x != nil {
		return x.Remoteip
	}
	return false
}

func (x *Condition_Fields) GetRemotemx() bool {
	if x != nil {
		return x.Remotemx
	}
	return false
}

func (x *Condition_Fields) GetRecipientdomain() bool {
	if x != nil {
		return x.Recipientdomain
	}
	return false
}

func (x *Condition_Fields) GetJobid() bool {
	if x != nil {
		return x.Jobid
	}
	return false
}

func (x *Condition_Fields) GetGrouping() bool {
	if x != nil {
		return x.Grouping
	}
	return false
}

type QueueUpdateRequest_MailAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Localpart *StringValue `protobuf:"bytes,1,opt,name=localpart,proto3" json:"localpart,omitempty"`
	Domain    *StringValue `protobuf:"bytes,2,opt,name=domain,proto3" json:"domain,omitempty"`
}

func (x *QueueUpdateRequest_MailAddress) Reset() {
	*x = QueueUpdateRequest_MailAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueueUpdateRequest_MailAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueUpdateRequest_MailAddress) ProtoMessage() {}

func (x *QueueUpdateRequest_MailAddress) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueUpdateRequest_MailAddress.ProtoReflect.Descriptor instead.
func (*QueueUpdateRequest_MailAddress) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{13, 0}
}

func (x *QueueUpdateRequest_MailAddress) GetLocalpart() *StringValue {
	if x != nil {
		return x.Localpart
	}
	return nil
}

func (x *QueueUpdateRequest_MailAddress) GetDomain() *StringValue {
	if x != nil {
		return x.Domain
	}
	return nil
}

type QueueUpdateRequest_Move struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Destination:
	//
	//	*QueueUpdateRequest_Move_Queue
	//	*QueueUpdateRequest_Move_Freeze
	Destination   isQueueUpdateRequest_Move_Destination `protobuf_oneof:"Destination"`
	Retryts       *TimeValue                            `protobuf:"bytes,3,opt,name=retryts,proto3" json:"retryts,omitempty"`
	Retrytsjitter *UInt64Value                          `protobuf:"bytes,4,opt,name=retrytsjitter,proto3" json:"retrytsjitter,omitempty"`
}

func (x *QueueUpdateRequest_Move) Reset() {
	*x = QueueUpdateRequest_Move{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueueUpdateRequest_Move) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueUpdateRequest_Move) ProtoMessage() {}

func (x *QueueUpdateRequest_Move) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueUpdateRequest_Move.ProtoReflect.Descriptor instead.
func (*QueueUpdateRequest_Move) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{13, 1}
}

func (m *QueueUpdateRequest_Move) GetDestination() isQueueUpdateRequest_Move_Destination {
	if m != nil {
		return m.Destination
	}
	return nil
}

func (x *QueueUpdateRequest_Move) GetQueue() Queue {
	if x, ok := x.GetDestination().(*QueueUpdateRequest_Move_Queue); ok {
		return x.Queue
	}
	return Queue_ACTIVE
}

func (x *QueueUpdateRequest_Move) GetFreeze() Freeze {
	if x, ok := x.GetDestination().(*QueueUpdateRequest_Move_Freeze); ok {
		return x.Freeze
	}
	return Freeze_HOLD
}

func (x *QueueUpdateRequest_Move) GetRetryts() *TimeValue {
	if x != nil {
		return x.Retryts
	}
	return nil
}

func (x *QueueUpdateRequest_Move) GetRetrytsjitter() *UInt64Value {
	if x != nil {
		return x.Retrytsjitter
	}
	return nil
}

type isQueueUpdateRequest_Move_Destination interface {
	isQueueUpdateRequest_Move_Destination()
}

type QueueUpdateRequest_Move_Queue struct {
	Queue Queue `protobuf:"varint,1,opt,name=queue,proto3,enum=smtpd.Queue,oneof"`
}

type QueueUpdateRequest_Move_Freeze struct {
	Freeze Freeze `protobuf:"varint,2,opt,name=freeze,proto3,enum=smtpd.Freeze,oneof"`
}

func (*QueueUpdateRequest_Move_Queue) isQueueUpdateRequest_Move_Destination() {}

func (*QueueUpdateRequest_Move_Freeze) isQueueUpdateRequest_Move_Destination() {}

type QueueUpdateRequest_Action struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type ActionType                     `protobuf:"varint,1,opt,name=type,proto3,enum=smtpd.ActionType" json:"type,omitempty"`
	Dsn  *QueueUpdateRequest_Action_DSN `protobuf:"bytes,2,opt,name=dsn,proto3" json:"dsn,omitempty"`
}

func (x *QueueUpdateRequest_Action) Reset() {
	*x = QueueUpdateRequest_Action{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueueUpdateRequest_Action) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueUpdateRequest_Action) ProtoMessage() {}

func (x *QueueUpdateRequest_Action) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueUpdateRequest_Action.ProtoReflect.Descriptor instead.
func (*QueueUpdateRequest_Action) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{13, 2}
}

func (x *QueueUpdateRequest_Action) GetType() ActionType {
	if x != nil {
		return x.Type
	}
	return ActionType_DELETE
}

func (x *QueueUpdateRequest_Action) GetDsn() *QueueUpdateRequest_Action_DSN {
	if x != nil {
		return x.Dsn
	}
	return nil
}

type QueueUpdateRequest_Paging struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit uint64 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *QueueUpdateRequest_Paging) Reset() {
	*x = QueueUpdateRequest_Paging{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueueUpdateRequest_Paging) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueUpdateRequest_Paging) ProtoMessage() {}

func (x *QueueUpdateRequest_Paging) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueUpdateRequest_Paging.ProtoReflect.Descriptor instead.
func (*QueueUpdateRequest_Paging) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{13, 4}
}

func (x *QueueUpdateRequest_Paging) GetLimit() uint64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type QueueUpdateRequest_Action_DSNStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Class   uint64 `protobuf:"varint,1,opt,name=class,proto3" json:"class,omitempty"`
	Subject uint64 `protobuf:"varint,2,opt,name=subject,proto3" json:"subject,omitempty"`
	Detail  uint64 `protobuf:"varint,3,opt,name=detail,proto3" json:"detail,omitempty"`
}

func (x *QueueUpdateRequest_Action_DSNStatus) Reset() {
	*x = QueueUpdateRequest_Action_DSNStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueueUpdateRequest_Action_DSNStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueUpdateRequest_Action_DSNStatus) ProtoMessage() {}

func (x *QueueUpdateRequest_Action_DSNStatus) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueUpdateRequest_Action_DSNStatus.ProtoReflect.Descriptor instead.
func (*QueueUpdateRequest_Action_DSNStatus) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{13, 2, 0}
}

func (x *QueueUpdateRequest_Action_DSNStatus) GetClass() uint64 {
	if x != nil {
		return x.Class
	}
	return 0
}

func (x *QueueUpdateRequest_Action_DSNStatus) GetSubject() uint64 {
	if x != nil {
		return x.Subject
	}
	return 0
}

func (x *QueueUpdateRequest_Action_DSNStatus) GetDetail() uint64 {
	if x != nil {
		return x.Detail
	}
	return 0
}

type QueueUpdateRequest_Action_DSN struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status         *QueueUpdateRequest_Action_DSNStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Diagnosticcode string                               `protobuf:"bytes,2,opt,name=diagnosticcode,proto3" json:"diagnosticcode,omitempty"`
}

func (x *QueueUpdateRequest_Action_DSN) Reset() {
	*x = QueueUpdateRequest_Action_DSN{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueueUpdateRequest_Action_DSN) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueUpdateRequest_Action_DSN) ProtoMessage() {}

func (x *QueueUpdateRequest_Action_DSN) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueUpdateRequest_Action_DSN.ProtoReflect.Descriptor instead.
func (*QueueUpdateRequest_Action_DSN) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{13, 2, 1}
}

func (x *QueueUpdateRequest_Action_DSN) GetStatus() *QueueUpdateRequest_Action_DSNStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *QueueUpdateRequest_Action_DSN) GetDiagnosticcode() string {
	if x != nil {
		return x.Diagnosticcode
	}
	return ""
}

type QueueGroupByRequest_Paging struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Offset uint64 `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit  uint64 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *QueueGroupByRequest_Paging) Reset() {
	*x = QueueGroupByRequest_Paging{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueueGroupByRequest_Paging) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueGroupByRequest_Paging) ProtoMessage() {}

func (x *QueueGroupByRequest_Paging) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueGroupByRequest_Paging.ProtoReflect.Descriptor instead.
func (*QueueGroupByRequest_Paging) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{16, 0}
}

func (x *QueueGroupByRequest_Paging) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *QueueGroupByRequest_Paging) GetLimit() uint64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type QueueGroupByRequest_GroupBy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to GroupUnique:
	//
	//	*QueueGroupByRequest_GroupBy_Transportid
	//	*QueueGroupByRequest_GroupBy_Recipientdomain
	//	*QueueGroupByRequest_GroupBy_Senderdomain
	//	*QueueGroupByRequest_GroupBy_Jobid
	//	*QueueGroupByRequest_GroupBy_Grouping
	//	*QueueGroupByRequest_GroupBy_Metadata
	//	*QueueGroupByRequest_GroupBy_Senderip
	//	*QueueGroupByRequest_GroupBy_Remoteip
	//	*QueueGroupByRequest_GroupBy_Remotemx
	//	*QueueGroupByRequest_GroupBy_Localip
	GroupUnique isQueueGroupByRequest_GroupBy_GroupUnique `protobuf_oneof:"GroupUnique"`
}

func (x *QueueGroupByRequest_GroupBy) Reset() {
	*x = QueueGroupByRequest_GroupBy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueueGroupByRequest_GroupBy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueGroupByRequest_GroupBy) ProtoMessage() {}

func (x *QueueGroupByRequest_GroupBy) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueGroupByRequest_GroupBy.ProtoReflect.Descriptor instead.
func (*QueueGroupByRequest_GroupBy) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{16, 1}
}

func (m *QueueGroupByRequest_GroupBy) GetGroupUnique() isQueueGroupByRequest_GroupBy_GroupUnique {
	if m != nil {
		return m.GroupUnique
	}
	return nil
}

func (x *QueueGroupByRequest_GroupBy) GetTransportid() bool {
	if x, ok := x.GetGroupUnique().(*QueueGroupByRequest_GroupBy_Transportid); ok {
		return x.Transportid
	}
	return false
}

func (x *QueueGroupByRequest_GroupBy) GetRecipientdomain() bool {
	if x, ok := x.GetGroupUnique().(*QueueGroupByRequest_GroupBy_Recipientdomain); ok {
		return x.Recipientdomain
	}
	return false
}

func (x *QueueGroupByRequest_GroupBy) GetSenderdomain() bool {
	if x, ok := x.GetGroupUnique().(*QueueGroupByRequest_GroupBy_Senderdomain); ok {
		return x.Senderdomain
	}
	return false
}

func (x *QueueGroupByRequest_GroupBy) GetJobid() bool {
	if x, ok := x.GetGroupUnique().(*QueueGroupByRequest_GroupBy_Jobid); ok {
		return x.Jobid
	}
	return false
}

func (x *QueueGroupByRequest_GroupBy) GetGrouping() bool {
	if x, ok := x.GetGroupUnique().(*QueueGroupByRequest_GroupBy_Grouping); ok {
		return x.Grouping
	}
	return false
}

func (x *QueueGroupByRequest_GroupBy) GetMetadata() string {
	if x, ok := x.GetGroupUnique().(*QueueGroupByRequest_GroupBy_Metadata); ok {
		return x.Metadata
	}
	return ""
}

func (x *QueueGroupByRequest_GroupBy) GetSenderip() bool {
	if x, ok := x.GetGroupUnique().(*QueueGroupByRequest_GroupBy_Senderip); ok {
		return x.Senderip
	}
	return false
}

func (x *QueueGroupByRequest_GroupBy) GetRemoteip() bool {
	if x, ok := x.GetGroupUnique().(*QueueGroupByRequest_GroupBy_Remoteip); ok {
		return x.Remoteip
	}
	return false
}

func (x *QueueGroupByRequest_GroupBy) GetRemotemx() bool {
	if x, ok := x.GetGroupUnique().(*QueueGroupByRequest_GroupBy_Remotemx); ok {
		return x.Remotemx
	}
	return false
}

func (x *QueueGroupByRequest_GroupBy) GetLocalip() bool {
	if x, ok := x.GetGroupUnique().(*QueueGroupByRequest_GroupBy_Localip); ok {
		return x.Localip
	}
	return false
}

type isQueueGroupByRequest_GroupBy_GroupUnique interface {
	isQueueGroupByRequest_GroupBy_GroupUnique()
}

type QueueGroupByRequest_GroupBy_Transportid struct {
	Transportid bool `protobuf:"varint,1,opt,name=transportid,proto3,oneof"`
}

type QueueGroupByRequest_GroupBy_Recipientdomain struct {
	Recipientdomain bool `protobuf:"varint,2,opt,name=recipientdomain,proto3,oneof"`
}

type QueueGroupByRequest_GroupBy_Senderdomain struct {
	Senderdomain bool `protobuf:"varint,3,opt,name=senderdomain,proto3,oneof"`
}

type QueueGroupByRequest_GroupBy_Jobid struct {
	Jobid bool `protobuf:"varint,4,opt,name=jobid,proto3,oneof"`
}

type QueueGroupByRequest_GroupBy_Grouping struct {
	Grouping bool `protobuf:"varint,10,opt,name=grouping,proto3,oneof"`
}

type QueueGroupByRequest_GroupBy_Metadata struct {
	Metadata string `protobuf:"bytes,5,opt,name=metadata,proto3,oneof"`
}

type QueueGroupByRequest_GroupBy_Senderip struct {
	Senderip bool `protobuf:"varint,6,opt,name=senderip,proto3,oneof"`
}

type QueueGroupByRequest_GroupBy_Remoteip struct {
	Remoteip bool `protobuf:"varint,7,opt,name=remoteip,proto3,oneof"`
}

type QueueGroupByRequest_GroupBy_Remotemx struct {
	Remotemx bool `protobuf:"varint,8,opt,name=remotemx,proto3,oneof"`
}

type QueueGroupByRequest_GroupBy_Localip struct {
	Localip bool `protobuf:"varint,9,opt,name=localip,proto3,oneof"`
}

func (*QueueGroupByRequest_GroupBy_Transportid) isQueueGroupByRequest_GroupBy_GroupUnique() {}

func (*QueueGroupByRequest_GroupBy_Recipientdomain) isQueueGroupByRequest_GroupBy_GroupUnique() {}

func (*QueueGroupByRequest_GroupBy_Senderdomain) isQueueGroupByRequest_GroupBy_GroupUnique() {}

func (*QueueGroupByRequest_GroupBy_Jobid) isQueueGroupByRequest_GroupBy_GroupUnique() {}

func (*QueueGroupByRequest_GroupBy_Grouping) isQueueGroupByRequest_GroupBy_GroupUnique() {}

func (*QueueGroupByRequest_GroupBy_Metadata) isQueueGroupByRequest_GroupBy_GroupUnique() {}

func (*QueueGroupByRequest_GroupBy_Senderip) isQueueGroupByRequest_GroupBy_GroupUnique() {}

func (*QueueGroupByRequest_GroupBy_Remoteip) isQueueGroupByRequest_GroupBy_GroupUnique() {}

func (*QueueGroupByRequest_GroupBy_Remotemx) isQueueGroupByRequest_GroupBy_GroupUnique() {}

func (*QueueGroupByRequest_GroupBy_Localip) isQueueGroupByRequest_GroupBy_GroupUnique() {}

type QueueGroupByRequest_Sorting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to SortingType:
	//
	//	*QueueGroupByRequest_Sorting_Groupby
	//	*QueueGroupByRequest_Sorting_Total
	//	*QueueGroupByRequest_Sorting_Count
	SortingType isQueueGroupByRequest_Sorting_SortingType `protobuf_oneof:"SortingType"`
	Order       Order                                     `protobuf:"varint,4,opt,name=order,proto3,enum=smtpd.Order" json:"order,omitempty"`
}

func (x *QueueGroupByRequest_Sorting) Reset() {
	*x = QueueGroupByRequest_Sorting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueueGroupByRequest_Sorting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueGroupByRequest_Sorting) ProtoMessage() {}

func (x *QueueGroupByRequest_Sorting) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueGroupByRequest_Sorting.ProtoReflect.Descriptor instead.
func (*QueueGroupByRequest_Sorting) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{16, 2}
}

func (m *QueueGroupByRequest_Sorting) GetSortingType() isQueueGroupByRequest_Sorting_SortingType {
	if m != nil {
		return m.SortingType
	}
	return nil
}

func (x *QueueGroupByRequest_Sorting) GetGroupby() uint64 {
	if x, ok := x.GetSortingType().(*QueueGroupByRequest_Sorting_Groupby); ok {
		return x.Groupby
	}
	return 0
}

func (x *QueueGroupByRequest_Sorting) GetTotal() bool {
	if x, ok := x.GetSortingType().(*QueueGroupByRequest_Sorting_Total); ok {
		return x.Total
	}
	return false
}

func (x *QueueGroupByRequest_Sorting) GetCount() uint64 {
	if x, ok := x.GetSortingType().(*QueueGroupByRequest_Sorting_Count); ok {
		return x.Count
	}
	return 0
}

func (x *QueueGroupByRequest_Sorting) GetOrder() Order {
	if x != nil {
		return x.Order
	}
	return Order_ASC
}

type isQueueGroupByRequest_Sorting_SortingType interface {
	isQueueGroupByRequest_Sorting_SortingType()
}

type QueueGroupByRequest_Sorting_Groupby struct {
	Groupby uint64 `protobuf:"varint,1,opt,name=groupby,proto3,oneof"`
}

type QueueGroupByRequest_Sorting_Total struct {
	Total bool `protobuf:"varint,2,opt,name=total,proto3,oneof"`
}

type QueueGroupByRequest_Sorting_Count struct {
	Count uint64 `protobuf:"varint,3,opt,name=count,proto3,oneof"`
}

func (*QueueGroupByRequest_Sorting_Groupby) isQueueGroupByRequest_Sorting_SortingType() {}

func (*QueueGroupByRequest_Sorting_Total) isQueueGroupByRequest_Sorting_SortingType() {}

func (*QueueGroupByRequest_Sorting_Count) isQueueGroupByRequest_Sorting_SortingType() {}

type QueueGroupByRequest_QueueState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Queue Queue `protobuf:"varint,1,opt,name=queue,proto3,enum=smtpd.Queue" json:"queue,omitempty"`
}

func (x *QueueGroupByRequest_QueueState) Reset() {
	*x = QueueGroupByRequest_QueueState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueueGroupByRequest_QueueState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueGroupByRequest_QueueState) ProtoMessage() {}

func (x *QueueGroupByRequest_QueueState) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueGroupByRequest_QueueState.ProtoReflect.Descriptor instead.
func (*QueueGroupByRequest_QueueState) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{16, 3}
}

func (x *QueueGroupByRequest_QueueState) GetQueue() Queue {
	if x != nil {
		return x.Queue
	}
	return Queue_ACTIVE
}

type QueueGroupByRequest_FreezeState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Freeze Freeze `protobuf:"varint,1,opt,name=freeze,proto3,enum=smtpd.Freeze" json:"freeze,omitempty"`
}

func (x *QueueGroupByRequest_FreezeState) Reset() {
	*x = QueueGroupByRequest_FreezeState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueueGroupByRequest_FreezeState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueGroupByRequest_FreezeState) ProtoMessage() {}

func (x *QueueGroupByRequest_FreezeState) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueGroupByRequest_FreezeState.ProtoReflect.Descriptor instead.
func (*QueueGroupByRequest_FreezeState) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{16, 4}
}

func (x *QueueGroupByRequest_FreezeState) GetFreeze() Freeze {
	if x != nil {
		return x.Freeze
	}
	return Freeze_HOLD
}

type QueueGroupByRequest_WorkingState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Working Working `protobuf:"varint,1,opt,name=working,proto3,enum=smtpd.Working" json:"working,omitempty"`
}

func (x *QueueGroupByRequest_WorkingState) Reset() {
	*x = QueueGroupByRequest_WorkingState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueueGroupByRequest_WorkingState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueGroupByRequest_WorkingState) ProtoMessage() {}

func (x *QueueGroupByRequest_WorkingState) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueGroupByRequest_WorkingState.ProtoReflect.Descriptor instead.
func (*QueueGroupByRequest_WorkingState) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{16, 5}
}

func (x *QueueGroupByRequest_WorkingState) GetWorking() Working {
	if x != nil {
		return x.Working
	}
	return Working_UNKNOWN
}

type QueueGroupByRequest_Counts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//
	//	*QueueGroupByRequest_Counts_Queue
	//	*QueueGroupByRequest_Counts_Freeze
	//	*QueueGroupByRequest_Counts_Working
	//	*QueueGroupByRequest_Counts_Ts
	//	*QueueGroupByRequest_Counts_Retryts
	//	*QueueGroupByRequest_Counts_Retrycount
	//	*QueueGroupByRequest_Counts_Priority
	Type   isQueueGroupByRequest_Counts_Type      `protobuf_oneof:"type"`
	Return *QueueGroupByRequest_Counts_ReturnType `protobuf:"bytes,7,opt,name=return,proto3" json:"return,omitempty"`
}

func (x *QueueGroupByRequest_Counts) Reset() {
	*x = QueueGroupByRequest_Counts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueueGroupByRequest_Counts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueGroupByRequest_Counts) ProtoMessage() {}

func (x *QueueGroupByRequest_Counts) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueGroupByRequest_Counts.ProtoReflect.Descriptor instead.
func (*QueueGroupByRequest_Counts) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{16, 6}
}

func (m *QueueGroupByRequest_Counts) GetType() isQueueGroupByRequest_Counts_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *QueueGroupByRequest_Counts) GetQueue() Queue {
	if x, ok := x.GetType().(*QueueGroupByRequest_Counts_Queue); ok {
		return x.Queue
	}
	return Queue_ACTIVE
}

func (x *QueueGroupByRequest_Counts) GetFreeze() Freeze {
	if x, ok := x.GetType().(*QueueGroupByRequest_Counts_Freeze); ok {
		return x.Freeze
	}
	return Freeze_HOLD
}

func (x *QueueGroupByRequest_Counts) GetWorking() Working {
	if x, ok := x.GetType().(*QueueGroupByRequest_Counts_Working); ok {
		return x.Working
	}
	return Working_UNKNOWN
}

func (x *QueueGroupByRequest_Counts) GetTs() *CompareTime {
	if x, ok := x.GetType().(*QueueGroupByRequest_Counts_Ts); ok {
		return x.Ts
	}
	return nil
}

func (x *QueueGroupByRequest_Counts) GetRetryts() *CompareTime {
	if x, ok := x.GetType().(*QueueGroupByRequest_Counts_Retryts); ok {
		return x.Retryts
	}
	return nil
}

func (x *QueueGroupByRequest_Counts) GetRetrycount() *CompareUInt64 {
	if x, ok := x.GetType().(*QueueGroupByRequest_Counts_Retrycount); ok {
		return x.Retrycount
	}
	return nil
}

func (x *QueueGroupByRequest_Counts) GetPriority() *CompareUInt64 {
	if x, ok := x.GetType().(*QueueGroupByRequest_Counts_Priority); ok {
		return x.Priority
	}
	return nil
}

func (x *QueueGroupByRequest_Counts) GetReturn() *QueueGroupByRequest_Counts_ReturnType {
	if x != nil {
		return x.Return
	}
	return nil
}

type isQueueGroupByRequest_Counts_Type interface {
	isQueueGroupByRequest_Counts_Type()
}

type QueueGroupByRequest_Counts_Queue struct {
	Queue Queue `protobuf:"varint,1,opt,name=queue,proto3,enum=smtpd.Queue,oneof"`
}

type QueueGroupByRequest_Counts_Freeze struct {
	Freeze Freeze `protobuf:"varint,2,opt,name=freeze,proto3,enum=smtpd.Freeze,oneof"`
}

type QueueGroupByRequest_Counts_Working struct {
	Working Working `protobuf:"varint,3,opt,name=working,proto3,enum=smtpd.Working,oneof"`
}

type QueueGroupByRequest_Counts_Ts struct {
	Ts *CompareTime `protobuf:"bytes,4,opt,name=ts,proto3,oneof"`
}

type QueueGroupByRequest_Counts_Retryts struct {
	Retryts *CompareTime `protobuf:"bytes,5,opt,name=retryts,proto3,oneof"`
}

type QueueGroupByRequest_Counts_Retrycount struct {
	Retrycount *CompareUInt64 `protobuf:"bytes,6,opt,name=retrycount,proto3,oneof"`
}

type QueueGroupByRequest_Counts_Priority struct {
	Priority *CompareUInt64 `protobuf:"bytes,8,opt,name=priority,proto3,oneof"`
}

func (*QueueGroupByRequest_Counts_Queue) isQueueGroupByRequest_Counts_Type() {}

func (*QueueGroupByRequest_Counts_Freeze) isQueueGroupByRequest_Counts_Type() {}

func (*QueueGroupByRequest_Counts_Working) isQueueGroupByRequest_Counts_Type() {}

func (*QueueGroupByRequest_Counts_Ts) isQueueGroupByRequest_Counts_Type() {}

func (*QueueGroupByRequest_Counts_Retryts) isQueueGroupByRequest_Counts_Type() {}

func (*QueueGroupByRequest_Counts_Retrycount) isQueueGroupByRequest_Counts_Type() {}

func (*QueueGroupByRequest_Counts_Priority) isQueueGroupByRequest_Counts_Type() {}

type QueueGroupByRequest_Fields struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transportid     bool `protobuf:"varint,1,opt,name=transportid,proto3" json:"transportid,omitempty"`
	Localip         bool `protobuf:"varint,2,opt,name=localip,proto3" json:"localip,omitempty"`
	Remoteip        bool `protobuf:"varint,3,opt,name=remoteip,proto3" json:"remoteip,omitempty"`
	Remotemx        bool `protobuf:"varint,4,opt,name=remotemx,proto3" json:"remotemx,omitempty"`
	Recipientdomain bool `protobuf:"varint,5,opt,name=recipientdomain,proto3" json:"recipientdomain,omitempty"`
	Jobid           bool `protobuf:"varint,6,opt,name=jobid,proto3" json:"jobid,omitempty"`
	Grouping        bool `protobuf:"varint,7,opt,name=grouping,proto3" json:"grouping,omitempty"`
}

func (x *QueueGroupByRequest_Fields) Reset() {
	*x = QueueGroupByRequest_Fields{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueueGroupByRequest_Fields) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueGroupByRequest_Fields) ProtoMessage() {}

func (x *QueueGroupByRequest_Fields) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueGroupByRequest_Fields.ProtoReflect.Descriptor instead.
func (*QueueGroupByRequest_Fields) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{16, 8}
}

func (x *QueueGroupByRequest_Fields) GetTransportid() bool {
	if x != nil {
		return x.Transportid
	}
	return false
}

func (x *QueueGroupByRequest_Fields) GetLocalip() bool {
	if x != nil {
		return x.Localip
	}
	return false
}

func (x *QueueGroupByRequest_Fields) GetRemoteip() bool {
	if x != nil {
		return x.Remoteip
	}
	return false
}

func (x *QueueGroupByRequest_Fields) GetRemotemx() bool {
	if x != nil {
		return x.Remotemx
	}
	return false
}

func (x *QueueGroupByRequest_Fields) GetRecipientdomain() bool {
	if x != nil {
		return x.Recipientdomain
	}
	return false
}

func (x *QueueGroupByRequest_Fields) GetJobid() bool {
	if x != nil {
		return x.Jobid
	}
	return false
}

func (x *QueueGroupByRequest_Fields) GetGrouping() bool {
	if x != nil {
		return x.Grouping
	}
	return false
}

type QueueGroupByRequest_Counts_ReturnType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ReturnType:
	//
	//	*QueueGroupByRequest_Counts_ReturnType_Type_
	//	*QueueGroupByRequest_Counts_ReturnType_Unique_
	ReturnType isQueueGroupByRequest_Counts_ReturnType_ReturnType `protobuf_oneof:"ReturnType"`
}

func (x *QueueGroupByRequest_Counts_ReturnType) Reset() {
	*x = QueueGroupByRequest_Counts_ReturnType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueueGroupByRequest_Counts_ReturnType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueGroupByRequest_Counts_ReturnType) ProtoMessage() {}

func (x *QueueGroupByRequest_Counts_ReturnType) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueGroupByRequest_Counts_ReturnType.ProtoReflect.Descriptor instead.
func (*QueueGroupByRequest_Counts_ReturnType) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{16, 6, 0}
}

func (m *QueueGroupByRequest_Counts_ReturnType) GetReturnType() isQueueGroupByRequest_Counts_ReturnType_ReturnType {
	if m != nil {
		return m.ReturnType
	}
	return nil
}

func (x *QueueGroupByRequest_Counts_ReturnType) GetType() QueueGroupByRequest_Counts_ReturnType_Type {
	if x, ok := x.GetReturnType().(*QueueGroupByRequest_Counts_ReturnType_Type_); ok {
		return x.Type
	}
	return QueueGroupByRequest_Counts_ReturnType_COUNT
}

func (x *QueueGroupByRequest_Counts_ReturnType) GetUnique() *QueueGroupByRequest_Counts_ReturnType_Unique {
	if x, ok := x.GetReturnType().(*QueueGroupByRequest_Counts_ReturnType_Unique_); ok {
		return x.Unique
	}
	return nil
}

type isQueueGroupByRequest_Counts_ReturnType_ReturnType interface {
	isQueueGroupByRequest_Counts_ReturnType_ReturnType()
}

type QueueGroupByRequest_Counts_ReturnType_Type_ struct {
	Type QueueGroupByRequest_Counts_ReturnType_Type `protobuf:"varint,1,opt,name=type,proto3,enum=smtpd.QueueGroupByRequest_Counts_ReturnType_Type,oneof"`
}

type QueueGroupByRequest_Counts_ReturnType_Unique_ struct {
	Unique *QueueGroupByRequest_Counts_ReturnType_Unique `protobuf:"bytes,2,opt,name=unique,proto3,oneof"`
}

func (*QueueGroupByRequest_Counts_ReturnType_Type_) isQueueGroupByRequest_Counts_ReturnType_ReturnType() {
}

func (*QueueGroupByRequest_Counts_ReturnType_Unique_) isQueueGroupByRequest_Counts_ReturnType_ReturnType() {
}

type QueueGroupByRequest_Counts_ReturnType_Unique struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Unique:
	//
	//	*QueueGroupByRequest_Counts_ReturnType_Unique_Transportid
	//	*QueueGroupByRequest_Counts_ReturnType_Unique_Recipientdomain
	//	*QueueGroupByRequest_Counts_ReturnType_Unique_Senderdomain
	//	*QueueGroupByRequest_Counts_ReturnType_Unique_Jobid
	//	*QueueGroupByRequest_Counts_ReturnType_Unique_Grouping
	//	*QueueGroupByRequest_Counts_ReturnType_Unique_Metadata
	//	*QueueGroupByRequest_Counts_ReturnType_Unique_Senderip
	//	*QueueGroupByRequest_Counts_ReturnType_Unique_Remoteip
	//	*QueueGroupByRequest_Counts_ReturnType_Unique_Remotemx
	//	*QueueGroupByRequest_Counts_ReturnType_Unique_Localip
	Unique     isQueueGroupByRequest_Counts_ReturnType_Unique_Unique `protobuf_oneof:"unique"`
	Nogrouping bool                                                  `protobuf:"varint,10,opt,name=nogrouping,proto3" json:"nogrouping,omitempty"`
}

func (x *QueueGroupByRequest_Counts_ReturnType_Unique) Reset() {
	*x = QueueGroupByRequest_Counts_ReturnType_Unique{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueueGroupByRequest_Counts_ReturnType_Unique) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueGroupByRequest_Counts_ReturnType_Unique) ProtoMessage() {}

func (x *QueueGroupByRequest_Counts_ReturnType_Unique) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueGroupByRequest_Counts_ReturnType_Unique.ProtoReflect.Descriptor instead.
func (*QueueGroupByRequest_Counts_ReturnType_Unique) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{16, 6, 0, 0}
}

func (m *QueueGroupByRequest_Counts_ReturnType_Unique) GetUnique() isQueueGroupByRequest_Counts_ReturnType_Unique_Unique {
	if m != nil {
		return m.Unique
	}
	return nil
}

func (x *QueueGroupByRequest_Counts_ReturnType_Unique) GetTransportid() bool {
	if x, ok := x.GetUnique().(*QueueGroupByRequest_Counts_ReturnType_Unique_Transportid); ok {
		return x.Transportid
	}
	return false
}

func (x *QueueGroupByRequest_Counts_ReturnType_Unique) GetRecipientdomain() bool {
	if x, ok := x.GetUnique().(*QueueGroupByRequest_Counts_ReturnType_Unique_Recipientdomain); ok {
		return x.Recipientdomain
	}
	return false
}

func (x *QueueGroupByRequest_Counts_ReturnType_Unique) GetSenderdomain() bool {
	if x, ok := x.GetUnique().(*QueueGroupByRequest_Counts_ReturnType_Unique_Senderdomain); ok {
		return x.Senderdomain
	}
	return false
}

func (x *QueueGroupByRequest_Counts_ReturnType_Unique) GetJobid() bool {
	if x, ok := x.GetUnique().(*QueueGroupByRequest_Counts_ReturnType_Unique_Jobid); ok {
		return x.Jobid
	}
	return false
}

func (x *QueueGroupByRequest_Counts_ReturnType_Unique) GetGrouping() bool {
	if x, ok := x.GetUnique().(*QueueGroupByRequest_Counts_ReturnType_Unique_Grouping); ok {
		return x.Grouping
	}
	return false
}

func (x *QueueGroupByRequest_Counts_ReturnType_Unique) GetMetadata() string {
	if x, ok := x.GetUnique().(*QueueGroupByRequest_Counts_ReturnType_Unique_Metadata); ok {
		return x.Metadata
	}
	return ""
}

func (x *QueueGroupByRequest_Counts_ReturnType_Unique) GetSenderip() bool {
	if x, ok := x.GetUnique().(*QueueGroupByRequest_Counts_ReturnType_Unique_Senderip); ok {
		return x.Senderip
	}
	return false
}

func (x *QueueGroupByRequest_Counts_ReturnType_Unique) GetRemoteip() bool {
	if x, ok := x.GetUnique().(*QueueGroupByRequest_Counts_ReturnType_Unique_Remoteip); ok {
		return x.Remoteip
	}
	return false
}

func (x *QueueGroupByRequest_Counts_ReturnType_Unique) GetRemotemx() bool {
	if x, ok := x.GetUnique().(*QueueGroupByRequest_Counts_ReturnType_Unique_Remotemx); ok {
		return x.Remotemx
	}
	return false
}

func (x *QueueGroupByRequest_Counts_ReturnType_Unique) GetLocalip() bool {
	if x, ok := x.GetUnique().(*QueueGroupByRequest_Counts_ReturnType_Unique_Localip); ok {
		return x.Localip
	}
	return false
}

func (x *QueueGroupByRequest_Counts_ReturnType_Unique) GetNogrouping() bool {
	if x != nil {
		return x.Nogrouping
	}
	return false
}

type isQueueGroupByRequest_Counts_ReturnType_Unique_Unique interface {
	isQueueGroupByRequest_Counts_ReturnType_Unique_Unique()
}

type QueueGroupByRequest_Counts_ReturnType_Unique_Transportid struct {
	Transportid bool `protobuf:"varint,1,opt,name=transportid,proto3,oneof"`
}

type QueueGroupByRequest_Counts_ReturnType_Unique_Recipientdomain struct {
	Recipientdomain bool `protobuf:"varint,2,opt,name=recipientdomain,proto3,oneof"`
}

type QueueGroupByRequest_Counts_ReturnType_Unique_Senderdomain struct {
	Senderdomain bool `protobuf:"varint,3,opt,name=senderdomain,proto3,oneof"`
}

type QueueGroupByRequest_Counts_ReturnType_Unique_Jobid struct {
	Jobid bool `protobuf:"varint,4,opt,name=jobid,proto3,oneof"`
}

type QueueGroupByRequest_Counts_ReturnType_Unique_Grouping struct {
	Grouping bool `protobuf:"varint,11,opt,name=grouping,proto3,oneof"`
}

type QueueGroupByRequest_Counts_ReturnType_Unique_Metadata struct {
	Metadata string `protobuf:"bytes,5,opt,name=metadata,proto3,oneof"`
}

type QueueGroupByRequest_Counts_ReturnType_Unique_Senderip struct {
	Senderip bool `protobuf:"varint,6,opt,name=senderip,proto3,oneof"`
}

type QueueGroupByRequest_Counts_ReturnType_Unique_Remoteip struct {
	Remoteip bool `protobuf:"varint,7,opt,name=remoteip,proto3,oneof"`
}

type QueueGroupByRequest_Counts_ReturnType_Unique_Remotemx struct {
	Remotemx bool `protobuf:"varint,8,opt,name=remotemx,proto3,oneof"`
}

type QueueGroupByRequest_Counts_ReturnType_Unique_Localip struct {
	Localip bool `protobuf:"varint,9,opt,name=localip,proto3,oneof"`
}

func (*QueueGroupByRequest_Counts_ReturnType_Unique_Transportid) isQueueGroupByRequest_Counts_ReturnType_Unique_Unique() {
}

func (*QueueGroupByRequest_Counts_ReturnType_Unique_Recipientdomain) isQueueGroupByRequest_Counts_ReturnType_Unique_Unique() {
}

func (*QueueGroupByRequest_Counts_ReturnType_Unique_Senderdomain) isQueueGroupByRequest_Counts_ReturnType_Unique_Unique() {
}

func (*QueueGroupByRequest_Counts_ReturnType_Unique_Jobid) isQueueGroupByRequest_Counts_ReturnType_Unique_Unique() {
}

func (*QueueGroupByRequest_Counts_ReturnType_Unique_Grouping) isQueueGroupByRequest_Counts_ReturnType_Unique_Unique() {
}

func (*QueueGroupByRequest_Counts_ReturnType_Unique_Metadata) isQueueGroupByRequest_Counts_ReturnType_Unique_Unique() {
}

func (*QueueGroupByRequest_Counts_ReturnType_Unique_Senderip) isQueueGroupByRequest_Counts_ReturnType_Unique_Unique() {
}

func (*QueueGroupByRequest_Counts_ReturnType_Unique_Remoteip) isQueueGroupByRequest_Counts_ReturnType_Unique_Unique() {
}

func (*QueueGroupByRequest_Counts_ReturnType_Unique_Remotemx) isQueueGroupByRequest_Counts_ReturnType_Unique_Unique() {
}

func (*QueueGroupByRequest_Counts_ReturnType_Unique_Localip) isQueueGroupByRequest_Counts_ReturnType_Unique_Unique() {
}

type QueueGroupByResponse_Item struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Groupbys []string `protobuf:"bytes,1,rep,name=groupbys,proto3" json:"groupbys,omitempty"`
	Counts   []uint64 `protobuf:"varint,2,rep,packed,name=counts,proto3" json:"counts,omitempty"`
	Total    uint64   `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *QueueGroupByResponse_Item) Reset() {
	*x = QueueGroupByResponse_Item{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueueGroupByResponse_Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueGroupByResponse_Item) ProtoMessage() {}

func (x *QueueGroupByResponse_Item) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueGroupByResponse_Item.ProtoReflect.Descriptor instead.
func (*QueueGroupByResponse_Item) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{17, 0}
}

func (x *QueueGroupByResponse_Item) GetGroupbys() []string {
	if x != nil {
		return x.Groupbys
	}
	return nil
}

func (x *QueueGroupByResponse_Item) GetCounts() []uint64 {
	if x != nil {
		return x.Counts
	}
	return nil
}

func (x *QueueGroupByResponse_Item) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type QueueGroupByResponse_Paging struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total uint64 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *QueueGroupByResponse_Paging) Reset() {
	*x = QueueGroupByResponse_Paging{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueueGroupByResponse_Paging) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueGroupByResponse_Paging) ProtoMessage() {}

func (x *QueueGroupByResponse_Paging) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueGroupByResponse_Paging.ProtoReflect.Descriptor instead.
func (*QueueGroupByResponse_Paging) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{17, 1}
}

func (x *QueueGroupByResponse_Paging) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type QueueListRequest_SortingMailAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to SortingMailAddress:
	//
	//	*QueueListRequest_SortingMailAddress_Localpart
	//	*QueueListRequest_SortingMailAddress_Domain
	SortingMailAddress isQueueListRequest_SortingMailAddress_SortingMailAddress `protobuf_oneof:"SortingMailAddress"`
}

func (x *QueueListRequest_SortingMailAddress) Reset() {
	*x = QueueListRequest_SortingMailAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueueListRequest_SortingMailAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueListRequest_SortingMailAddress) ProtoMessage() {}

func (x *QueueListRequest_SortingMailAddress) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueListRequest_SortingMailAddress.ProtoReflect.Descriptor instead.
func (*QueueListRequest_SortingMailAddress) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{18, 0}
}

func (m *QueueListRequest_SortingMailAddress) GetSortingMailAddress() isQueueListRequest_SortingMailAddress_SortingMailAddress {
	if m != nil {
		return m.SortingMailAddress
	}
	return nil
}

func (x *QueueListRequest_SortingMailAddress) GetLocalpart() Order {
	if x, ok := x.GetSortingMailAddress().(*QueueListRequest_SortingMailAddress_Localpart); ok {
		return x.Localpart
	}
	return Order_ASC
}

func (x *QueueListRequest_SortingMailAddress) GetDomain() Order {
	if x, ok := x.GetSortingMailAddress().(*QueueListRequest_SortingMailAddress_Domain); ok {
		return x.Domain
	}
	return Order_ASC
}

type isQueueListRequest_SortingMailAddress_SortingMailAddress interface {
	isQueueListRequest_SortingMailAddress_SortingMailAddress()
}

type QueueListRequest_SortingMailAddress_Localpart struct {
	Localpart Order `protobuf:"varint,1,opt,name=localpart,proto3,enum=smtpd.Order,oneof"`
}

type QueueListRequest_SortingMailAddress_Domain struct {
	Domain Order `protobuf:"varint,2,opt,name=domain,proto3,enum=smtpd.Order,oneof"`
}

func (*QueueListRequest_SortingMailAddress_Localpart) isQueueListRequest_SortingMailAddress_SortingMailAddress() {
}

func (*QueueListRequest_SortingMailAddress_Domain) isQueueListRequest_SortingMailAddress_SortingMailAddress() {
}

type QueueListRequest_SortingWorking struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to SortingWorking:
	//
	//	*QueueListRequest_SortingWorking_Duration
	SortingWorking isQueueListRequest_SortingWorking_SortingWorking `protobuf_oneof:"SortingWorking"`
}

func (x *QueueListRequest_SortingWorking) Reset() {
	*x = QueueListRequest_SortingWorking{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueueListRequest_SortingWorking) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueListRequest_SortingWorking) ProtoMessage() {}

func (x *QueueListRequest_SortingWorking) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueListRequest_SortingWorking.ProtoReflect.Descriptor instead.
func (*QueueListRequest_SortingWorking) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{18, 1}
}

func (m *QueueListRequest_SortingWorking) GetSortingWorking() isQueueListRequest_SortingWorking_SortingWorking {
	if m != nil {
		return m.SortingWorking
	}
	return nil
}

func (x *QueueListRequest_SortingWorking) GetDuration() Order {
	if x, ok := x.GetSortingWorking().(*QueueListRequest_SortingWorking_Duration); ok {
		return x.Duration
	}
	return Order_ASC
}

type isQueueListRequest_SortingWorking_SortingWorking interface {
	isQueueListRequest_SortingWorking_SortingWorking()
}

type QueueListRequest_SortingWorking_Duration struct {
	Duration Order `protobuf:"varint,1,opt,name=duration,proto3,enum=smtpd.Order,oneof"`
}

func (*QueueListRequest_SortingWorking_Duration) isQueueListRequest_SortingWorking_SortingWorking() {}

type QueueListRequest_Sorting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Sorting:
	//
	//	*QueueListRequest_Sorting_Ts
	//	*QueueListRequest_Sorting_Sender
	//	*QueueListRequest_Sorting_Recipient
	//	*QueueListRequest_Sorting_Working
	//	*QueueListRequest_Sorting_Retryts
	//	*QueueListRequest_Sorting_Size
	//	*QueueListRequest_Sorting_Retrycount
	Sorting isQueueListRequest_Sorting_Sorting `protobuf_oneof:"Sorting"`
}

func (x *QueueListRequest_Sorting) Reset() {
	*x = QueueListRequest_Sorting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueueListRequest_Sorting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueListRequest_Sorting) ProtoMessage() {}

func (x *QueueListRequest_Sorting) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueListRequest_Sorting.ProtoReflect.Descriptor instead.
func (*QueueListRequest_Sorting) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{18, 2}
}

func (m *QueueListRequest_Sorting) GetSorting() isQueueListRequest_Sorting_Sorting {
	if m != nil {
		return m.Sorting
	}
	return nil
}

func (x *QueueListRequest_Sorting) GetTs() Order {
	if x, ok := x.GetSorting().(*QueueListRequest_Sorting_Ts); ok {
		return x.Ts
	}
	return Order_ASC
}

func (x *QueueListRequest_Sorting) GetSender() *QueueListRequest_SortingMailAddress {
	if x, ok := x.GetSorting().(*QueueListRequest_Sorting_Sender); ok {
		return x.Sender
	}
	return nil
}

func (x *QueueListRequest_Sorting) GetRecipient() *QueueListRequest_SortingMailAddress {
	if x, ok := x.GetSorting().(*QueueListRequest_Sorting_Recipient); ok {
		return x.Recipient
	}
	return nil
}

func (x *QueueListRequest_Sorting) GetWorking() *QueueListRequest_SortingWorking {
	if x, ok := x.GetSorting().(*QueueListRequest_Sorting_Working); ok {
		return x.Working
	}
	return nil
}

func (x *QueueListRequest_Sorting) GetRetryts() Order {
	if x, ok := x.GetSorting().(*QueueListRequest_Sorting_Retryts); ok {
		return x.Retryts
	}
	return Order_ASC
}

func (x *QueueListRequest_Sorting) GetSize() Order {
	if x, ok := x.GetSorting().(*QueueListRequest_Sorting_Size); ok {
		return x.Size
	}
	return Order_ASC
}

func (x *QueueListRequest_Sorting) GetRetrycount() Order {
	if x, ok := x.GetSorting().(*QueueListRequest_Sorting_Retrycount); ok {
		return x.Retrycount
	}
	return Order_ASC
}

type isQueueListRequest_Sorting_Sorting interface {
	isQueueListRequest_Sorting_Sorting()
}

type QueueListRequest_Sorting_Ts struct {
	Ts Order `protobuf:"varint,1,opt,name=ts,proto3,enum=smtpd.Order,oneof"`
}

type QueueListRequest_Sorting_Sender struct {
	Sender *QueueListRequest_SortingMailAddress `protobuf:"bytes,2,opt,name=sender,proto3,oneof"`
}

type QueueListRequest_Sorting_Recipient struct {
	Recipient *QueueListRequest_SortingMailAddress `protobuf:"bytes,3,opt,name=recipient,proto3,oneof"`
}

type QueueListRequest_Sorting_Working struct {
	Working *QueueListRequest_SortingWorking `protobuf:"bytes,4,opt,name=working,proto3,oneof"`
}

type QueueListRequest_Sorting_Retryts struct {
	Retryts Order `protobuf:"varint,5,opt,name=retryts,proto3,enum=smtpd.Order,oneof"`
}

type QueueListRequest_Sorting_Size struct {
	Size Order `protobuf:"varint,6,opt,name=size,proto3,enum=smtpd.Order,oneof"`
}

type QueueListRequest_Sorting_Retrycount struct {
	Retrycount Order `protobuf:"varint,7,opt,name=retrycount,proto3,enum=smtpd.Order,oneof"`
}

func (*QueueListRequest_Sorting_Ts) isQueueListRequest_Sorting_Sorting() {}

func (*QueueListRequest_Sorting_Sender) isQueueListRequest_Sorting_Sorting() {}

func (*QueueListRequest_Sorting_Recipient) isQueueListRequest_Sorting_Sorting() {}

func (*QueueListRequest_Sorting_Working) isQueueListRequest_Sorting_Sorting() {}

func (*QueueListRequest_Sorting_Retryts) isQueueListRequest_Sorting_Sorting() {}

func (*QueueListRequest_Sorting_Size) isQueueListRequest_Sorting_Sorting() {}

func (*QueueListRequest_Sorting_Retrycount) isQueueListRequest_Sorting_Sorting() {}

type QueueListRequest_Paging struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Offset uint64 `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit  uint64 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *QueueListRequest_Paging) Reset() {
	*x = QueueListRequest_Paging{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueueListRequest_Paging) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueListRequest_Paging) ProtoMessage() {}

func (x *QueueListRequest_Paging) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueListRequest_Paging.ProtoReflect.Descriptor instead.
func (*QueueListRequest_Paging) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{18, 3}
}

func (x *QueueListRequest_Paging) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *QueueListRequest_Paging) GetLimit() uint64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type QueueListResponse_QueueItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id *QueueItemID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Types that are assignable to State:
	//
	//	*QueueListResponse_QueueItem_Queue
	//	*QueueListResponse_QueueItem_Freeze
	//	*QueueListResponse_QueueItem_Working
	State           isQueueListResponse_QueueItem_State      `protobuf_oneof:"State"`
	Hqfpath         string                                   `protobuf:"bytes,5,opt,name=hqfpath,proto3" json:"hqfpath,omitempty"`
	Ts              float64                                  `protobuf:"fixed64,6,opt,name=ts,proto3" json:"ts,omitempty"`
	Hold            bool                                     `protobuf:"varint,7,opt,name=hold,proto3" json:"hold,omitempty"`
	Jobid           string                                   `protobuf:"bytes,8,opt,name=jobid,proto3" json:"jobid,omitempty"`
	Grouping        string                                   `protobuf:"bytes,31,opt,name=grouping,proto3" json:"grouping,omitempty"`
	Stageid         string                                   `protobuf:"bytes,9,opt,name=stageid,proto3" json:"stageid,omitempty"`
	Metadata        map[string]string                        `protobuf:"bytes,10,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Serverid        string                                   `protobuf:"bytes,11,opt,name=serverid,proto3" json:"serverid,omitempty"`
	Transportid     string                                   `protobuf:"bytes,12,opt,name=transportid,proto3" json:"transportid,omitempty"`
	Sender          *QueueListResponse_QueueItem_MailAddress `protobuf:"bytes,13,opt,name=sender,proto3" json:"sender,omitempty"`
	Recipient       *QueueListResponse_QueueItem_MailAddress `protobuf:"bytes,14,opt,name=recipient,proto3" json:"recipient,omitempty"`
	Retrycount      uint64                                   `protobuf:"varint,15,opt,name=retrycount,proto3" json:"retrycount,omitempty"`
	Retrydelay      float64                                  `protobuf:"fixed64,16,opt,name=retrydelay,proto3" json:"retrydelay,omitempty"`
	Retryreason     string                                   `protobuf:"bytes,17,opt,name=retryreason,proto3" json:"retryreason,omitempty"`
	Size            uint64                                   `protobuf:"varint,18,opt,name=size,proto3" json:"size,omitempty"`
	Senderip        string                                   `protobuf:"bytes,19,opt,name=senderip,proto3" json:"senderip,omitempty"`
	Senderhelo      string                                   `protobuf:"bytes,20,opt,name=senderhelo,proto3" json:"senderhelo,omitempty"`
	Saslusername    string                                   `protobuf:"bytes,21,opt,name=saslusername,proto3" json:"saslusername,omitempty"`
	Subject         string                                   `protobuf:"bytes,22,opt,name=subject,proto3" json:"subject,omitempty"`
	Localips        []string                                 `protobuf:"bytes,23,rep,name=localips,proto3" json:"localips,omitempty"`
	Localipsordered bool                                     `protobuf:"varint,30,opt,name=localipsordered,proto3" json:"localipsordered,omitempty"`
	Remoteip        string                                   `protobuf:"bytes,24,opt,name=remoteip,proto3" json:"remoteip,omitempty"`
	Remotemx        string                                   `protobuf:"bytes,25,opt,name=remotemx,proto3" json:"remotemx,omitempty"`
	Tags            []string                                 `protobuf:"bytes,26,rep,name=tags,proto3" json:"tags,omitempty"`
	Quotas          []string                                 `protobuf:"bytes,27,rep,name=quotas,proto3" json:"quotas,omitempty"`
	Dsn             *QueueListResponse_QueueItem_DSN         `protobuf:"bytes,28,opt,name=dsn,proto3" json:"dsn,omitempty"`
	Priority        uint64                                   `protobuf:"varint,29,opt,name=priority,proto3" json:"priority,omitempty"`
}

func (x *QueueListResponse_QueueItem) Reset() {
	*x = QueueListResponse_QueueItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueueListResponse_QueueItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueListResponse_QueueItem) ProtoMessage() {}

func (x *QueueListResponse_QueueItem) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueListResponse_QueueItem.ProtoReflect.Descriptor instead.
func (*QueueListResponse_QueueItem) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{19, 0}
}

func (x *QueueListResponse_QueueItem) GetId() *QueueItemID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (m *QueueListResponse_QueueItem) GetState() isQueueListResponse_QueueItem_State {
	if m != nil {
		return m.State
	}
	return nil
}

func (x *QueueListResponse_QueueItem) GetQueue() *QueueListResponse_QueueItem_QueueState {
	if x, ok := x.GetState().(*QueueListResponse_QueueItem_Queue); ok {
		return x.Queue
	}
	return nil
}

func (x *QueueListResponse_QueueItem) GetFreeze() *QueueListResponse_QueueItem_FreezeState {
	if x, ok := x.GetState().(*QueueListResponse_QueueItem_Freeze); ok {
		return x.Freeze
	}
	return nil
}

func (x *QueueListResponse_QueueItem) GetWorking() *QueueListResponse_QueueItem_WorkingState {
	if x, ok := x.GetState().(*QueueListResponse_QueueItem_Working); ok {
		return x.Working
	}
	return nil
}

func (x *QueueListResponse_QueueItem) GetHqfpath() string {
	if x != nil {
		return x.Hqfpath
	}
	return ""
}

func (x *QueueListResponse_QueueItem) GetTs() float64 {
	if x != nil {
		return x.Ts
	}
	return 0
}

func (x *QueueListResponse_QueueItem) GetHold() bool {
	if x != nil {
		return x.Hold
	}
	return false
}

func (x *QueueListResponse_QueueItem) GetJobid() string {
	if x != nil {
		return x.Jobid
	}
	return ""
}

func (x *QueueListResponse_QueueItem) GetGrouping() string {
	if x != nil {
		return x.Grouping
	}
	return ""
}

func (x *QueueListResponse_QueueItem) GetStageid() string {
	if x != nil {
		return x.Stageid
	}
	return ""
}

func (x *QueueListResponse_QueueItem) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *QueueListResponse_QueueItem) GetServerid() string {
	if x != nil {
		return x.Serverid
	}
	return ""
}

func (x *QueueListResponse_QueueItem) GetTransportid() string {
	if x != nil {
		return x.Transportid
	}
	return ""
}

func (x *QueueListResponse_QueueItem) GetSender() *QueueListResponse_QueueItem_MailAddress {
	if x != nil {
		return x.Sender
	}
	return nil
}

func (x *QueueListResponse_QueueItem) GetRecipient() *QueueListResponse_QueueItem_MailAddress {
	if x != nil {
		return x.Recipient
	}
	return nil
}

func (x *QueueListResponse_QueueItem) GetRetrycount() uint64 {
	if x != nil {
		return x.Retrycount
	}
	return 0
}

func (x *QueueListResponse_QueueItem) GetRetrydelay() float64 {
	if x != nil {
		return x.Retrydelay
	}
	return 0
}

func (x *QueueListResponse_QueueItem) GetRetryreason() string {
	if x != nil {
		return x.Retryreason
	}
	return ""
}

func (x *QueueListResponse_QueueItem) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *QueueListResponse_QueueItem) GetSenderip() string {
	if x != nil {
		return x.Senderip
	}
	return ""
}

func (x *QueueListResponse_QueueItem) GetSenderhelo() string {
	if x != nil {
		return x.Senderhelo
	}
	return ""
}

func (x *QueueListResponse_QueueItem) GetSaslusername() string {
	if x != nil {
		return x.Saslusername
	}
	return ""
}

func (x *QueueListResponse_QueueItem) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *QueueListResponse_QueueItem) GetLocalips() []string {
	if x != nil {
		return x.Localips
	}
	return nil
}

func (x *QueueListResponse_QueueItem) GetLocalipsordered() bool {
	if x != nil {
		return x.Localipsordered
	}
	return false
}

func (x *QueueListResponse_QueueItem) GetRemoteip() string {
	if x != nil {
		return x.Remoteip
	}
	return ""
}

func (x *QueueListResponse_QueueItem) GetRemotemx() string {
	if x != nil {
		return x.Remotemx
	}
	return ""
}

func (x *QueueListResponse_QueueItem) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *QueueListResponse_QueueItem) GetQuotas() []string {
	if x != nil {
		return x.Quotas
	}
	return nil
}

func (x *QueueListResponse_QueueItem) GetDsn() *QueueListResponse_QueueItem_DSN {
	if x != nil {
		return x.Dsn
	}
	return nil
}

func (x *QueueListResponse_QueueItem) GetPriority() uint64 {
	if x != nil {
		return x.Priority
	}
	return 0
}

type isQueueListResponse_QueueItem_State interface {
	isQueueListResponse_QueueItem_State()
}

type QueueListResponse_QueueItem_Queue struct {
	Queue *QueueListResponse_QueueItem_QueueState `protobuf:"bytes,2,opt,name=queue,proto3,oneof"`
}

type QueueListResponse_QueueItem_Freeze struct {
	Freeze *QueueListResponse_QueueItem_FreezeState `protobuf:"bytes,3,opt,name=freeze,proto3,oneof"`
}

type QueueListResponse_QueueItem_Working struct {
	Working *QueueListResponse_QueueItem_WorkingState `protobuf:"bytes,4,opt,name=working,proto3,oneof"`
}

func (*QueueListResponse_QueueItem_Queue) isQueueListResponse_QueueItem_State() {}

func (*QueueListResponse_QueueItem_Freeze) isQueueListResponse_QueueItem_State() {}

func (*QueueListResponse_QueueItem_Working) isQueueListResponse_QueueItem_State() {}

type QueueListResponse_Paging struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total uint64 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *QueueListResponse_Paging) Reset() {
	*x = QueueListResponse_Paging{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueueListResponse_Paging) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueListResponse_Paging) ProtoMessage() {}

func (x *QueueListResponse_Paging) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueListResponse_Paging.ProtoReflect.Descriptor instead.
func (*QueueListResponse_Paging) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{19, 1}
}

func (x *QueueListResponse_Paging) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type QueueListResponse_QueueItem_MailAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Localpart string `protobuf:"bytes,1,opt,name=localpart,proto3" json:"localpart,omitempty"`
	Domain    string `protobuf:"bytes,2,opt,name=domain,proto3" json:"domain,omitempty"`
}

func (x *QueueListResponse_QueueItem_MailAddress) Reset() {
	*x = QueueListResponse_QueueItem_MailAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueueListResponse_QueueItem_MailAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueListResponse_QueueItem_MailAddress) ProtoMessage() {}

func (x *QueueListResponse_QueueItem_MailAddress) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueListResponse_QueueItem_MailAddress.ProtoReflect.Descriptor instead.
func (*QueueListResponse_QueueItem_MailAddress) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{19, 0, 0}
}

func (x *QueueListResponse_QueueItem_MailAddress) GetLocalpart() string {
	if x != nil {
		return x.Localpart
	}
	return ""
}

func (x *QueueListResponse_QueueItem_MailAddress) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

type QueueListResponse_QueueItem_QueueState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Queue Queue `protobuf:"varint,1,opt,name=queue,proto3,enum=smtpd.Queue" json:"queue,omitempty"`
}

func (x *QueueListResponse_QueueItem_QueueState) Reset() {
	*x = QueueListResponse_QueueItem_QueueState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueueListResponse_QueueItem_QueueState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueListResponse_QueueItem_QueueState) ProtoMessage() {}

func (x *QueueListResponse_QueueItem_QueueState) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueListResponse_QueueItem_QueueState.ProtoReflect.Descriptor instead.
func (*QueueListResponse_QueueItem_QueueState) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{19, 0, 1}
}

func (x *QueueListResponse_QueueItem_QueueState) GetQueue() Queue {
	if x != nil {
		return x.Queue
	}
	return Queue_ACTIVE
}

type QueueListResponse_QueueItem_FreezeState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Freeze Freeze `protobuf:"varint,1,opt,name=freeze,proto3,enum=smtpd.Freeze" json:"freeze,omitempty"`
}

func (x *QueueListResponse_QueueItem_FreezeState) Reset() {
	*x = QueueListResponse_QueueItem_FreezeState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueueListResponse_QueueItem_FreezeState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueListResponse_QueueItem_FreezeState) ProtoMessage() {}

func (x *QueueListResponse_QueueItem_FreezeState) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueListResponse_QueueItem_FreezeState.ProtoReflect.Descriptor instead.
func (*QueueListResponse_QueueItem_FreezeState) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{19, 0, 2}
}

func (x *QueueListResponse_QueueItem_FreezeState) GetFreeze() Freeze {
	if x != nil {
		return x.Freeze
	}
	return Freeze_HOLD
}

type QueueListResponse_QueueItem_WorkingState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Working        Working `protobuf:"varint,1,opt,name=working,proto3,enum=smtpd.Working" json:"working,omitempty"`
	Updatefreezing bool    `protobuf:"varint,2,opt,name=updatefreezing,proto3" json:"updatefreezing,omitempty"`
	Duration       float64 `protobuf:"fixed64,3,opt,name=duration,proto3" json:"duration,omitempty"`
}

func (x *QueueListResponse_QueueItem_WorkingState) Reset() {
	*x = QueueListResponse_QueueItem_WorkingState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueueListResponse_QueueItem_WorkingState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueListResponse_QueueItem_WorkingState) ProtoMessage() {}

func (x *QueueListResponse_QueueItem_WorkingState) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueListResponse_QueueItem_WorkingState.ProtoReflect.Descriptor instead.
func (*QueueListResponse_QueueItem_WorkingState) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{19, 0, 3}
}

func (x *QueueListResponse_QueueItem_WorkingState) GetWorking() Working {
	if x != nil {
		return x.Working
	}
	return Working_UNKNOWN
}

func (x *QueueListResponse_QueueItem_WorkingState) GetUpdatefreezing() bool {
	if x != nil {
		return x.Updatefreezing
	}
	return false
}

func (x *QueueListResponse_QueueItem_WorkingState) GetDuration() float64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

type QueueListResponse_QueueItem_DSN struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Envid  string `protobuf:"bytes,1,opt,name=envid,proto3" json:"envid,omitempty"`
	Ret    string `protobuf:"bytes,2,opt,name=ret,proto3" json:"ret,omitempty"`
	Notify string `protobuf:"bytes,3,opt,name=notify,proto3" json:"notify,omitempty"`
	Orcpt  string `protobuf:"bytes,4,opt,name=orcpt,proto3" json:"orcpt,omitempty"`
}

func (x *QueueListResponse_QueueItem_DSN) Reset() {
	*x = QueueListResponse_QueueItem_DSN{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueueListResponse_QueueItem_DSN) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueListResponse_QueueItem_DSN) ProtoMessage() {}

func (x *QueueListResponse_QueueItem_DSN) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueListResponse_QueueItem_DSN.ProtoReflect.Descriptor instead.
func (*QueueListResponse_QueueItem_DSN) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{19, 0, 4}
}

func (x *QueueListResponse_QueueItem_DSN) GetEnvid() string {
	if x != nil {
		return x.Envid
	}
	return ""
}

func (x *QueueListResponse_QueueItem_DSN) GetRet() string {
	if x != nil {
		return x.Ret
	}
	return ""
}

func (x *QueueListResponse_QueueItem_DSN) GetNotify() string {
	if x != nil {
		return x.Notify
	}
	return ""
}

func (x *QueueListResponse_QueueItem_DSN) GetOrcpt() string {
	if x != nil {
		return x.Orcpt
	}
	return ""
}

type QueueImportRequest_ImportData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rfc822 []byte `protobuf:"bytes,1,opt,name=rfc822,proto3" json:"rfc822,omitempty"`
	Hqf    []byte `protobuf:"bytes,2,opt,name=hqf,proto3" json:"hqf,omitempty"`
}

func (x *QueueImportRequest_ImportData) Reset() {
	*x = QueueImportRequest_ImportData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueueImportRequest_ImportData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueImportRequest_ImportData) ProtoMessage() {}

func (x *QueueImportRequest_ImportData) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueImportRequest_ImportData.ProtoReflect.Descriptor instead.
func (*QueueImportRequest_ImportData) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{22, 0}
}

func (x *QueueImportRequest_ImportData) GetRfc822() []byte {
	if x != nil {
		return x.Rfc822
	}
	return nil
}

func (x *QueueImportRequest_ImportData) GetHqf() []byte {
	if x != nil {
		return x.Hqf
	}
	return nil
}

type QueueImportRequest_Reset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transactionid *BoolValue `protobuf:"bytes,1,opt,name=transactionid,proto3" json:"transactionid,omitempty"`
	Ts            *BoolValue `protobuf:"bytes,2,opt,name=ts,proto3" json:"ts,omitempty"`
	Retrycount    *BoolValue `protobuf:"bytes,3,opt,name=retrycount,proto3" json:"retrycount,omitempty"`
}

func (x *QueueImportRequest_Reset) Reset() {
	*x = QueueImportRequest_Reset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueueImportRequest_Reset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueImportRequest_Reset) ProtoMessage() {}

func (x *QueueImportRequest_Reset) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueImportRequest_Reset.ProtoReflect.Descriptor instead.
func (*QueueImportRequest_Reset) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{22, 1}
}

func (x *QueueImportRequest_Reset) GetTransactionid() *BoolValue {
	if x != nil {
		return x.Transactionid
	}
	return nil
}

func (x *QueueImportRequest_Reset) GetTs() *BoolValue {
	if x != nil {
		return x.Ts
	}
	return nil
}

func (x *QueueImportRequest_Reset) GetRetrycount() *BoolValue {
	if x != nil {
		return x.Retrycount
	}
	return nil
}

type HSLCacheResponse_Item struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Function  string `protobuf:"bytes,2,opt,name=function,proto3" json:"function,omitempty"`
	Maxsize   uint64 `protobuf:"varint,3,opt,name=maxsize,proto3" json:"maxsize,omitempty"`
	Size      uint64 `protobuf:"varint,4,opt,name=size,proto3" json:"size,omitempty"`
	Hits      uint64 `protobuf:"varint,5,opt,name=hits,proto3" json:"hits,omitempty"`
	Misses    uint64 `protobuf:"varint,6,opt,name=misses,proto3" json:"misses,omitempty"`
	Evicts    uint64 `protobuf:"varint,7,opt,name=evicts,proto3" json:"evicts,omitempty"`
	Waits     uint64 `protobuf:"varint,8,opt,name=waits,proto3" json:"waits,omitempty"`
}

func (x *HSLCacheResponse_Item) Reset() {
	*x = HSLCacheResponse_Item{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HSLCacheResponse_Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HSLCacheResponse_Item) ProtoMessage() {}

func (x *HSLCacheResponse_Item) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HSLCacheResponse_Item.ProtoReflect.Descriptor instead.
func (*HSLCacheResponse_Item) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{28, 0}
}

func (x *HSLCacheResponse_Item) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *HSLCacheResponse_Item) GetFunction() string {
	if x != nil {
		return x.Function
	}
	return ""
}

func (x *HSLCacheResponse_Item) GetMaxsize() uint64 {
	if x != nil {
		return x.Maxsize
	}
	return 0
}

func (x *HSLCacheResponse_Item) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *HSLCacheResponse_Item) GetHits() uint64 {
	if x != nil {
		return x.Hits
	}
	return 0
}

func (x *HSLCacheResponse_Item) GetMisses() uint64 {
	if x != nil {
		return x.Misses
	}
	return 0
}

func (x *HSLCacheResponse_Item) GetEvicts() uint64 {
	if x != nil {
		return x.Evicts
	}
	return 0
}

func (x *HSLCacheResponse_Item) GetWaits() uint64 {
	if x != nil {
		return x.Waits
	}
	return 0
}

type HSLLogResponse_Location struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Beginline   uint64 `protobuf:"varint,1,opt,name=beginline,proto3" json:"beginline,omitempty"`
	Endline     uint64 `protobuf:"varint,2,opt,name=endline,proto3" json:"endline,omitempty"`
	Begincolumn uint64 `protobuf:"varint,3,opt,name=begincolumn,proto3" json:"begincolumn,omitempty"`
	Endcolumn   uint64 `protobuf:"varint,4,opt,name=endcolumn,proto3" json:"endcolumn,omitempty"`
	File        string `protobuf:"bytes,5,opt,name=file,proto3" json:"file,omitempty"`
}

func (x *HSLLogResponse_Location) Reset() {
	*x = HSLLogResponse_Location{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HSLLogResponse_Location) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HSLLogResponse_Location) ProtoMessage() {}

func (x *HSLLogResponse_Location) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HSLLogResponse_Location.ProtoReflect.Descriptor instead.
func (*HSLLogResponse_Location) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{29, 0}
}

func (x *HSLLogResponse_Location) GetBeginline() uint64 {
	if x != nil {
		return x.Beginline
	}
	return 0
}

func (x *HSLLogResponse_Location) GetEndline() uint64 {
	if x != nil {
		return x.Endline
	}
	return 0
}

func (x *HSLLogResponse_Location) GetBegincolumn() uint64 {
	if x != nil {
		return x.Begincolumn
	}
	return 0
}

func (x *HSLLogResponse_Location) GetEndcolumn() uint64 {
	if x != nil {
		return x.Endcolumn
	}
	return 0
}

func (x *HSLLogResponse_Location) GetFile() string {
	if x != nil {
		return x.File
	}
	return ""
}

type HSLBreakPointResponse_Location struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Beginline   uint64 `protobuf:"varint,1,opt,name=beginline,proto3" json:"beginline,omitempty"`
	Endline     uint64 `protobuf:"varint,2,opt,name=endline,proto3" json:"endline,omitempty"`
	Begincolumn uint64 `protobuf:"varint,3,opt,name=begincolumn,proto3" json:"begincolumn,omitempty"`
	Endcolumn   uint64 `protobuf:"varint,4,opt,name=endcolumn,proto3" json:"endcolumn,omitempty"`
	File        string `protobuf:"bytes,5,opt,name=file,proto3" json:"file,omitempty"`
}

func (x *HSLBreakPointResponse_Location) Reset() {
	*x = HSLBreakPointResponse_Location{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HSLBreakPointResponse_Location) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HSLBreakPointResponse_Location) ProtoMessage() {}

func (x *HSLBreakPointResponse_Location) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HSLBreakPointResponse_Location.ProtoReflect.Descriptor instead.
func (*HSLBreakPointResponse_Location) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{30, 0}
}

func (x *HSLBreakPointResponse_Location) GetBeginline() uint64 {
	if x != nil {
		return x.Beginline
	}
	return 0
}

func (x *HSLBreakPointResponse_Location) GetEndline() uint64 {
	if x != nil {
		return x.Endline
	}
	return 0
}

func (x *HSLBreakPointResponse_Location) GetBegincolumn() uint64 {
	if x != nil {
		return x.Begincolumn
	}
	return 0
}

func (x *HSLBreakPointResponse_Location) GetEndcolumn() uint64 {
	if x != nil {
		return x.Endcolumn
	}
	return 0
}

func (x *HSLBreakPointResponse_Location) GetFile() string {
	if x != nil {
		return x.File
	}
	return ""
}

type HSLBreakPointResponse_Callstack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Function string `protobuf:"bytes,1,opt,name=function,proto3" json:"function,omitempty"`
}

func (x *HSLBreakPointResponse_Callstack) Reset() {
	*x = HSLBreakPointResponse_Callstack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HSLBreakPointResponse_Callstack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HSLBreakPointResponse_Callstack) ProtoMessage() {}

func (x *HSLBreakPointResponse_Callstack) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HSLBreakPointResponse_Callstack.ProtoReflect.Descriptor instead.
func (*HSLBreakPointResponse_Callstack) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{30, 1}
}

func (x *HSLBreakPointResponse_Callstack) GetFunction() string {
	if x != nil {
		return x.Function
	}
	return ""
}

type ProcessStatsResponse_Process struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pid     uint64                                `protobuf:"varint,1,opt,name=pid,proto3" json:"pid,omitempty"`
	Runtime float64                               `protobuf:"fixed64,2,opt,name=runtime,proto3" json:"runtime,omitempty"`
	Version *ProcessStatsResponse_Process_Version `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *ProcessStatsResponse_Process) Reset() {
	*x = ProcessStatsResponse_Process{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessStatsResponse_Process) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessStatsResponse_Process) ProtoMessage() {}

func (x *ProcessStatsResponse_Process) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessStatsResponse_Process.ProtoReflect.Descriptor instead.
func (*ProcessStatsResponse_Process) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{33, 0}
}

func (x *ProcessStatsResponse_Process) GetPid() uint64 {
	if x != nil {
		return x.Pid
	}
	return 0
}

func (x *ProcessStatsResponse_Process) GetRuntime() float64 {
	if x != nil {
		return x.Runtime
	}
	return 0
}

func (x *ProcessStatsResponse_Process) GetVersion() *ProcessStatsResponse_Process_Version {
	if x != nil {
		return x.Version
	}
	return nil
}

type ProcessStatsResponse_Connections struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Concurrent    uint64 `protobuf:"varint,1,opt,name=concurrent,proto3" json:"concurrent,omitempty"`
	Maxconcurrent uint64 `protobuf:"varint,2,opt,name=maxconcurrent,proto3" json:"maxconcurrent,omitempty"`
}

func (x *ProcessStatsResponse_Connections) Reset() {
	*x = ProcessStatsResponse_Connections{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessStatsResponse_Connections) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessStatsResponse_Connections) ProtoMessage() {}

func (x *ProcessStatsResponse_Connections) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessStatsResponse_Connections.ProtoReflect.Descriptor instead.
func (*ProcessStatsResponse_Connections) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{33, 1}
}

func (x *ProcessStatsResponse_Connections) GetConcurrent() uint64 {
	if x != nil {
		return x.Concurrent
	}
	return 0
}

func (x *ProcessStatsResponse_Connections) GetMaxconcurrent() uint64 {
	if x != nil {
		return x.Maxconcurrent
	}
	return 0
}

type ProcessStatsResponse_Script struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pending   uint64 `protobuf:"varint,1,opt,name=pending,proto3" json:"pending,omitempty"`
	Running   uint64 `protobuf:"varint,2,opt,name=running,proto3" json:"running,omitempty"`
	Finished  uint64 `protobuf:"varint,3,opt,name=finished,proto3" json:"finished,omitempty"`
	Errors    uint64 `protobuf:"varint,4,opt,name=errors,proto3" json:"errors,omitempty"`
	Threads   uint64 `protobuf:"varint,5,opt,name=threads,proto3" json:"threads,omitempty"`
	Suspended uint64 `protobuf:"varint,6,opt,name=suspended,proto3" json:"suspended,omitempty"`
	Threadid  string `protobuf:"bytes,7,opt,name=threadid,proto3" json:"threadid,omitempty"`
}

func (x *ProcessStatsResponse_Script) Reset() {
	*x = ProcessStatsResponse_Script{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessStatsResponse_Script) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessStatsResponse_Script) ProtoMessage() {}

func (x *ProcessStatsResponse_Script) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessStatsResponse_Script.ProtoReflect.Descriptor instead.
func (*ProcessStatsResponse_Script) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{33, 2}
}

func (x *ProcessStatsResponse_Script) GetPending() uint64 {
	if x != nil {
		return x.Pending
	}
	return 0
}

func (x *ProcessStatsResponse_Script) GetRunning() uint64 {
	if x != nil {
		return x.Running
	}
	return 0
}

func (x *ProcessStatsResponse_Script) GetFinished() uint64 {
	if x != nil {
		return x.Finished
	}
	return 0
}

func (x *ProcessStatsResponse_Script) GetErrors() uint64 {
	if x != nil {
		return x.Errors
	}
	return 0
}

func (x *ProcessStatsResponse_Script) GetThreads() uint64 {
	if x != nil {
		return x.Threads
	}
	return 0
}

func (x *ProcessStatsResponse_Script) GetSuspended() uint64 {
	if x != nil {
		return x.Suspended
	}
	return 0
}

func (x *ProcessStatsResponse_Script) GetThreadid() string {
	if x != nil {
		return x.Threadid
	}
	return ""
}

type ProcessStatsResponse_Scripts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Connect    *ProcessStatsResponse_Script `protobuf:"bytes,1,opt,name=connect,proto3" json:"connect,omitempty"`
	Proxy      *ProcessStatsResponse_Script `protobuf:"bytes,2,opt,name=proxy,proto3" json:"proxy,omitempty"`
	Helo       *ProcessStatsResponse_Script `protobuf:"bytes,3,opt,name=helo,proto3" json:"helo,omitempty"`
	Auth       *ProcessStatsResponse_Script `protobuf:"bytes,4,opt,name=auth,proto3" json:"auth,omitempty"`
	Mailfrom   *ProcessStatsResponse_Script `protobuf:"bytes,5,opt,name=mailfrom,proto3" json:"mailfrom,omitempty"`
	Rcptto     *ProcessStatsResponse_Script `protobuf:"bytes,6,opt,name=rcptto,proto3" json:"rcptto,omitempty"`
	Eod        *ProcessStatsResponse_Script `protobuf:"bytes,7,opt,name=eod,proto3" json:"eod,omitempty"`
	Disconnect *ProcessStatsResponse_Script `protobuf:"bytes,8,opt,name=disconnect,proto3" json:"disconnect,omitempty"`
}

func (x *ProcessStatsResponse_Scripts) Reset() {
	*x = ProcessStatsResponse_Scripts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessStatsResponse_Scripts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessStatsResponse_Scripts) ProtoMessage() {}

func (x *ProcessStatsResponse_Scripts) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessStatsResponse_Scripts.ProtoReflect.Descriptor instead.
func (*ProcessStatsResponse_Scripts) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{33, 3}
}

func (x *ProcessStatsResponse_Scripts) GetConnect() *ProcessStatsResponse_Script {
	if x != nil {
		return x.Connect
	}
	return nil
}

func (x *ProcessStatsResponse_Scripts) GetProxy() *ProcessStatsResponse_Script {
	if x != nil {
		return x.Proxy
	}
	return nil
}

func (x *ProcessStatsResponse_Scripts) GetHelo() *ProcessStatsResponse_Script {
	if x != nil {
		return x.Helo
	}
	return nil
}

func (x *ProcessStatsResponse_Scripts) GetAuth() *ProcessStatsResponse_Script {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *ProcessStatsResponse_Scripts) GetMailfrom() *ProcessStatsResponse_Script {
	if x != nil {
		return x.Mailfrom
	}
	return nil
}

func (x *ProcessStatsResponse_Scripts) GetRcptto() *ProcessStatsResponse_Script {
	if x != nil {
		return x.Rcptto
	}
	return nil
}

func (x *ProcessStatsResponse_Scripts) GetEod() *ProcessStatsResponse_Script {
	if x != nil {
		return x.Eod
	}
	return nil
}

func (x *ProcessStatsResponse_Scripts) GetDisconnect() *ProcessStatsResponse_Script {
	if x != nil {
		return x.Disconnect
	}
	return nil
}

type ProcessStatsResponse_ServerCounters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Serverid    string                            `protobuf:"bytes,1,opt,name=serverid,proto3" json:"serverid,omitempty"`
	Connections *ProcessStatsResponse_Connections `protobuf:"bytes,2,opt,name=connections,proto3" json:"connections,omitempty"`
	Scripts     *ProcessStatsResponse_Scripts     `protobuf:"bytes,3,opt,name=scripts,proto3" json:"scripts,omitempty"`
}

func (x *ProcessStatsResponse_ServerCounters) Reset() {
	*x = ProcessStatsResponse_ServerCounters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessStatsResponse_ServerCounters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessStatsResponse_ServerCounters) ProtoMessage() {}

func (x *ProcessStatsResponse_ServerCounters) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessStatsResponse_ServerCounters.ProtoReflect.Descriptor instead.
func (*ProcessStatsResponse_ServerCounters) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{33, 4}
}

func (x *ProcessStatsResponse_ServerCounters) GetServerid() string {
	if x != nil {
		return x.Serverid
	}
	return ""
}

func (x *ProcessStatsResponse_ServerCounters) GetConnections() *ProcessStatsResponse_Connections {
	if x != nil {
		return x.Connections
	}
	return nil
}

func (x *ProcessStatsResponse_ServerCounters) GetScripts() *ProcessStatsResponse_Scripts {
	if x != nil {
		return x.Scripts
	}
	return nil
}

type ProcessStatsResponse_Resolver struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pending    uint64                                `protobuf:"varint,1,opt,name=pending,proto3" json:"pending,omitempty"`
	Dedup      uint64                                `protobuf:"varint,5,opt,name=dedup,proto3" json:"dedup,omitempty"`
	Running    uint64                                `protobuf:"varint,2,opt,name=running,proto3" json:"running,omitempty"`
	Maxrunning uint64                                `protobuf:"varint,4,opt,name=maxrunning,proto3" json:"maxrunning,omitempty"`
	Cache      *ProcessStatsResponse_Resolver_Cache  `protobuf:"bytes,3,opt,name=cache,proto3" json:"cache,omitempty"`
	Domain     *ProcessStatsResponse_Resolver_Domain `protobuf:"bytes,6,opt,name=domain,proto3" json:"domain,omitempty"`
}

func (x *ProcessStatsResponse_Resolver) Reset() {
	*x = ProcessStatsResponse_Resolver{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessStatsResponse_Resolver) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessStatsResponse_Resolver) ProtoMessage() {}

func (x *ProcessStatsResponse_Resolver) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessStatsResponse_Resolver.ProtoReflect.Descriptor instead.
func (*ProcessStatsResponse_Resolver) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{33, 5}
}

func (x *ProcessStatsResponse_Resolver) GetPending() uint64 {
	if x != nil {
		return x.Pending
	}
	return 0
}

func (x *ProcessStatsResponse_Resolver) GetDedup() uint64 {
	if x != nil {
		return x.Dedup
	}
	return 0
}

func (x *ProcessStatsResponse_Resolver) GetRunning() uint64 {
	if x != nil {
		return x.Running
	}
	return 0
}

func (x *ProcessStatsResponse_Resolver) GetMaxrunning() uint64 {
	if x != nil {
		return x.Maxrunning
	}
	return 0
}

func (x *ProcessStatsResponse_Resolver) GetCache() *ProcessStatsResponse_Resolver_Cache {
	if x != nil {
		return x.Cache
	}
	return nil
}

func (x *ProcessStatsResponse_Resolver) GetDomain() *ProcessStatsResponse_Resolver_Domain {
	if x != nil {
		return x.Domain
	}
	return nil
}

type ProcessStatsResponse_Queue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Loader      *ProcessStatsResponse_Queue_Loader      `protobuf:"bytes,1,opt,name=loader,proto3" json:"loader,omitempty"`
	Scripts     *ProcessStatsResponse_Queue_Scripts     `protobuf:"bytes,2,opt,name=scripts,proto3" json:"scripts,omitempty"`
	Queue       *ProcessStatsResponse_Queue_Queue       `protobuf:"bytes,3,opt,name=queue,proto3" json:"queue,omitempty"`
	Freeze      *ProcessStatsResponse_Queue_Freeze      `protobuf:"bytes,4,opt,name=freeze,proto3" json:"freeze,omitempty"`
	Policy      *ProcessStatsResponse_Queue_Policy      `protobuf:"bytes,5,opt,name=policy,proto3" json:"policy,omitempty"`
	Pickup      *ProcessStatsResponse_Queue_Pickup      `protobuf:"bytes,6,opt,name=pickup,proto3" json:"pickup,omitempty"`
	Connections *ProcessStatsResponse_Queue_Connections `protobuf:"bytes,7,opt,name=connections,proto3" json:"connections,omitempty"`
	Quota       *ProcessStatsResponse_Queue_Quota       `protobuf:"bytes,8,opt,name=quota,proto3" json:"quota,omitempty"`
	Delivery    *ProcessStatsResponse_Queue_Delivery    `protobuf:"bytes,9,opt,name=delivery,proto3" json:"delivery,omitempty"`
	Release     *ProcessStatsResponse_Queue_Release     `protobuf:"bytes,10,opt,name=release,proto3" json:"release,omitempty"`
}

func (x *ProcessStatsResponse_Queue) Reset() {
	*x = ProcessStatsResponse_Queue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessStatsResponse_Queue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessStatsResponse_Queue) ProtoMessage() {}

func (x *ProcessStatsResponse_Queue) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessStatsResponse_Queue.ProtoReflect.Descriptor instead.
func (*ProcessStatsResponse_Queue) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{33, 6}
}

func (x *ProcessStatsResponse_Queue) GetLoader() *ProcessStatsResponse_Queue_Loader {
	if x != nil {
		return x.Loader
	}
	return nil
}

func (x *ProcessStatsResponse_Queue) GetScripts() *ProcessStatsResponse_Queue_Scripts {
	if x != nil {
		return x.Scripts
	}
	return nil
}

func (x *ProcessStatsResponse_Queue) GetQueue() *ProcessStatsResponse_Queue_Queue {
	if x != nil {
		return x.Queue
	}
	return nil
}

func (x *ProcessStatsResponse_Queue) GetFreeze() *ProcessStatsResponse_Queue_Freeze {
	if x != nil {
		return x.Freeze
	}
	return nil
}

func (x *ProcessStatsResponse_Queue) GetPolicy() *ProcessStatsResponse_Queue_Policy {
	if x != nil {
		return x.Policy
	}
	return nil
}

func (x *ProcessStatsResponse_Queue) GetPickup() *ProcessStatsResponse_Queue_Pickup {
	if x != nil {
		return x.Pickup
	}
	return nil
}

func (x *ProcessStatsResponse_Queue) GetConnections() *ProcessStatsResponse_Queue_Connections {
	if x != nil {
		return x.Connections
	}
	return nil
}

func (x *ProcessStatsResponse_Queue) GetQuota() *ProcessStatsResponse_Queue_Quota {
	if x != nil {
		return x.Quota
	}
	return nil
}

func (x *ProcessStatsResponse_Queue) GetDelivery() *ProcessStatsResponse_Queue_Delivery {
	if x != nil {
		return x.Delivery
	}
	return nil
}

func (x *ProcessStatsResponse_Queue) GetRelease() *ProcessStatsResponse_Queue_Release {
	if x != nil {
		return x.Release
	}
	return nil
}

type ProcessStatsResponse_Threads struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scripts []*ProcessStatsResponse_Threads_Scripts `protobuf:"bytes,1,rep,name=scripts,proto3" json:"scripts,omitempty"`
}

func (x *ProcessStatsResponse_Threads) Reset() {
	*x = ProcessStatsResponse_Threads{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessStatsResponse_Threads) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessStatsResponse_Threads) ProtoMessage() {}

func (x *ProcessStatsResponse_Threads) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessStatsResponse_Threads.ProtoReflect.Descriptor instead.
func (*ProcessStatsResponse_Threads) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{33, 7}
}

func (x *ProcessStatsResponse_Threads) GetScripts() []*ProcessStatsResponse_Threads_Scripts {
	if x != nil {
		return x.Scripts
	}
	return nil
}

type ProcessStatsResponse_Process_Version struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Major uint64 `protobuf:"varint,1,opt,name=major,proto3" json:"major,omitempty"`
	Minor uint64 `protobuf:"varint,2,opt,name=minor,proto3" json:"minor,omitempty"`
	Patch uint64 `protobuf:"varint,3,opt,name=patch,proto3" json:"patch,omitempty"`
}

func (x *ProcessStatsResponse_Process_Version) Reset() {
	*x = ProcessStatsResponse_Process_Version{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessStatsResponse_Process_Version) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessStatsResponse_Process_Version) ProtoMessage() {}

func (x *ProcessStatsResponse_Process_Version) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessStatsResponse_Process_Version.ProtoReflect.Descriptor instead.
func (*ProcessStatsResponse_Process_Version) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{33, 0, 0}
}

func (x *ProcessStatsResponse_Process_Version) GetMajor() uint64 {
	if x != nil {
		return x.Major
	}
	return 0
}

func (x *ProcessStatsResponse_Process_Version) GetMinor() uint64 {
	if x != nil {
		return x.Minor
	}
	return 0
}

func (x *ProcessStatsResponse_Process_Version) GetPatch() uint64 {
	if x != nil {
		return x.Patch
	}
	return 0
}

type ProcessStatsResponse_Resolver_Cache struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Maxsize uint64 `protobuf:"varint,7,opt,name=maxsize,proto3" json:"maxsize,omitempty"`
	Size    uint64 `protobuf:"varint,1,opt,name=size,proto3" json:"size,omitempty"`
	Hits    uint64 `protobuf:"varint,2,opt,name=hits,proto3" json:"hits,omitempty"`
	Misses  uint64 `protobuf:"varint,3,opt,name=misses,proto3" json:"misses,omitempty"`
	Expires uint64 `protobuf:"varint,4,opt,name=expires,proto3" json:"expires,omitempty"`
	Evicts  uint64 `protobuf:"varint,5,opt,name=evicts,proto3" json:"evicts,omitempty"`
	Skips   uint64 `protobuf:"varint,6,opt,name=skips,proto3" json:"skips,omitempty"`
}

func (x *ProcessStatsResponse_Resolver_Cache) Reset() {
	*x = ProcessStatsResponse_Resolver_Cache{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessStatsResponse_Resolver_Cache) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessStatsResponse_Resolver_Cache) ProtoMessage() {}

func (x *ProcessStatsResponse_Resolver_Cache) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessStatsResponse_Resolver_Cache.ProtoReflect.Descriptor instead.
func (*ProcessStatsResponse_Resolver_Cache) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{33, 5, 0}
}

func (x *ProcessStatsResponse_Resolver_Cache) GetMaxsize() uint64 {
	if x != nil {
		return x.Maxsize
	}
	return 0
}

func (x *ProcessStatsResponse_Resolver_Cache) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *ProcessStatsResponse_Resolver_Cache) GetHits() uint64 {
	if x != nil {
		return x.Hits
	}
	return 0
}

func (x *ProcessStatsResponse_Resolver_Cache) GetMisses() uint64 {
	if x != nil {
		return x.Misses
	}
	return 0
}

func (x *ProcessStatsResponse_Resolver_Cache) GetExpires() uint64 {
	if x != nil {
		return x.Expires
	}
	return 0
}

func (x *ProcessStatsResponse_Resolver_Cache) GetEvicts() uint64 {
	if x != nil {
		return x.Evicts
	}
	return 0
}

func (x *ProcessStatsResponse_Resolver_Cache) GetSkips() uint64 {
	if x != nil {
		return x.Skips
	}
	return 0
}

type ProcessStatsResponse_Resolver_Domain struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cache *ProcessStatsResponse_Resolver_Domain_Cache `protobuf:"bytes,1,opt,name=cache,proto3" json:"cache,omitempty"`
}

func (x *ProcessStatsResponse_Resolver_Domain) Reset() {
	*x = ProcessStatsResponse_Resolver_Domain{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[140]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessStatsResponse_Resolver_Domain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessStatsResponse_Resolver_Domain) ProtoMessage() {}

func (x *ProcessStatsResponse_Resolver_Domain) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[140]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessStatsResponse_Resolver_Domain.ProtoReflect.Descriptor instead.
func (*ProcessStatsResponse_Resolver_Domain) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{33, 5, 1}
}

func (x *ProcessStatsResponse_Resolver_Domain) GetCache() *ProcessStatsResponse_Resolver_Domain_Cache {
	if x != nil {
		return x.Cache
	}
	return nil
}

type ProcessStatsResponse_Resolver_Domain_Cache struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Maxsize uint64 `protobuf:"varint,1,opt,name=maxsize,proto3" json:"maxsize,omitempty"`
	Size    uint64 `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	Hits    uint64 `protobuf:"varint,3,opt,name=hits,proto3" json:"hits,omitempty"`
	Misses  uint64 `protobuf:"varint,4,opt,name=misses,proto3" json:"misses,omitempty"`
	Expires uint64 `protobuf:"varint,5,opt,name=expires,proto3" json:"expires,omitempty"`
	Evicts  uint64 `protobuf:"varint,6,opt,name=evicts,proto3" json:"evicts,omitempty"`
}

func (x *ProcessStatsResponse_Resolver_Domain_Cache) Reset() {
	*x = ProcessStatsResponse_Resolver_Domain_Cache{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[141]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessStatsResponse_Resolver_Domain_Cache) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessStatsResponse_Resolver_Domain_Cache) ProtoMessage() {}

func (x *ProcessStatsResponse_Resolver_Domain_Cache) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[141]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessStatsResponse_Resolver_Domain_Cache.ProtoReflect.Descriptor instead.
func (*ProcessStatsResponse_Resolver_Domain_Cache) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{33, 5, 1, 0}
}

func (x *ProcessStatsResponse_Resolver_Domain_Cache) GetMaxsize() uint64 {
	if x != nil {
		return x.Maxsize
	}
	return 0
}

func (x *ProcessStatsResponse_Resolver_Domain_Cache) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *ProcessStatsResponse_Resolver_Domain_Cache) GetHits() uint64 {
	if x != nil {
		return x.Hits
	}
	return 0
}

func (x *ProcessStatsResponse_Resolver_Domain_Cache) GetMisses() uint64 {
	if x != nil {
		return x.Misses
	}
	return 0
}

func (x *ProcessStatsResponse_Resolver_Domain_Cache) GetExpires() uint64 {
	if x != nil {
		return x.Expires
	}
	return 0
}

func (x *ProcessStatsResponse_Resolver_Domain_Cache) GetEvicts() uint64 {
	if x != nil {
		return x.Evicts
	}
	return 0
}

type ProcessStatsResponse_Queue_Script struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pending   uint64 `protobuf:"varint,1,opt,name=pending,proto3" json:"pending,omitempty"`
	Running   uint64 `protobuf:"varint,2,opt,name=running,proto3" json:"running,omitempty"`
	Finished  uint64 `protobuf:"varint,3,opt,name=finished,proto3" json:"finished,omitempty"`
	Errors    uint64 `protobuf:"varint,4,opt,name=errors,proto3" json:"errors,omitempty"`
	Threads   uint64 `protobuf:"varint,5,opt,name=threads,proto3" json:"threads,omitempty"`
	Suspended uint64 `protobuf:"varint,6,opt,name=suspended,proto3" json:"suspended,omitempty"`
	Threadid  string `protobuf:"bytes,7,opt,name=threadid,proto3" json:"threadid,omitempty"`
}

func (x *ProcessStatsResponse_Queue_Script) Reset() {
	*x = ProcessStatsResponse_Queue_Script{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[142]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessStatsResponse_Queue_Script) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessStatsResponse_Queue_Script) ProtoMessage() {}

func (x *ProcessStatsResponse_Queue_Script) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[142]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessStatsResponse_Queue_Script.ProtoReflect.Descriptor instead.
func (*ProcessStatsResponse_Queue_Script) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{33, 6, 0}
}

func (x *ProcessStatsResponse_Queue_Script) GetPending() uint64 {
	if x != nil {
		return x.Pending
	}
	return 0
}

func (x *ProcessStatsResponse_Queue_Script) GetRunning() uint64 {
	if x != nil {
		return x.Running
	}
	return 0
}

func (x *ProcessStatsResponse_Queue_Script) GetFinished() uint64 {
	if x != nil {
		return x.Finished
	}
	return 0
}

func (x *ProcessStatsResponse_Queue_Script) GetErrors() uint64 {
	if x != nil {
		return x.Errors
	}
	return 0
}

func (x *ProcessStatsResponse_Queue_Script) GetThreads() uint64 {
	if x != nil {
		return x.Threads
	}
	return 0
}

func (x *ProcessStatsResponse_Queue_Script) GetSuspended() uint64 {
	if x != nil {
		return x.Suspended
	}
	return 0
}

func (x *ProcessStatsResponse_Queue_Script) GetThreadid() string {
	if x != nil {
		return x.Threadid
	}
	return ""
}

type ProcessStatsResponse_Queue_Scripts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Predelivery  *ProcessStatsResponse_Queue_Script `protobuf:"bytes,1,opt,name=predelivery,proto3" json:"predelivery,omitempty"`
	Postdelivery *ProcessStatsResponse_Queue_Script `protobuf:"bytes,2,opt,name=postdelivery,proto3" json:"postdelivery,omitempty"`
}

func (x *ProcessStatsResponse_Queue_Scripts) Reset() {
	*x = ProcessStatsResponse_Queue_Scripts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[143]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessStatsResponse_Queue_Scripts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessStatsResponse_Queue_Scripts) ProtoMessage() {}

func (x *ProcessStatsResponse_Queue_Scripts) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[143]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessStatsResponse_Queue_Scripts.ProtoReflect.Descriptor instead.
func (*ProcessStatsResponse_Queue_Scripts) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{33, 6, 1}
}

func (x *ProcessStatsResponse_Queue_Scripts) GetPredelivery() *ProcessStatsResponse_Queue_Script {
	if x != nil {
		return x.Predelivery
	}
	return nil
}

func (x *ProcessStatsResponse_Queue_Scripts) GetPostdelivery() *ProcessStatsResponse_Queue_Script {
	if x != nil {
		return x.Postdelivery
	}
	return nil
}

type ProcessStatsResponse_Queue_Loader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count     uint64 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	Pending   uint64 `protobuf:"varint,2,opt,name=pending,proto3" json:"pending,omitempty"`
	Active    uint64 `protobuf:"varint,3,opt,name=active,proto3" json:"active,omitempty"`
	Maxactive uint64 `protobuf:"varint,4,opt,name=maxactive,proto3" json:"maxactive,omitempty"`
}

func (x *ProcessStatsResponse_Queue_Loader) Reset() {
	*x = ProcessStatsResponse_Queue_Loader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[144]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessStatsResponse_Queue_Loader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessStatsResponse_Queue_Loader) ProtoMessage() {}

func (x *ProcessStatsResponse_Queue_Loader) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[144]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessStatsResponse_Queue_Loader.ProtoReflect.Descriptor instead.
func (*ProcessStatsResponse_Queue_Loader) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{33, 6, 2}
}

func (x *ProcessStatsResponse_Queue_Loader) GetCount() uint64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ProcessStatsResponse_Queue_Loader) GetPending() uint64 {
	if x != nil {
		return x.Pending
	}
	return 0
}

func (x *ProcessStatsResponse_Queue_Loader) GetActive() uint64 {
	if x != nil {
		return x.Active
	}
	return 0
}

func (x *ProcessStatsResponse_Queue_Loader) GetMaxactive() uint64 {
	if x != nil {
		return x.Maxactive
	}
	return 0
}

type ProcessStatsResponse_Queue_Queue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Defer  *ProcessStatsResponse_Queue_Queue_Defer  `protobuf:"bytes,1,opt,name=defer,proto3" json:"defer,omitempty"`
	Active *ProcessStatsResponse_Queue_Queue_Active `protobuf:"bytes,2,opt,name=active,proto3" json:"active,omitempty"`
}

func (x *ProcessStatsResponse_Queue_Queue) Reset() {
	*x = ProcessStatsResponse_Queue_Queue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[145]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessStatsResponse_Queue_Queue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessStatsResponse_Queue_Queue) ProtoMessage() {}

func (x *ProcessStatsResponse_Queue_Queue) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[145]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessStatsResponse_Queue_Queue.ProtoReflect.Descriptor instead.
func (*ProcessStatsResponse_Queue_Queue) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{33, 6, 3}
}

func (x *ProcessStatsResponse_Queue_Queue) GetDefer() *ProcessStatsResponse_Queue_Queue_Defer {
	if x != nil {
		return x.Defer
	}
	return nil
}

func (x *ProcessStatsResponse_Queue_Queue) GetActive() *ProcessStatsResponse_Queue_Queue_Active {
	if x != nil {
		return x.Active
	}
	return nil
}

type ProcessStatsResponse_Queue_Freeze struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hold   *ProcessStatsResponse_Queue_Freeze_Hold   `protobuf:"bytes,1,opt,name=hold,proto3" json:"hold,omitempty"`
	Update *ProcessStatsResponse_Queue_Freeze_Update `protobuf:"bytes,2,opt,name=update,proto3" json:"update,omitempty"`
}

func (x *ProcessStatsResponse_Queue_Freeze) Reset() {
	*x = ProcessStatsResponse_Queue_Freeze{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[146]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessStatsResponse_Queue_Freeze) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessStatsResponse_Queue_Freeze) ProtoMessage() {}

func (x *ProcessStatsResponse_Queue_Freeze) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[146]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessStatsResponse_Queue_Freeze.ProtoReflect.Descriptor instead.
func (*ProcessStatsResponse_Queue_Freeze) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{33, 6, 4}
}

func (x *ProcessStatsResponse_Queue_Freeze) GetHold() *ProcessStatsResponse_Queue_Freeze_Hold {
	if x != nil {
		return x.Hold
	}
	return nil
}

func (x *ProcessStatsResponse_Queue_Freeze) GetUpdate() *ProcessStatsResponse_Queue_Freeze_Update {
	if x != nil {
		return x.Update
	}
	return nil
}

type ProcessStatsResponse_Queue_Policy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Concurrency *ProcessStatsResponse_Queue_Policy_Concurrency `protobuf:"bytes,1,opt,name=concurrency,proto3" json:"concurrency,omitempty"`
	Rate        *ProcessStatsResponse_Queue_Policy_Rate        `protobuf:"bytes,2,opt,name=rate,proto3" json:"rate,omitempty"`
	Dynamic     *ProcessStatsResponse_Queue_Policy_Dynamic     `protobuf:"bytes,3,opt,name=dynamic,proto3" json:"dynamic,omitempty"`
}

func (x *ProcessStatsResponse_Queue_Policy) Reset() {
	*x = ProcessStatsResponse_Queue_Policy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[147]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessStatsResponse_Queue_Policy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessStatsResponse_Queue_Policy) ProtoMessage() {}

func (x *ProcessStatsResponse_Queue_Policy) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[147]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessStatsResponse_Queue_Policy.ProtoReflect.Descriptor instead.
func (*ProcessStatsResponse_Queue_Policy) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{33, 6, 5}
}

func (x *ProcessStatsResponse_Queue_Policy) GetConcurrency() *ProcessStatsResponse_Queue_Policy_Concurrency {
	if x != nil {
		return x.Concurrency
	}
	return nil
}

func (x *ProcessStatsResponse_Queue_Policy) GetRate() *ProcessStatsResponse_Queue_Policy_Rate {
	if x != nil {
		return x.Rate
	}
	return nil
}

func (x *ProcessStatsResponse_Queue_Policy) GetDynamic() *ProcessStatsResponse_Queue_Policy_Dynamic {
	if x != nil {
		return x.Dynamic
	}
	return nil
}

type ProcessStatsResponse_Queue_Pooling struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Size    uint64 `protobuf:"varint,1,opt,name=size,proto3" json:"size,omitempty"`
	Maxsize uint64 `protobuf:"varint,7,opt,name=maxsize,proto3" json:"maxsize,omitempty"`
	Hits    uint64 `protobuf:"varint,2,opt,name=hits,proto3" json:"hits,omitempty"`
	Misses  uint64 `protobuf:"varint,3,opt,name=misses,proto3" json:"misses,omitempty"`
	Expires uint64 `protobuf:"varint,4,opt,name=expires,proto3" json:"expires,omitempty"`
	Evicts  uint64 `protobuf:"varint,5,opt,name=evicts,proto3" json:"evicts,omitempty"`
	Skips   uint64 `protobuf:"varint,6,opt,name=skips,proto3" json:"skips,omitempty"`
}

func (x *ProcessStatsResponse_Queue_Pooling) Reset() {
	*x = ProcessStatsResponse_Queue_Pooling{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[148]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessStatsResponse_Queue_Pooling) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessStatsResponse_Queue_Pooling) ProtoMessage() {}

func (x *ProcessStatsResponse_Queue_Pooling) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[148]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessStatsResponse_Queue_Pooling.ProtoReflect.Descriptor instead.
func (*ProcessStatsResponse_Queue_Pooling) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{33, 6, 6}
}

func (x *ProcessStatsResponse_Queue_Pooling) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *ProcessStatsResponse_Queue_Pooling) GetMaxsize() uint64 {
	if x != nil {
		return x.Maxsize
	}
	return 0
}

func (x *ProcessStatsResponse_Queue_Pooling) GetHits() uint64 {
	if x != nil {
		return x.Hits
	}
	return 0
}

func (x *ProcessStatsResponse_Queue_Pooling) GetMisses() uint64 {
	if x != nil {
		return x.Misses
	}
	return 0
}

func (x *ProcessStatsResponse_Queue_Pooling) GetExpires() uint64 {
	if x != nil {
		return x.Expires
	}
	return 0
}

func (x *ProcessStatsResponse_Queue_Pooling) GetEvicts() uint64 {
	if x != nil {
		return x.Evicts
	}
	return 0
}

func (x *ProcessStatsResponse_Queue_Pooling) GetSkips() uint64 {
	if x != nil {
		return x.Skips
	}
	return 0
}

type ProcessStatsResponse_Queue_Connections struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Concurrent    uint64                              `protobuf:"varint,1,opt,name=concurrent,proto3" json:"concurrent,omitempty"`
	Maxconcurrent uint64                              `protobuf:"varint,3,opt,name=maxconcurrent,proto3" json:"maxconcurrent,omitempty"`
	Pooling       *ProcessStatsResponse_Queue_Pooling `protobuf:"bytes,2,opt,name=pooling,proto3" json:"pooling,omitempty"`
}

func (x *ProcessStatsResponse_Queue_Connections) Reset() {
	*x = ProcessStatsResponse_Queue_Connections{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[149]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessStatsResponse_Queue_Connections) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessStatsResponse_Queue_Connections) ProtoMessage() {}

func (x *ProcessStatsResponse_Queue_Connections) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[149]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessStatsResponse_Queue_Connections.ProtoReflect.Descriptor instead.
func (*ProcessStatsResponse_Queue_Connections) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{33, 6, 7}
}

func (x *ProcessStatsResponse_Queue_Connections) GetConcurrent() uint64 {
	if x != nil {
		return x.Concurrent
	}
	return 0
}

func (x *ProcessStatsResponse_Queue_Connections) GetMaxconcurrent() uint64 {
	if x != nil {
		return x.Maxconcurrent
	}
	return 0
}

func (x *ProcessStatsResponse_Queue_Connections) GetPooling() *ProcessStatsResponse_Queue_Pooling {
	if x != nil {
		return x.Pooling
	}
	return nil
}

type ProcessStatsResponse_Queue_Pickup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count   uint64 `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
	Skips   uint64 `protobuf:"varint,1,opt,name=skips,proto3" json:"skips,omitempty"`
	Misses  uint64 `protobuf:"varint,2,opt,name=misses,proto3" json:"misses,omitempty"`
	Pending uint64 `protobuf:"varint,4,opt,name=pending,proto3" json:"pending,omitempty"`
}

func (x *ProcessStatsResponse_Queue_Pickup) Reset() {
	*x = ProcessStatsResponse_Queue_Pickup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[150]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessStatsResponse_Queue_Pickup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessStatsResponse_Queue_Pickup) ProtoMessage() {}

func (x *ProcessStatsResponse_Queue_Pickup) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[150]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessStatsResponse_Queue_Pickup.ProtoReflect.Descriptor instead.
func (*ProcessStatsResponse_Queue_Pickup) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{33, 6, 8}
}

func (x *ProcessStatsResponse_Queue_Pickup) GetCount() uint64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ProcessStatsResponse_Queue_Pickup) GetSkips() uint64 {
	if x != nil {
		return x.Skips
	}
	return 0
}

func (x *ProcessStatsResponse_Queue_Pickup) GetMisses() uint64 {
	if x != nil {
		return x.Misses
	}
	return 0
}

func (x *ProcessStatsResponse_Queue_Pickup) GetPending() uint64 {
	if x != nil {
		return x.Pending
	}
	return 0
}

type ProcessStatsResponse_Queue_Quota struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Size uint64 `protobuf:"varint,1,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *ProcessStatsResponse_Queue_Quota) Reset() {
	*x = ProcessStatsResponse_Queue_Quota{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[151]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessStatsResponse_Queue_Quota) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessStatsResponse_Queue_Quota) ProtoMessage() {}

func (x *ProcessStatsResponse_Queue_Quota) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[151]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessStatsResponse_Queue_Quota.ProtoReflect.Descriptor instead.
func (*ProcessStatsResponse_Queue_Quota) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{33, 6, 9}
}

func (x *ProcessStatsResponse_Queue_Quota) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

type ProcessStatsResponse_Queue_Delivery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Delivered uint64 `protobuf:"varint,1,opt,name=delivered,proto3" json:"delivered,omitempty"`
	Delayed   uint64 `protobuf:"varint,2,opt,name=delayed,proto3" json:"delayed,omitempty"`
	Failed    uint64 `protobuf:"varint,3,opt,name=failed,proto3" json:"failed,omitempty"`
}

func (x *ProcessStatsResponse_Queue_Delivery) Reset() {
	*x = ProcessStatsResponse_Queue_Delivery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[152]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessStatsResponse_Queue_Delivery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessStatsResponse_Queue_Delivery) ProtoMessage() {}

func (x *ProcessStatsResponse_Queue_Delivery) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[152]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessStatsResponse_Queue_Delivery.ProtoReflect.Descriptor instead.
func (*ProcessStatsResponse_Queue_Delivery) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{33, 6, 10}
}

func (x *ProcessStatsResponse_Queue_Delivery) GetDelivered() uint64 {
	if x != nil {
		return x.Delivered
	}
	return 0
}

func (x *ProcessStatsResponse_Queue_Delivery) GetDelayed() uint64 {
	if x != nil {
		return x.Delayed
	}
	return 0
}

func (x *ProcessStatsResponse_Queue_Delivery) GetFailed() uint64 {
	if x != nil {
		return x.Failed
	}
	return 0
}

type ProcessStatsResponse_Queue_Release struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pending uint64 `protobuf:"varint,1,opt,name=pending,proto3" json:"pending,omitempty"`
}

func (x *ProcessStatsResponse_Queue_Release) Reset() {
	*x = ProcessStatsResponse_Queue_Release{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[153]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessStatsResponse_Queue_Release) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessStatsResponse_Queue_Release) ProtoMessage() {}

func (x *ProcessStatsResponse_Queue_Release) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[153]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessStatsResponse_Queue_Release.ProtoReflect.Descriptor instead.
func (*ProcessStatsResponse_Queue_Release) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{33, 6, 11}
}

func (x *ProcessStatsResponse_Queue_Release) GetPending() uint64 {
	if x != nil {
		return x.Pending
	}
	return 0
}

type ProcessStatsResponse_Queue_Queue_Defer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Size uint64 `protobuf:"varint,1,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *ProcessStatsResponse_Queue_Queue_Defer) Reset() {
	*x = ProcessStatsResponse_Queue_Queue_Defer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[154]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessStatsResponse_Queue_Queue_Defer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessStatsResponse_Queue_Queue_Defer) ProtoMessage() {}

func (x *ProcessStatsResponse_Queue_Queue_Defer) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[154]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessStatsResponse_Queue_Queue_Defer.ProtoReflect.Descriptor instead.
func (*ProcessStatsResponse_Queue_Queue_Defer) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{33, 6, 3, 0}
}

func (x *ProcessStatsResponse_Queue_Queue_Defer) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

type ProcessStatsResponse_Queue_Queue_Active struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Size       uint64                                              `protobuf:"varint,1,opt,name=size,proto3" json:"size,omitempty"`
	Priorities []*ProcessStatsResponse_Queue_Queue_Active_Priority `protobuf:"bytes,2,rep,name=priorities,proto3" json:"priorities,omitempty"`
}

func (x *ProcessStatsResponse_Queue_Queue_Active) Reset() {
	*x = ProcessStatsResponse_Queue_Queue_Active{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[155]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessStatsResponse_Queue_Queue_Active) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessStatsResponse_Queue_Queue_Active) ProtoMessage() {}

func (x *ProcessStatsResponse_Queue_Queue_Active) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[155]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessStatsResponse_Queue_Queue_Active.ProtoReflect.Descriptor instead.
func (*ProcessStatsResponse_Queue_Queue_Active) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{33, 6, 3, 1}
}

func (x *ProcessStatsResponse_Queue_Queue_Active) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *ProcessStatsResponse_Queue_Queue_Active) GetPriorities() []*ProcessStatsResponse_Queue_Queue_Active_Priority {
	if x != nil {
		return x.Priorities
	}
	return nil
}

type ProcessStatsResponse_Queue_Queue_Active_Priority struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Size uint64 `protobuf:"varint,1,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *ProcessStatsResponse_Queue_Queue_Active_Priority) Reset() {
	*x = ProcessStatsResponse_Queue_Queue_Active_Priority{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[156]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessStatsResponse_Queue_Queue_Active_Priority) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessStatsResponse_Queue_Queue_Active_Priority) ProtoMessage() {}

func (x *ProcessStatsResponse_Queue_Queue_Active_Priority) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[156]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessStatsResponse_Queue_Queue_Active_Priority.ProtoReflect.Descriptor instead.
func (*ProcessStatsResponse_Queue_Queue_Active_Priority) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{33, 6, 3, 1, 0}
}

func (x *ProcessStatsResponse_Queue_Queue_Active_Priority) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

type ProcessStatsResponse_Queue_Freeze_Hold struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Size uint64 `protobuf:"varint,1,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *ProcessStatsResponse_Queue_Freeze_Hold) Reset() {
	*x = ProcessStatsResponse_Queue_Freeze_Hold{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[157]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessStatsResponse_Queue_Freeze_Hold) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessStatsResponse_Queue_Freeze_Hold) ProtoMessage() {}

func (x *ProcessStatsResponse_Queue_Freeze_Hold) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[157]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessStatsResponse_Queue_Freeze_Hold.ProtoReflect.Descriptor instead.
func (*ProcessStatsResponse_Queue_Freeze_Hold) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{33, 6, 4, 0}
}

func (x *ProcessStatsResponse_Queue_Freeze_Hold) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

type ProcessStatsResponse_Queue_Freeze_Update struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Size    uint64 `protobuf:"varint,1,opt,name=size,proto3" json:"size,omitempty"`
	Pending uint64 `protobuf:"varint,2,opt,name=pending,proto3" json:"pending,omitempty"`
}

func (x *ProcessStatsResponse_Queue_Freeze_Update) Reset() {
	*x = ProcessStatsResponse_Queue_Freeze_Update{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[158]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessStatsResponse_Queue_Freeze_Update) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessStatsResponse_Queue_Freeze_Update) ProtoMessage() {}

func (x *ProcessStatsResponse_Queue_Freeze_Update) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[158]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessStatsResponse_Queue_Freeze_Update.ProtoReflect.Descriptor instead.
func (*ProcessStatsResponse_Queue_Freeze_Update) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{33, 6, 4, 1}
}

func (x *ProcessStatsResponse_Queue_Freeze_Update) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *ProcessStatsResponse_Queue_Freeze_Update) GetPending() uint64 {
	if x != nil {
		return x.Pending
	}
	return 0
}

type ProcessStatsResponse_Queue_Policy_Concurrency struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Counters uint64 `protobuf:"varint,1,opt,name=counters,proto3" json:"counters,omitempty"`
	Suspends uint64 `protobuf:"varint,2,opt,name=suspends,proto3" json:"suspends,omitempty"`
}

func (x *ProcessStatsResponse_Queue_Policy_Concurrency) Reset() {
	*x = ProcessStatsResponse_Queue_Policy_Concurrency{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[159]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessStatsResponse_Queue_Policy_Concurrency) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessStatsResponse_Queue_Policy_Concurrency) ProtoMessage() {}

func (x *ProcessStatsResponse_Queue_Policy_Concurrency) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[159]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessStatsResponse_Queue_Policy_Concurrency.ProtoReflect.Descriptor instead.
func (*ProcessStatsResponse_Queue_Policy_Concurrency) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{33, 6, 5, 0}
}

func (x *ProcessStatsResponse_Queue_Policy_Concurrency) GetCounters() uint64 {
	if x != nil {
		return x.Counters
	}
	return 0
}

func (x *ProcessStatsResponse_Queue_Policy_Concurrency) GetSuspends() uint64 {
	if x != nil {
		return x.Suspends
	}
	return 0
}

type ProcessStatsResponse_Queue_Policy_Rate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Buckets  uint64 `protobuf:"varint,1,opt,name=buckets,proto3" json:"buckets,omitempty"`
	Suspends uint64 `protobuf:"varint,2,opt,name=suspends,proto3" json:"suspends,omitempty"`
}

func (x *ProcessStatsResponse_Queue_Policy_Rate) Reset() {
	*x = ProcessStatsResponse_Queue_Policy_Rate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[160]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessStatsResponse_Queue_Policy_Rate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessStatsResponse_Queue_Policy_Rate) ProtoMessage() {}

func (x *ProcessStatsResponse_Queue_Policy_Rate) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[160]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessStatsResponse_Queue_Policy_Rate.ProtoReflect.Descriptor instead.
func (*ProcessStatsResponse_Queue_Policy_Rate) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{33, 6, 5, 1}
}

func (x *ProcessStatsResponse_Queue_Policy_Rate) GetBuckets() uint64 {
	if x != nil {
		return x.Buckets
	}
	return 0
}

func (x *ProcessStatsResponse_Queue_Policy_Rate) GetSuspends() uint64 {
	if x != nil {
		return x.Suspends
	}
	return 0
}

type ProcessStatsResponse_Queue_Policy_Dynamic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Suspends   uint64 `protobuf:"varint,1,opt,name=suspends,proto3" json:"suspends,omitempty"`
	Conditions uint64 `protobuf:"varint,2,opt,name=conditions,proto3" json:"conditions,omitempty"`
}

func (x *ProcessStatsResponse_Queue_Policy_Dynamic) Reset() {
	*x = ProcessStatsResponse_Queue_Policy_Dynamic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[161]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessStatsResponse_Queue_Policy_Dynamic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessStatsResponse_Queue_Policy_Dynamic) ProtoMessage() {}

func (x *ProcessStatsResponse_Queue_Policy_Dynamic) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[161]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessStatsResponse_Queue_Policy_Dynamic.ProtoReflect.Descriptor instead.
func (*ProcessStatsResponse_Queue_Policy_Dynamic) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{33, 6, 5, 2}
}

func (x *ProcessStatsResponse_Queue_Policy_Dynamic) GetSuspends() uint64 {
	if x != nil {
		return x.Suspends
	}
	return 0
}

func (x *ProcessStatsResponse_Queue_Policy_Dynamic) GetConditions() uint64 {
	if x != nil {
		return x.Conditions
	}
	return 0
}

type ProcessStatsResponse_Threads_Scripts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Pending     uint64 `protobuf:"varint,2,opt,name=pending,proto3" json:"pending,omitempty"`
	Rescheduled uint64 `protobuf:"varint,3,opt,name=rescheduled,proto3" json:"rescheduled,omitempty"`
	Running     uint64 `protobuf:"varint,4,opt,name=running,proto3" json:"running,omitempty"`
	Maxrunning  uint64 `protobuf:"varint,5,opt,name=maxrunning,proto3" json:"maxrunning,omitempty"`
	Scripts     uint64 `protobuf:"varint,6,opt,name=scripts,proto3" json:"scripts,omitempty"`
	Maxscripts  uint64 `protobuf:"varint,7,opt,name=maxscripts,proto3" json:"maxscripts,omitempty"`
}

func (x *ProcessStatsResponse_Threads_Scripts) Reset() {
	*x = ProcessStatsResponse_Threads_Scripts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[162]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessStatsResponse_Threads_Scripts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessStatsResponse_Threads_Scripts) ProtoMessage() {}

func (x *ProcessStatsResponse_Threads_Scripts) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[162]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessStatsResponse_Threads_Scripts.ProtoReflect.Descriptor instead.
func (*ProcessStatsResponse_Threads_Scripts) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{33, 7, 0}
}

func (x *ProcessStatsResponse_Threads_Scripts) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ProcessStatsResponse_Threads_Scripts) GetPending() uint64 {
	if x != nil {
		return x.Pending
	}
	return 0
}

func (x *ProcessStatsResponse_Threads_Scripts) GetRescheduled() uint64 {
	if x != nil {
		return x.Rescheduled
	}
	return 0
}

func (x *ProcessStatsResponse_Threads_Scripts) GetRunning() uint64 {
	if x != nil {
		return x.Running
	}
	return 0
}

func (x *ProcessStatsResponse_Threads_Scripts) GetMaxrunning() uint64 {
	if x != nil {
		return x.Maxrunning
	}
	return 0
}

func (x *ProcessStatsResponse_Threads_Scripts) GetScripts() uint64 {
	if x != nil {
		return x.Scripts
	}
	return 0
}

func (x *ProcessStatsResponse_Threads_Scripts) GetMaxscripts() uint64 {
	if x != nil {
		return x.Maxscripts
	}
	return 0
}

type HSLMemoryListRequest_Condition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key *StringMatch `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *HSLMemoryListRequest_Condition) Reset() {
	*x = HSLMemoryListRequest_Condition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[163]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HSLMemoryListRequest_Condition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HSLMemoryListRequest_Condition) ProtoMessage() {}

func (x *HSLMemoryListRequest_Condition) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[163]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HSLMemoryListRequest_Condition.ProtoReflect.Descriptor instead.
func (*HSLMemoryListRequest_Condition) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{38, 0}
}

func (x *HSLMemoryListRequest_Condition) GetKey() *StringMatch {
	if x != nil {
		return x.Key
	}
	return nil
}

type HSLMemoryListRequest_Paging struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Offset uint64 `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit  uint64 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *HSLMemoryListRequest_Paging) Reset() {
	*x = HSLMemoryListRequest_Paging{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[164]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HSLMemoryListRequest_Paging) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HSLMemoryListRequest_Paging) ProtoMessage() {}

func (x *HSLMemoryListRequest_Paging) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[164]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HSLMemoryListRequest_Paging.ProtoReflect.Descriptor instead.
func (*HSLMemoryListRequest_Paging) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{38, 1}
}

func (x *HSLMemoryListRequest_Paging) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *HSLMemoryListRequest_Paging) GetLimit() uint64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type SuspendRequest_Condition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transportid     *StringValue `protobuf:"bytes,1,opt,name=transportid,proto3" json:"transportid,omitempty"`
	Localips        []string     `protobuf:"bytes,2,rep,name=localips,proto3" json:"localips,omitempty"`
	Remoteip        *StringValue `protobuf:"bytes,3,opt,name=remoteip,proto3" json:"remoteip,omitempty"`
	Remotemx        *StringValue `protobuf:"bytes,4,opt,name=remotemx,proto3" json:"remotemx,omitempty"`
	Recipientdomain *StringValue `protobuf:"bytes,5,opt,name=recipientdomain,proto3" json:"recipientdomain,omitempty"`
	Jobid           *StringValue `protobuf:"bytes,6,opt,name=jobid,proto3" json:"jobid,omitempty"`
	Grouping        *StringValue `protobuf:"bytes,9,opt,name=grouping,proto3" json:"grouping,omitempty"`
	Tag             *StringValue `protobuf:"bytes,7,opt,name=tag,proto3" json:"tag,omitempty"`
	Pickup          bool         `protobuf:"varint,8,opt,name=pickup,proto3" json:"pickup,omitempty"`
}

func (x *SuspendRequest_Condition) Reset() {
	*x = SuspendRequest_Condition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[165]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuspendRequest_Condition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuspendRequest_Condition) ProtoMessage() {}

func (x *SuspendRequest_Condition) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[165]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuspendRequest_Condition.ProtoReflect.Descriptor instead.
func (*SuspendRequest_Condition) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{44, 0}
}

func (x *SuspendRequest_Condition) GetTransportid() *StringValue {
	if x != nil {
		return x.Transportid
	}
	return nil
}

func (x *SuspendRequest_Condition) GetLocalips() []string {
	if x != nil {
		return x.Localips
	}
	return nil
}

func (x *SuspendRequest_Condition) GetRemoteip() *StringValue {
	if x != nil {
		return x.Remoteip
	}
	return nil
}

func (x *SuspendRequest_Condition) GetRemotemx() *StringValue {
	if x != nil {
		return x.Remotemx
	}
	return nil
}

func (x *SuspendRequest_Condition) GetRecipientdomain() *StringValue {
	if x != nil {
		return x.Recipientdomain
	}
	return nil
}

func (x *SuspendRequest_Condition) GetJobid() *StringValue {
	if x != nil {
		return x.Jobid
	}
	return nil
}

func (x *SuspendRequest_Condition) GetGrouping() *StringValue {
	if x != nil {
		return x.Grouping
	}
	return nil
}

func (x *SuspendRequest_Condition) GetTag() *StringValue {
	if x != nil {
		return x.Tag
	}
	return nil
}

func (x *SuspendRequest_Condition) GetPickup() bool {
	if x != nil {
		return x.Pickup
	}
	return false
}

type SuspendRequest_Paging struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit uint64 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *SuspendRequest_Paging) Reset() {
	*x = SuspendRequest_Paging{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[166]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuspendRequest_Paging) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuspendRequest_Paging) ProtoMessage() {}

func (x *SuspendRequest_Paging) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[166]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuspendRequest_Paging.ProtoReflect.Descriptor instead.
func (*SuspendRequest_Paging) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{44, 1}
}

func (x *SuspendRequest_Paging) GetLimit() uint64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type SuspendResponse_Item struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source          SuspendResponse_Source `protobuf:"varint,1,opt,name=source,proto3,enum=smtpd.SuspendResponse_Source" json:"source,omitempty"`
	Id              string                 `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Transportid     *StringValue           `protobuf:"bytes,3,opt,name=transportid,proto3" json:"transportid,omitempty"`
	Localip         *StringValue           `protobuf:"bytes,4,opt,name=localip,proto3" json:"localip,omitempty"`
	Remoteip        *StringValue           `protobuf:"bytes,5,opt,name=remoteip,proto3" json:"remoteip,omitempty"`
	Remotemx        *StringValue           `protobuf:"bytes,6,opt,name=remotemx,proto3" json:"remotemx,omitempty"`
	Recipientdomain *StringValue           `protobuf:"bytes,7,opt,name=recipientdomain,proto3" json:"recipientdomain,omitempty"`
	Jobid           *StringValue           `protobuf:"bytes,8,opt,name=jobid,proto3" json:"jobid,omitempty"`
	Grouping        *StringValue           `protobuf:"bytes,11,opt,name=grouping,proto3" json:"grouping,omitempty"`
	Ttl             float64                `protobuf:"fixed64,9,opt,name=ttl,proto3" json:"ttl,omitempty"`
	Tag             *StringValue           `protobuf:"bytes,10,opt,name=tag,proto3" json:"tag,omitempty"`
}

func (x *SuspendResponse_Item) Reset() {
	*x = SuspendResponse_Item{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[167]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuspendResponse_Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuspendResponse_Item) ProtoMessage() {}

func (x *SuspendResponse_Item) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[167]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuspendResponse_Item.ProtoReflect.Descriptor instead.
func (*SuspendResponse_Item) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{45, 0}
}

func (x *SuspendResponse_Item) GetSource() SuspendResponse_Source {
	if x != nil {
		return x.Source
	}
	return SuspendResponse_STATIC
}

func (x *SuspendResponse_Item) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SuspendResponse_Item) GetTransportid() *StringValue {
	if x != nil {
		return x.Transportid
	}
	return nil
}

func (x *SuspendResponse_Item) GetLocalip() *StringValue {
	if x != nil {
		return x.Localip
	}
	return nil
}

func (x *SuspendResponse_Item) GetRemoteip() *StringValue {
	if x != nil {
		return x.Remoteip
	}
	return nil
}

func (x *SuspendResponse_Item) GetRemotemx() *StringValue {
	if x != nil {
		return x.Remotemx
	}
	return nil
}

func (x *SuspendResponse_Item) GetRecipientdomain() *StringValue {
	if x != nil {
		return x.Recipientdomain
	}
	return nil
}

func (x *SuspendResponse_Item) GetJobid() *StringValue {
	if x != nil {
		return x.Jobid
	}
	return nil
}

func (x *SuspendResponse_Item) GetGrouping() *StringValue {
	if x != nil {
		return x.Grouping
	}
	return nil
}

func (x *SuspendResponse_Item) GetTtl() float64 {
	if x != nil {
		return x.Ttl
	}
	return 0
}

func (x *SuspendResponse_Item) GetTag() *StringValue {
	if x != nil {
		return x.Tag
	}
	return nil
}

type PolicyConditionAddRequest_Fields struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transportid     bool `protobuf:"varint,1,opt,name=transportid,proto3" json:"transportid,omitempty"`
	Localip         bool `protobuf:"varint,2,opt,name=localip,proto3" json:"localip,omitempty"`
	Remoteip        bool `protobuf:"varint,3,opt,name=remoteip,proto3" json:"remoteip,omitempty"`
	Remotemx        bool `protobuf:"varint,4,opt,name=remotemx,proto3" json:"remotemx,omitempty"`
	Recipientdomain bool `protobuf:"varint,5,opt,name=recipientdomain,proto3" json:"recipientdomain,omitempty"`
	Jobid           bool `protobuf:"varint,6,opt,name=jobid,proto3" json:"jobid,omitempty"`
	Grouping        bool `protobuf:"varint,7,opt,name=grouping,proto3" json:"grouping,omitempty"`
}

func (x *PolicyConditionAddRequest_Fields) Reset() {
	*x = PolicyConditionAddRequest_Fields{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[168]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyConditionAddRequest_Fields) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyConditionAddRequest_Fields) ProtoMessage() {}

func (x *PolicyConditionAddRequest_Fields) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[168]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyConditionAddRequest_Fields.ProtoReflect.Descriptor instead.
func (*PolicyConditionAddRequest_Fields) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{52, 0}
}

func (x *PolicyConditionAddRequest_Fields) GetTransportid() bool {
	if x != nil {
		return x.Transportid
	}
	return false
}

func (x *PolicyConditionAddRequest_Fields) GetLocalip() bool {
	if x != nil {
		return x.Localip
	}
	return false
}

func (x *PolicyConditionAddRequest_Fields) GetRemoteip() bool {
	if x != nil {
		return x.Remoteip
	}
	return false
}

func (x *PolicyConditionAddRequest_Fields) GetRemotemx() bool {
	if x != nil {
		return x.Remotemx
	}
	return false
}

func (x *PolicyConditionAddRequest_Fields) GetRecipientdomain() bool {
	if x != nil {
		return x.Recipientdomain
	}
	return false
}

func (x *PolicyConditionAddRequest_Fields) GetJobid() bool {
	if x != nil {
		return x.Jobid
	}
	return false
}

func (x *PolicyConditionAddRequest_Fields) GetGrouping() bool {
	if x != nil {
		return x.Grouping
	}
	return false
}

type PolicyConditionAddRequest_If struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transportid     *StringValue `protobuf:"bytes,1,opt,name=transportid,proto3" json:"transportid,omitempty"`
	Localip         *StringValue `protobuf:"bytes,2,opt,name=localip,proto3" json:"localip,omitempty"`
	Remoteip        *StringValue `protobuf:"bytes,3,opt,name=remoteip,proto3" json:"remoteip,omitempty"`
	Remotemx        *StringValue `protobuf:"bytes,4,opt,name=remotemx,proto3" json:"remotemx,omitempty"`
	Recipientdomain *StringValue `protobuf:"bytes,5,opt,name=recipientdomain,proto3" json:"recipientdomain,omitempty"`
	Jobid           *StringValue `protobuf:"bytes,6,opt,name=jobid,proto3" json:"jobid,omitempty"`
	Grouping        *StringValue `protobuf:"bytes,7,opt,name=grouping,proto3" json:"grouping,omitempty"`
}

func (x *PolicyConditionAddRequest_If) Reset() {
	*x = PolicyConditionAddRequest_If{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[169]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyConditionAddRequest_If) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyConditionAddRequest_If) ProtoMessage() {}

func (x *PolicyConditionAddRequest_If) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[169]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyConditionAddRequest_If.ProtoReflect.Descriptor instead.
func (*PolicyConditionAddRequest_If) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{52, 1}
}

func (x *PolicyConditionAddRequest_If) GetTransportid() *StringValue {
	if x != nil {
		return x.Transportid
	}
	return nil
}

func (x *PolicyConditionAddRequest_If) GetLocalip() *StringValue {
	if x != nil {
		return x.Localip
	}
	return nil
}

func (x *PolicyConditionAddRequest_If) GetRemoteip() *StringValue {
	if x != nil {
		return x.Remoteip
	}
	return nil
}

func (x *PolicyConditionAddRequest_If) GetRemotemx() *StringValue {
	if x != nil {
		return x.Remotemx
	}
	return nil
}

func (x *PolicyConditionAddRequest_If) GetRecipientdomain() *StringValue {
	if x != nil {
		return x.Recipientdomain
	}
	return nil
}

func (x *PolicyConditionAddRequest_If) GetJobid() *StringValue {
	if x != nil {
		return x.Jobid
	}
	return nil
}

func (x *PolicyConditionAddRequest_If) GetGrouping() *StringValue {
	if x != nil {
		return x.Grouping
	}
	return nil
}

type PolicyConditionAddRequest_Then struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rate        *PolicyConditionAddRequest_Then_Rate `protobuf:"bytes,1,opt,name=rate,proto3" json:"rate,omitempty"`
	Concurrency uint64                               `protobuf:"varint,2,opt,name=concurrency,proto3" json:"concurrency,omitempty"`
	Tag         *StringValue                         `protobuf:"bytes,3,opt,name=tag,proto3" json:"tag,omitempty"`
	Stop        bool                                 `protobuf:"varint,4,opt,name=stop,proto3" json:"stop,omitempty"`
	Properties  map[string]string                    `protobuf:"bytes,5,rep,name=properties,proto3" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PolicyConditionAddRequest_Then) Reset() {
	*x = PolicyConditionAddRequest_Then{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[170]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyConditionAddRequest_Then) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyConditionAddRequest_Then) ProtoMessage() {}

func (x *PolicyConditionAddRequest_Then) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[170]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyConditionAddRequest_Then.ProtoReflect.Descriptor instead.
func (*PolicyConditionAddRequest_Then) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{52, 2}
}

func (x *PolicyConditionAddRequest_Then) GetRate() *PolicyConditionAddRequest_Then_Rate {
	if x != nil {
		return x.Rate
	}
	return nil
}

func (x *PolicyConditionAddRequest_Then) GetConcurrency() uint64 {
	if x != nil {
		return x.Concurrency
	}
	return 0
}

func (x *PolicyConditionAddRequest_Then) GetTag() *StringValue {
	if x != nil {
		return x.Tag
	}
	return nil
}

func (x *PolicyConditionAddRequest_Then) GetStop() bool {
	if x != nil {
		return x.Stop
	}
	return false
}

func (x *PolicyConditionAddRequest_Then) GetProperties() map[string]string {
	if x != nil {
		return x.Properties
	}
	return nil
}

type PolicyConditionAddRequest_Then_Rate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count    uint64  `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	Interval float64 `protobuf:"fixed64,2,opt,name=interval,proto3" json:"interval,omitempty"`
}

func (x *PolicyConditionAddRequest_Then_Rate) Reset() {
	*x = PolicyConditionAddRequest_Then_Rate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[171]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyConditionAddRequest_Then_Rate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyConditionAddRequest_Then_Rate) ProtoMessage() {}

func (x *PolicyConditionAddRequest_Then_Rate) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[171]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyConditionAddRequest_Then_Rate.ProtoReflect.Descriptor instead.
func (*PolicyConditionAddRequest_Then_Rate) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{52, 2, 0}
}

func (x *PolicyConditionAddRequest_Then_Rate) GetCount() uint64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *PolicyConditionAddRequest_Then_Rate) GetInterval() float64 {
	if x != nil {
		return x.Interval
	}
	return 0
}

type PolicyConditionUpdateRequest_Then struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rate        *PolicyConditionUpdateRequest_Then_Rate `protobuf:"bytes,1,opt,name=rate,proto3" json:"rate,omitempty"`
	Concurrency uint64                                  `protobuf:"varint,2,opt,name=concurrency,proto3" json:"concurrency,omitempty"`
	Tag         *StringValue                            `protobuf:"bytes,3,opt,name=tag,proto3" json:"tag,omitempty"`
	Stop        bool                                    `protobuf:"varint,4,opt,name=stop,proto3" json:"stop,omitempty"`
}

func (x *PolicyConditionUpdateRequest_Then) Reset() {
	*x = PolicyConditionUpdateRequest_Then{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[173]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyConditionUpdateRequest_Then) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyConditionUpdateRequest_Then) ProtoMessage() {}

func (x *PolicyConditionUpdateRequest_Then) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[173]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyConditionUpdateRequest_Then.ProtoReflect.Descriptor instead.
func (*PolicyConditionUpdateRequest_Then) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{54, 0}
}

func (x *PolicyConditionUpdateRequest_Then) GetRate() *PolicyConditionUpdateRequest_Then_Rate {
	if x != nil {
		return x.Rate
	}
	return nil
}

func (x *PolicyConditionUpdateRequest_Then) GetConcurrency() uint64 {
	if x != nil {
		return x.Concurrency
	}
	return 0
}

func (x *PolicyConditionUpdateRequest_Then) GetTag() *StringValue {
	if x != nil {
		return x.Tag
	}
	return nil
}

func (x *PolicyConditionUpdateRequest_Then) GetStop() bool {
	if x != nil {
		return x.Stop
	}
	return false
}

type PolicyConditionUpdateRequest_Then_Rate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count    uint64  `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	Interval float64 `protobuf:"fixed64,2,opt,name=interval,proto3" json:"interval,omitempty"`
}

func (x *PolicyConditionUpdateRequest_Then_Rate) Reset() {
	*x = PolicyConditionUpdateRequest_Then_Rate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[174]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyConditionUpdateRequest_Then_Rate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyConditionUpdateRequest_Then_Rate) ProtoMessage() {}

func (x *PolicyConditionUpdateRequest_Then_Rate) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[174]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyConditionUpdateRequest_Then_Rate.ProtoReflect.Descriptor instead.
func (*PolicyConditionUpdateRequest_Then_Rate) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{54, 0, 0}
}

func (x *PolicyConditionUpdateRequest_Then_Rate) GetCount() uint64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *PolicyConditionUpdateRequest_Then_Rate) GetInterval() float64 {
	if x != nil {
		return x.Interval
	}
	return 0
}

type PolicyConditionResponse_Item struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     string                               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Fields *PolicyConditionResponse_Item_Fields `protobuf:"bytes,2,opt,name=fields,proto3" json:"fields,omitempty"`
	If     *PolicyConditionResponse_Item_If     `protobuf:"bytes,3,opt,name=if,proto3" json:"if,omitempty"`
	Then   *PolicyConditionResponse_Item_Then   `protobuf:"bytes,4,opt,name=then,proto3" json:"then,omitempty"`
	Ttl    float64                              `protobuf:"fixed64,5,opt,name=ttl,proto3" json:"ttl,omitempty"`
}

func (x *PolicyConditionResponse_Item) Reset() {
	*x = PolicyConditionResponse_Item{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[175]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyConditionResponse_Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyConditionResponse_Item) ProtoMessage() {}

func (x *PolicyConditionResponse_Item) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[175]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyConditionResponse_Item.ProtoReflect.Descriptor instead.
func (*PolicyConditionResponse_Item) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{58, 0}
}

func (x *PolicyConditionResponse_Item) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PolicyConditionResponse_Item) GetFields() *PolicyConditionResponse_Item_Fields {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *PolicyConditionResponse_Item) GetIf() *PolicyConditionResponse_Item_If {
	if x != nil {
		return x.If
	}
	return nil
}

func (x *PolicyConditionResponse_Item) GetThen() *PolicyConditionResponse_Item_Then {
	if x != nil {
		return x.Then
	}
	return nil
}

func (x *PolicyConditionResponse_Item) GetTtl() float64 {
	if x != nil {
		return x.Ttl
	}
	return 0
}

type PolicyConditionResponse_Item_Fields struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transportid     bool `protobuf:"varint,1,opt,name=transportid,proto3" json:"transportid,omitempty"`
	Localip         bool `protobuf:"varint,2,opt,name=localip,proto3" json:"localip,omitempty"`
	Remoteip        bool `protobuf:"varint,3,opt,name=remoteip,proto3" json:"remoteip,omitempty"`
	Remotemx        bool `protobuf:"varint,4,opt,name=remotemx,proto3" json:"remotemx,omitempty"`
	Recipientdomain bool `protobuf:"varint,5,opt,name=recipientdomain,proto3" json:"recipientdomain,omitempty"`
	Jobid           bool `protobuf:"varint,6,opt,name=jobid,proto3" json:"jobid,omitempty"`
	Grouping        bool `protobuf:"varint,7,opt,name=grouping,proto3" json:"grouping,omitempty"`
}

func (x *PolicyConditionResponse_Item_Fields) Reset() {
	*x = PolicyConditionResponse_Item_Fields{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[176]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyConditionResponse_Item_Fields) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyConditionResponse_Item_Fields) ProtoMessage() {}

func (x *PolicyConditionResponse_Item_Fields) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[176]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyConditionResponse_Item_Fields.ProtoReflect.Descriptor instead.
func (*PolicyConditionResponse_Item_Fields) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{58, 0, 0}
}

func (x *PolicyConditionResponse_Item_Fields) GetTransportid() bool {
	if x != nil {
		return x.Transportid
	}
	return false
}

func (x *PolicyConditionResponse_Item_Fields) GetLocalip() bool {
	if x != nil {
		return x.Localip
	}
	return false
}

func (x *PolicyConditionResponse_Item_Fields) GetRemoteip() bool {
	if x != nil {
		return x.Remoteip
	}
	return false
}

func (x *PolicyConditionResponse_Item_Fields) GetRemotemx() bool {
	if x != nil {
		return x.Remotemx
	}
	return false
}

func (x *PolicyConditionResponse_Item_Fields) GetRecipientdomain() bool {
	if x != nil {
		return x.Recipientdomain
	}
	return false
}

func (x *PolicyConditionResponse_Item_Fields) GetJobid() bool {
	if x != nil {
		return x.Jobid
	}
	return false
}

func (x *PolicyConditionResponse_Item_Fields) GetGrouping() bool {
	if x != nil {
		return x.Grouping
	}
	return false
}

type PolicyConditionResponse_Item_If struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transportid     *StringValue `protobuf:"bytes,1,opt,name=transportid,proto3" json:"transportid,omitempty"`
	Localip         *StringValue `protobuf:"bytes,2,opt,name=localip,proto3" json:"localip,omitempty"`
	Remoteip        *StringValue `protobuf:"bytes,3,opt,name=remoteip,proto3" json:"remoteip,omitempty"`
	Remotemx        *StringValue `protobuf:"bytes,4,opt,name=remotemx,proto3" json:"remotemx,omitempty"`
	Recipientdomain *StringValue `protobuf:"bytes,5,opt,name=recipientdomain,proto3" json:"recipientdomain,omitempty"`
	Jobid           *StringValue `protobuf:"bytes,6,opt,name=jobid,proto3" json:"jobid,omitempty"`
	Grouping        *StringValue `protobuf:"bytes,7,opt,name=grouping,proto3" json:"grouping,omitempty"`
}

func (x *PolicyConditionResponse_Item_If) Reset() {
	*x = PolicyConditionResponse_Item_If{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[177]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyConditionResponse_Item_If) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyConditionResponse_Item_If) ProtoMessage() {}

func (x *PolicyConditionResponse_Item_If) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[177]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyConditionResponse_Item_If.ProtoReflect.Descriptor instead.
func (*PolicyConditionResponse_Item_If) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{58, 0, 1}
}

func (x *PolicyConditionResponse_Item_If) GetTransportid() *StringValue {
	if x != nil {
		return x.Transportid
	}
	return nil
}

func (x *PolicyConditionResponse_Item_If) GetLocalip() *StringValue {
	if x != nil {
		return x.Localip
	}
	return nil
}

func (x *PolicyConditionResponse_Item_If) GetRemoteip() *StringValue {
	if x != nil {
		return x.Remoteip
	}
	return nil
}

func (x *PolicyConditionResponse_Item_If) GetRemotemx() *StringValue {
	if x != nil {
		return x.Remotemx
	}
	return nil
}

func (x *PolicyConditionResponse_Item_If) GetRecipientdomain() *StringValue {
	if x != nil {
		return x.Recipientdomain
	}
	return nil
}

func (x *PolicyConditionResponse_Item_If) GetJobid() *StringValue {
	if x != nil {
		return x.Jobid
	}
	return nil
}

func (x *PolicyConditionResponse_Item_If) GetGrouping() *StringValue {
	if x != nil {
		return x.Grouping
	}
	return nil
}

type PolicyConditionResponse_Item_Then struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rate        *PolicyConditionResponse_Item_Then_Rate `protobuf:"bytes,1,opt,name=rate,proto3" json:"rate,omitempty"`
	Concurrency uint64                                  `protobuf:"varint,2,opt,name=concurrency,proto3" json:"concurrency,omitempty"`
	Tag         *StringValue                            `protobuf:"bytes,3,opt,name=tag,proto3" json:"tag,omitempty"`
	Stop        bool                                    `protobuf:"varint,4,opt,name=stop,proto3" json:"stop,omitempty"`
	Properties  map[string]string                       `protobuf:"bytes,5,rep,name=properties,proto3" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PolicyConditionResponse_Item_Then) Reset() {
	*x = PolicyConditionResponse_Item_Then{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[178]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyConditionResponse_Item_Then) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyConditionResponse_Item_Then) ProtoMessage() {}

func (x *PolicyConditionResponse_Item_Then) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[178]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyConditionResponse_Item_Then.ProtoReflect.Descriptor instead.
func (*PolicyConditionResponse_Item_Then) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{58, 0, 2}
}

func (x *PolicyConditionResponse_Item_Then) GetRate() *PolicyConditionResponse_Item_Then_Rate {
	if x != nil {
		return x.Rate
	}
	return nil
}

func (x *PolicyConditionResponse_Item_Then) GetConcurrency() uint64 {
	if x != nil {
		return x.Concurrency
	}
	return 0
}

func (x *PolicyConditionResponse_Item_Then) GetTag() *StringValue {
	if x != nil {
		return x.Tag
	}
	return nil
}

func (x *PolicyConditionResponse_Item_Then) GetStop() bool {
	if x != nil {
		return x.Stop
	}
	return false
}

func (x *PolicyConditionResponse_Item_Then) GetProperties() map[string]string {
	if x != nil {
		return x.Properties
	}
	return nil
}

type PolicyConditionResponse_Item_Then_Rate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count    uint64  `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	Interval float64 `protobuf:"fixed64,2,opt,name=interval,proto3" json:"interval,omitempty"`
}

func (x *PolicyConditionResponse_Item_Then_Rate) Reset() {
	*x = PolicyConditionResponse_Item_Then_Rate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[179]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyConditionResponse_Item_Then_Rate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyConditionResponse_Item_Then_Rate) ProtoMessage() {}

func (x *PolicyConditionResponse_Item_Then_Rate) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[179]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyConditionResponse_Item_Then_Rate.ProtoReflect.Descriptor instead.
func (*PolicyConditionResponse_Item_Then_Rate) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{58, 0, 2, 0}
}

func (x *PolicyConditionResponse_Item_Then_Rate) GetCount() uint64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *PolicyConditionResponse_Item_Then_Rate) GetInterval() float64 {
	if x != nil {
		return x.Interval
	}
	return 0
}

type ServerConnectionsListRequest_Condition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Connectionid string `protobuf:"bytes,1,opt,name=connectionid,proto3" json:"connectionid,omitempty"`
	Remoteip     string `protobuf:"bytes,2,opt,name=remoteip,proto3" json:"remoteip,omitempty"`
	Serverid     string `protobuf:"bytes,3,opt,name=serverid,proto3" json:"serverid,omitempty"`
	Localip      string `protobuf:"bytes,4,opt,name=localip,proto3" json:"localip,omitempty"`
}

func (x *ServerConnectionsListRequest_Condition) Reset() {
	*x = ServerConnectionsListRequest_Condition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[181]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerConnectionsListRequest_Condition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerConnectionsListRequest_Condition) ProtoMessage() {}

func (x *ServerConnectionsListRequest_Condition) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[181]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerConnectionsListRequest_Condition.ProtoReflect.Descriptor instead.
func (*ServerConnectionsListRequest_Condition) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{63, 0}
}

func (x *ServerConnectionsListRequest_Condition) GetConnectionid() string {
	if x != nil {
		return x.Connectionid
	}
	return ""
}

func (x *ServerConnectionsListRequest_Condition) GetRemoteip() string {
	if x != nil {
		return x.Remoteip
	}
	return ""
}

func (x *ServerConnectionsListRequest_Condition) GetServerid() string {
	if x != nil {
		return x.Serverid
	}
	return ""
}

func (x *ServerConnectionsListRequest_Condition) GetLocalip() string {
	if x != nil {
		return x.Localip
	}
	return ""
}

type ServerConnectionsListRequest_Paging struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Offset uint64 `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit  uint64 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *ServerConnectionsListRequest_Paging) Reset() {
	*x = ServerConnectionsListRequest_Paging{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[182]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerConnectionsListRequest_Paging) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerConnectionsListRequest_Paging) ProtoMessage() {}

func (x *ServerConnectionsListRequest_Paging) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[182]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerConnectionsListRequest_Paging.ProtoReflect.Descriptor instead.
func (*ServerConnectionsListRequest_Paging) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{63, 1}
}

func (x *ServerConnectionsListRequest_Paging) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ServerConnectionsListRequest_Paging) GetLimit() uint64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type ServerConnectionsListResponse_Connection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Connectionid string  `protobuf:"bytes,1,opt,name=connectionid,proto3" json:"connectionid,omitempty"`
	Remoteip     string  `protobuf:"bytes,2,opt,name=remoteip,proto3" json:"remoteip,omitempty"`
	Remoteport   uint32  `protobuf:"varint,7,opt,name=remoteport,proto3" json:"remoteport,omitempty"`
	Remoteptr    string  `protobuf:"bytes,3,opt,name=remoteptr,proto3" json:"remoteptr,omitempty"`
	Localip      string  `protobuf:"bytes,8,opt,name=localip,proto3" json:"localip,omitempty"`
	Localport    uint32  `protobuf:"varint,9,opt,name=localport,proto3" json:"localport,omitempty"`
	Serverid     string  `protobuf:"bytes,4,opt,name=serverid,proto3" json:"serverid,omitempty"`
	Duration     float64 `protobuf:"fixed64,5,opt,name=duration,proto3" json:"duration,omitempty"`
	Transactions uint64  `protobuf:"varint,6,opt,name=transactions,proto3" json:"transactions,omitempty"`
}

func (x *ServerConnectionsListResponse_Connection) Reset() {
	*x = ServerConnectionsListResponse_Connection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[183]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerConnectionsListResponse_Connection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerConnectionsListResponse_Connection) ProtoMessage() {}

func (x *ServerConnectionsListResponse_Connection) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[183]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerConnectionsListResponse_Connection.ProtoReflect.Descriptor instead.
func (*ServerConnectionsListResponse_Connection) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{64, 0}
}

func (x *ServerConnectionsListResponse_Connection) GetConnectionid() string {
	if x != nil {
		return x.Connectionid
	}
	return ""
}

func (x *ServerConnectionsListResponse_Connection) GetRemoteip() string {
	if x != nil {
		return x.Remoteip
	}
	return ""
}

func (x *ServerConnectionsListResponse_Connection) GetRemoteport() uint32 {
	if x != nil {
		return x.Remoteport
	}
	return 0
}

func (x *ServerConnectionsListResponse_Connection) GetRemoteptr() string {
	if x != nil {
		return x.Remoteptr
	}
	return ""
}

func (x *ServerConnectionsListResponse_Connection) GetLocalip() string {
	if x != nil {
		return x.Localip
	}
	return ""
}

func (x *ServerConnectionsListResponse_Connection) GetLocalport() uint32 {
	if x != nil {
		return x.Localport
	}
	return 0
}

func (x *ServerConnectionsListResponse_Connection) GetServerid() string {
	if x != nil {
		return x.Serverid
	}
	return ""
}

func (x *ServerConnectionsListResponse_Connection) GetDuration() float64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *ServerConnectionsListResponse_Connection) GetTransactions() uint64 {
	if x != nil {
		return x.Transactions
	}
	return 0
}

type ServerConnectionsCloseRequest_Reply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code   uint64 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Reason string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *ServerConnectionsCloseRequest_Reply) Reset() {
	*x = ServerConnectionsCloseRequest_Reply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[184]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerConnectionsCloseRequest_Reply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerConnectionsCloseRequest_Reply) ProtoMessage() {}

func (x *ServerConnectionsCloseRequest_Reply) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[184]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerConnectionsCloseRequest_Reply.ProtoReflect.Descriptor instead.
func (*ServerConnectionsCloseRequest_Reply) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{65, 0}
}

func (x *ServerConnectionsCloseRequest_Reply) GetCode() uint64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ServerConnectionsCloseRequest_Reply) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type QueueConnectionsListRequest_Condition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Connectionid string       `protobuf:"bytes,1,opt,name=connectionid,proto3" json:"connectionid,omitempty"`
	Localip      string       `protobuf:"bytes,2,opt,name=localip,proto3" json:"localip,omitempty"`
	Remoteip     string       `protobuf:"bytes,3,opt,name=remoteip,proto3" json:"remoteip,omitempty"`
	Remotemx     string       `protobuf:"bytes,6,opt,name=remotemx,proto3" json:"remotemx,omitempty"`
	Proxyip      string       `protobuf:"bytes,4,opt,name=proxyip,proto3" json:"proxyip,omitempty"`
	Id           *QueueItemID `protobuf:"bytes,5,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *QueueConnectionsListRequest_Condition) Reset() {
	*x = QueueConnectionsListRequest_Condition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[185]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueueConnectionsListRequest_Condition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueConnectionsListRequest_Condition) ProtoMessage() {}

func (x *QueueConnectionsListRequest_Condition) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[185]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueConnectionsListRequest_Condition.ProtoReflect.Descriptor instead.
func (*QueueConnectionsListRequest_Condition) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{67, 0}
}

func (x *QueueConnectionsListRequest_Condition) GetConnectionid() string {
	if x != nil {
		return x.Connectionid
	}
	return ""
}

func (x *QueueConnectionsListRequest_Condition) GetLocalip() string {
	if x != nil {
		return x.Localip
	}
	return ""
}

func (x *QueueConnectionsListRequest_Condition) GetRemoteip() string {
	if x != nil {
		return x.Remoteip
	}
	return ""
}

func (x *QueueConnectionsListRequest_Condition) GetRemotemx() string {
	if x != nil {
		return x.Remotemx
	}
	return ""
}

func (x *QueueConnectionsListRequest_Condition) GetProxyip() string {
	if x != nil {
		return x.Proxyip
	}
	return ""
}

func (x *QueueConnectionsListRequest_Condition) GetId() *QueueItemID {
	if x != nil {
		return x.Id
	}
	return nil
}

type QueueConnectionsListRequest_Paging struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Offset uint64 `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit  uint64 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *QueueConnectionsListRequest_Paging) Reset() {
	*x = QueueConnectionsListRequest_Paging{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[186]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueueConnectionsListRequest_Paging) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueConnectionsListRequest_Paging) ProtoMessage() {}

func (x *QueueConnectionsListRequest_Paging) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[186]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueConnectionsListRequest_Paging.ProtoReflect.Descriptor instead.
func (*QueueConnectionsListRequest_Paging) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{67, 1}
}

func (x *QueueConnectionsListRequest_Paging) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *QueueConnectionsListRequest_Paging) GetLimit() uint64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type QueueConnectionsListResponse_Connection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Connectionid  string       `protobuf:"bytes,1,opt,name=connectionid,proto3" json:"connectionid,omitempty"`
	Localip       string       `protobuf:"bytes,2,opt,name=localip,proto3" json:"localip,omitempty"`
	Localport     uint32       `protobuf:"varint,3,opt,name=localport,proto3" json:"localport,omitempty"`
	Remoteip      string       `protobuf:"bytes,4,opt,name=remoteip,proto3" json:"remoteip,omitempty"`
	Remoteport    uint32       `protobuf:"varint,5,opt,name=remoteport,proto3" json:"remoteport,omitempty"`
	Remotemx      string       `protobuf:"bytes,12,opt,name=remotemx,proto3" json:"remotemx,omitempty"`
	Proxyip       string       `protobuf:"bytes,6,opt,name=proxyip,proto3" json:"proxyip,omitempty"`
	Duration      float64      `protobuf:"fixed64,7,opt,name=duration,proto3" json:"duration,omitempty"`
	Transactions  uint64       `protobuf:"varint,8,opt,name=transactions,proto3" json:"transactions,omitempty"`
	State         string       `protobuf:"bytes,9,opt,name=state,proto3" json:"state,omitempty"`
	Stateduration float64      `protobuf:"fixed64,10,opt,name=stateduration,proto3" json:"stateduration,omitempty"`
	Id            *QueueItemID `protobuf:"bytes,11,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *QueueConnectionsListResponse_Connection) Reset() {
	*x = QueueConnectionsListResponse_Connection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[187]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueueConnectionsListResponse_Connection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueConnectionsListResponse_Connection) ProtoMessage() {}

func (x *QueueConnectionsListResponse_Connection) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[187]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueConnectionsListResponse_Connection.ProtoReflect.Descriptor instead.
func (*QueueConnectionsListResponse_Connection) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{68, 0}
}

func (x *QueueConnectionsListResponse_Connection) GetConnectionid() string {
	if x != nil {
		return x.Connectionid
	}
	return ""
}

func (x *QueueConnectionsListResponse_Connection) GetLocalip() string {
	if x != nil {
		return x.Localip
	}
	return ""
}

func (x *QueueConnectionsListResponse_Connection) GetLocalport() uint32 {
	if x != nil {
		return x.Localport
	}
	return 0
}

func (x *QueueConnectionsListResponse_Connection) GetRemoteip() string {
	if x != nil {
		return x.Remoteip
	}
	return ""
}

func (x *QueueConnectionsListResponse_Connection) GetRemoteport() uint32 {
	if x != nil {
		return x.Remoteport
	}
	return 0
}

func (x *QueueConnectionsListResponse_Connection) GetRemotemx() string {
	if x != nil {
		return x.Remotemx
	}
	return ""
}

func (x *QueueConnectionsListResponse_Connection) GetProxyip() string {
	if x != nil {
		return x.Proxyip
	}
	return ""
}

func (x *QueueConnectionsListResponse_Connection) GetDuration() float64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *QueueConnectionsListResponse_Connection) GetTransactions() uint64 {
	if x != nil {
		return x.Transactions
	}
	return 0
}

func (x *QueueConnectionsListResponse_Connection) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *QueueConnectionsListResponse_Connection) GetStateduration() float64 {
	if x != nil {
		return x.Stateduration
	}
	return 0
}

func (x *QueueConnectionsListResponse_Connection) GetId() *QueueItemID {
	if x != nil {
		return x.Id
	}
	return nil
}

type PolicyMatchResponse_PolicyMatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields      *PolicyMatchResponse_PolicyMatch_Fields    `protobuf:"bytes,1,opt,name=fields,proto3" json:"fields,omitempty"`
	Grouping    *PolicyMatchResponse_PolicyMatch_Grouping  `protobuf:"bytes,2,opt,name=grouping,proto3" json:"grouping,omitempty"`
	Dynamic     []*PolicyMatchResponse_PolicyMatch_Dynamic `protobuf:"bytes,3,rep,name=dynamic,proto3" json:"dynamic,omitempty"`
	Tags        []string                                   `protobuf:"bytes,4,rep,name=tags,proto3" json:"tags,omitempty"`
	Concurrency *UInt64Value                               `protobuf:"bytes,5,opt,name=concurrency,proto3" json:"concurrency,omitempty"`
	Rate        *PolicyMatchResponse_PolicyMatch_Rate      `protobuf:"bytes,6,opt,name=rate,proto3" json:"rate,omitempty"`
	Properties  map[string]string                          `protobuf:"bytes,7,rep,name=properties,proto3" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Stop        bool                                       `protobuf:"varint,8,opt,name=stop,proto3" json:"stop,omitempty"`
}

func (x *PolicyMatchResponse_PolicyMatch) Reset() {
	*x = PolicyMatchResponse_PolicyMatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[188]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyMatchResponse_PolicyMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyMatchResponse_PolicyMatch) ProtoMessage() {}

func (x *PolicyMatchResponse_PolicyMatch) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[188]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyMatchResponse_PolicyMatch.ProtoReflect.Descriptor instead.
func (*PolicyMatchResponse_PolicyMatch) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{72, 0}
}

func (x *PolicyMatchResponse_PolicyMatch) GetFields() *PolicyMatchResponse_PolicyMatch_Fields {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *PolicyMatchResponse_PolicyMatch) GetGrouping() *PolicyMatchResponse_PolicyMatch_Grouping {
	if x != nil {
		return x.Grouping
	}
	return nil
}

func (x *PolicyMatchResponse_PolicyMatch) GetDynamic() []*PolicyMatchResponse_PolicyMatch_Dynamic {
	if x != nil {
		return x.Dynamic
	}
	return nil
}

func (x *PolicyMatchResponse_PolicyMatch) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *PolicyMatchResponse_PolicyMatch) GetConcurrency() *UInt64Value {
	if x != nil {
		return x.Concurrency
	}
	return nil
}

func (x *PolicyMatchResponse_PolicyMatch) GetRate() *PolicyMatchResponse_PolicyMatch_Rate {
	if x != nil {
		return x.Rate
	}
	return nil
}

func (x *PolicyMatchResponse_PolicyMatch) GetProperties() map[string]string {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *PolicyMatchResponse_PolicyMatch) GetStop() bool {
	if x != nil {
		return x.Stop
	}
	return false
}

type PolicyMatchResponse_PolicyMatch_Fields struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transportid     bool `protobuf:"varint,1,opt,name=transportid,proto3" json:"transportid,omitempty"`
	Localip         bool `protobuf:"varint,2,opt,name=localip,proto3" json:"localip,omitempty"`
	Remoteip        bool `protobuf:"varint,3,opt,name=remoteip,proto3" json:"remoteip,omitempty"`
	Remotemx        bool `protobuf:"varint,4,opt,name=remotemx,proto3" json:"remotemx,omitempty"`
	Recipientdomain bool `protobuf:"varint,5,opt,name=recipientdomain,proto3" json:"recipientdomain,omitempty"`
	Jobid           bool `protobuf:"varint,6,opt,name=jobid,proto3" json:"jobid,omitempty"`
	Grouping        bool `protobuf:"varint,7,opt,name=grouping,proto3" json:"grouping,omitempty"`
}

func (x *PolicyMatchResponse_PolicyMatch_Fields) Reset() {
	*x = PolicyMatchResponse_PolicyMatch_Fields{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[189]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyMatchResponse_PolicyMatch_Fields) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyMatchResponse_PolicyMatch_Fields) ProtoMessage() {}

func (x *PolicyMatchResponse_PolicyMatch_Fields) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[189]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyMatchResponse_PolicyMatch_Fields.ProtoReflect.Descriptor instead.
func (*PolicyMatchResponse_PolicyMatch_Fields) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{72, 0, 0}
}

func (x *PolicyMatchResponse_PolicyMatch_Fields) GetTransportid() bool {
	if x != nil {
		return x.Transportid
	}
	return false
}

func (x *PolicyMatchResponse_PolicyMatch_Fields) GetLocalip() bool {
	if x != nil {
		return x.Localip
	}
	return false
}

func (x *PolicyMatchResponse_PolicyMatch_Fields) GetRemoteip() bool {
	if x != nil {
		return x.Remoteip
	}
	return false
}

func (x *PolicyMatchResponse_PolicyMatch_Fields) GetRemotemx() bool {
	if x != nil {
		return x.Remotemx
	}
	return false
}

func (x *PolicyMatchResponse_PolicyMatch_Fields) GetRecipientdomain() bool {
	if x != nil {
		return x.Recipientdomain
	}
	return false
}

func (x *PolicyMatchResponse_PolicyMatch_Fields) GetJobid() bool {
	if x != nil {
		return x.Jobid
	}
	return false
}

func (x *PolicyMatchResponse_PolicyMatch_Fields) GetGrouping() bool {
	if x != nil {
		return x.Grouping
	}
	return false
}

type PolicyMatchResponse_PolicyMatch_Grouping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transportid     *StringValue `protobuf:"bytes,1,opt,name=transportid,proto3" json:"transportid,omitempty"`
	Localip         *StringValue `protobuf:"bytes,2,opt,name=localip,proto3" json:"localip,omitempty"`
	Remoteip        *StringValue `protobuf:"bytes,3,opt,name=remoteip,proto3" json:"remoteip,omitempty"`
	Remotemx        *StringValue `protobuf:"bytes,4,opt,name=remotemx,proto3" json:"remotemx,omitempty"`
	Recipientdomain *StringValue `protobuf:"bytes,5,opt,name=recipientdomain,proto3" json:"recipientdomain,omitempty"`
	Jobid           *StringValue `protobuf:"bytes,6,opt,name=jobid,proto3" json:"jobid,omitempty"`
	Grouping        *StringValue `protobuf:"bytes,7,opt,name=grouping,proto3" json:"grouping,omitempty"`
}

func (x *PolicyMatchResponse_PolicyMatch_Grouping) Reset() {
	*x = PolicyMatchResponse_PolicyMatch_Grouping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[190]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyMatchResponse_PolicyMatch_Grouping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyMatchResponse_PolicyMatch_Grouping) ProtoMessage() {}

func (x *PolicyMatchResponse_PolicyMatch_Grouping) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[190]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyMatchResponse_PolicyMatch_Grouping.ProtoReflect.Descriptor instead.
func (*PolicyMatchResponse_PolicyMatch_Grouping) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{72, 0, 1}
}

func (x *PolicyMatchResponse_PolicyMatch_Grouping) GetTransportid() *StringValue {
	if x != nil {
		return x.Transportid
	}
	return nil
}

func (x *PolicyMatchResponse_PolicyMatch_Grouping) GetLocalip() *StringValue {
	if x != nil {
		return x.Localip
	}
	return nil
}

func (x *PolicyMatchResponse_PolicyMatch_Grouping) GetRemoteip() *StringValue {
	if x != nil {
		return x.Remoteip
	}
	return nil
}

func (x *PolicyMatchResponse_PolicyMatch_Grouping) GetRemotemx() *StringValue {
	if x != nil {
		return x.Remotemx
	}
	return nil
}

func (x *PolicyMatchResponse_PolicyMatch_Grouping) GetRecipientdomain() *StringValue {
	if x != nil {
		return x.Recipientdomain
	}
	return nil
}

func (x *PolicyMatchResponse_PolicyMatch_Grouping) GetJobid() *StringValue {
	if x != nil {
		return x.Jobid
	}
	return nil
}

func (x *PolicyMatchResponse_PolicyMatch_Grouping) GetGrouping() *StringValue {
	if x != nil {
		return x.Grouping
	}
	return nil
}

type PolicyMatchResponse_PolicyMatch_Dynamic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id  string       `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Tag *StringValue `protobuf:"bytes,2,opt,name=tag,proto3" json:"tag,omitempty"`
}

func (x *PolicyMatchResponse_PolicyMatch_Dynamic) Reset() {
	*x = PolicyMatchResponse_PolicyMatch_Dynamic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[191]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyMatchResponse_PolicyMatch_Dynamic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyMatchResponse_PolicyMatch_Dynamic) ProtoMessage() {}

func (x *PolicyMatchResponse_PolicyMatch_Dynamic) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[191]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyMatchResponse_PolicyMatch_Dynamic.ProtoReflect.Descriptor instead.
func (*PolicyMatchResponse_PolicyMatch_Dynamic) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{72, 0, 2}
}

func (x *PolicyMatchResponse_PolicyMatch_Dynamic) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PolicyMatchResponse_PolicyMatch_Dynamic) GetTag() *StringValue {
	if x != nil {
		return x.Tag
	}
	return nil
}

type PolicyMatchResponse_PolicyMatch_Rate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count    uint64  `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	Interval float64 `protobuf:"fixed64,2,opt,name=interval,proto3" json:"interval,omitempty"`
}

func (x *PolicyMatchResponse_PolicyMatch_Rate) Reset() {
	*x = PolicyMatchResponse_PolicyMatch_Rate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[192]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyMatchResponse_PolicyMatch_Rate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyMatchResponse_PolicyMatch_Rate) ProtoMessage() {}

func (x *PolicyMatchResponse_PolicyMatch_Rate) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[192]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyMatchResponse_PolicyMatch_Rate.ProtoReflect.Descriptor instead.
func (*PolicyMatchResponse_PolicyMatch_Rate) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{72, 0, 3}
}

func (x *PolicyMatchResponse_PolicyMatch_Rate) GetCount() uint64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *PolicyMatchResponse_PolicyMatch_Rate) GetInterval() float64 {
	if x != nil {
		return x.Interval
	}
	return 0
}

type PolicyGroupingListRequest_Paging struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Offset uint64 `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit  uint64 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *PolicyGroupingListRequest_Paging) Reset() {
	*x = PolicyGroupingListRequest_Paging{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[194]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyGroupingListRequest_Paging) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyGroupingListRequest_Paging) ProtoMessage() {}

func (x *PolicyGroupingListRequest_Paging) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[194]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyGroupingListRequest_Paging.ProtoReflect.Descriptor instead.
func (*PolicyGroupingListRequest_Paging) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{73, 0}
}

func (x *PolicyGroupingListRequest_Paging) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *PolicyGroupingListRequest_Paging) GetLimit() uint64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type PolicyGroupingListResponse_Grouping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields *PolicyGroupingListResponse_Grouping_Fields `protobuf:"bytes,1,opt,name=fields,proto3" json:"fields,omitempty"`
	// Types that are assignable to Field:
	//
	//	*PolicyGroupingListResponse_Grouping_Transportid
	//	*PolicyGroupingListResponse_Grouping_Localip
	//	*PolicyGroupingListResponse_Grouping_Remoteip
	//	*PolicyGroupingListResponse_Grouping_Remotemx
	//	*PolicyGroupingListResponse_Grouping_Recipientdomain
	//	*PolicyGroupingListResponse_Grouping_Jobid
	//	*PolicyGroupingListResponse_Grouping_Grouping
	Field isPolicyGroupingListResponse_Grouping_Field `protobuf_oneof:"field"`
}

func (x *PolicyGroupingListResponse_Grouping) Reset() {
	*x = PolicyGroupingListResponse_Grouping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[195]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyGroupingListResponse_Grouping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyGroupingListResponse_Grouping) ProtoMessage() {}

func (x *PolicyGroupingListResponse_Grouping) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[195]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyGroupingListResponse_Grouping.ProtoReflect.Descriptor instead.
func (*PolicyGroupingListResponse_Grouping) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{74, 0}
}

func (x *PolicyGroupingListResponse_Grouping) GetFields() *PolicyGroupingListResponse_Grouping_Fields {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (m *PolicyGroupingListResponse_Grouping) GetField() isPolicyGroupingListResponse_Grouping_Field {
	if m != nil {
		return m.Field
	}
	return nil
}

func (x *PolicyGroupingListResponse_Grouping) GetTransportid() string {
	if x, ok := x.GetField().(*PolicyGroupingListResponse_Grouping_Transportid); ok {
		return x.Transportid
	}
	return ""
}

func (x *PolicyGroupingListResponse_Grouping) GetLocalip() string {
	if x, ok := x.GetField().(*PolicyGroupingListResponse_Grouping_Localip); ok {
		return x.Localip
	}
	return ""
}

func (x *PolicyGroupingListResponse_Grouping) GetRemoteip() string {
	if x, ok := x.GetField().(*PolicyGroupingListResponse_Grouping_Remoteip); ok {
		return x.Remoteip
	}
	return ""
}

func (x *PolicyGroupingListResponse_Grouping) GetRemotemx() string {
	if x, ok := x.GetField().(*PolicyGroupingListResponse_Grouping_Remotemx); ok {
		return x.Remotemx
	}
	return ""
}

func (x *PolicyGroupingListResponse_Grouping) GetRecipientdomain() string {
	if x, ok := x.GetField().(*PolicyGroupingListResponse_Grouping_Recipientdomain); ok {
		return x.Recipientdomain
	}
	return ""
}

func (x *PolicyGroupingListResponse_Grouping) GetJobid() string {
	if x, ok := x.GetField().(*PolicyGroupingListResponse_Grouping_Jobid); ok {
		return x.Jobid
	}
	return ""
}

func (x *PolicyGroupingListResponse_Grouping) GetGrouping() string {
	if x, ok := x.GetField().(*PolicyGroupingListResponse_Grouping_Grouping); ok {
		return x.Grouping
	}
	return ""
}

type isPolicyGroupingListResponse_Grouping_Field interface {
	isPolicyGroupingListResponse_Grouping_Field()
}

type PolicyGroupingListResponse_Grouping_Transportid struct {
	Transportid string `protobuf:"bytes,2,opt,name=transportid,proto3,oneof"`
}

type PolicyGroupingListResponse_Grouping_Localip struct {
	Localip string `protobuf:"bytes,3,opt,name=localip,proto3,oneof"`
}

type PolicyGroupingListResponse_Grouping_Remoteip struct {
	Remoteip string `protobuf:"bytes,4,opt,name=remoteip,proto3,oneof"`
}

type PolicyGroupingListResponse_Grouping_Remotemx struct {
	Remotemx string `protobuf:"bytes,5,opt,name=remotemx,proto3,oneof"`
}

type PolicyGroupingListResponse_Grouping_Recipientdomain struct {
	Recipientdomain string `protobuf:"bytes,6,opt,name=recipientdomain,proto3,oneof"`
}

type PolicyGroupingListResponse_Grouping_Jobid struct {
	Jobid string `protobuf:"bytes,7,opt,name=jobid,proto3,oneof"`
}

type PolicyGroupingListResponse_Grouping_Grouping struct {
	Grouping string `protobuf:"bytes,8,opt,name=grouping,proto3,oneof"`
}

func (*PolicyGroupingListResponse_Grouping_Transportid) isPolicyGroupingListResponse_Grouping_Field() {
}

func (*PolicyGroupingListResponse_Grouping_Localip) isPolicyGroupingListResponse_Grouping_Field() {}

func (*PolicyGroupingListResponse_Grouping_Remoteip) isPolicyGroupingListResponse_Grouping_Field() {}

func (*PolicyGroupingListResponse_Grouping_Remotemx) isPolicyGroupingListResponse_Grouping_Field() {}

func (*PolicyGroupingListResponse_Grouping_Recipientdomain) isPolicyGroupingListResponse_Grouping_Field() {
}

func (*PolicyGroupingListResponse_Grouping_Jobid) isPolicyGroupingListResponse_Grouping_Field() {}

func (*PolicyGroupingListResponse_Grouping_Grouping) isPolicyGroupingListResponse_Grouping_Field() {}

type PolicyGroupingListResponse_Grouping_Fields struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transportid     bool `protobuf:"varint,1,opt,name=transportid,proto3" json:"transportid,omitempty"`
	Localip         bool `protobuf:"varint,2,opt,name=localip,proto3" json:"localip,omitempty"`
	Remoteip        bool `protobuf:"varint,3,opt,name=remoteip,proto3" json:"remoteip,omitempty"`
	Remotemx        bool `protobuf:"varint,4,opt,name=remotemx,proto3" json:"remotemx,omitempty"`
	Recipientdomain bool `protobuf:"varint,5,opt,name=recipientdomain,proto3" json:"recipientdomain,omitempty"`
	Jobid           bool `protobuf:"varint,6,opt,name=jobid,proto3" json:"jobid,omitempty"`
	Grouping        bool `protobuf:"varint,7,opt,name=grouping,proto3" json:"grouping,omitempty"`
}

func (x *PolicyGroupingListResponse_Grouping_Fields) Reset() {
	*x = PolicyGroupingListResponse_Grouping_Fields{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[196]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyGroupingListResponse_Grouping_Fields) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyGroupingListResponse_Grouping_Fields) ProtoMessage() {}

func (x *PolicyGroupingListResponse_Grouping_Fields) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[196]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyGroupingListResponse_Grouping_Fields.ProtoReflect.Descriptor instead.
func (*PolicyGroupingListResponse_Grouping_Fields) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{74, 0, 0}
}

func (x *PolicyGroupingListResponse_Grouping_Fields) GetTransportid() bool {
	if x != nil {
		return x.Transportid
	}
	return false
}

func (x *PolicyGroupingListResponse_Grouping_Fields) GetLocalip() bool {
	if x != nil {
		return x.Localip
	}
	return false
}

func (x *PolicyGroupingListResponse_Grouping_Fields) GetRemoteip() bool {
	if x != nil {
		return x.Remoteip
	}
	return false
}

func (x *PolicyGroupingListResponse_Grouping_Fields) GetRemotemx() bool {
	if x != nil {
		return x.Remotemx
	}
	return false
}

func (x *PolicyGroupingListResponse_Grouping_Fields) GetRecipientdomain() bool {
	if x != nil {
		return x.Recipientdomain
	}
	return false
}

func (x *PolicyGroupingListResponse_Grouping_Fields) GetJobid() bool {
	if x != nil {
		return x.Jobid
	}
	return false
}

func (x *PolicyGroupingListResponse_Grouping_Fields) GetGrouping() bool {
	if x != nil {
		return x.Grouping
	}
	return false
}

type PolicyGroupingRequest_Fields struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transportid     bool `protobuf:"varint,1,opt,name=transportid,proto3" json:"transportid,omitempty"`
	Localip         bool `protobuf:"varint,2,opt,name=localip,proto3" json:"localip,omitempty"`
	Remoteip        bool `protobuf:"varint,3,opt,name=remoteip,proto3" json:"remoteip,omitempty"`
	Remotemx        bool `protobuf:"varint,4,opt,name=remotemx,proto3" json:"remotemx,omitempty"`
	Recipientdomain bool `protobuf:"varint,5,opt,name=recipientdomain,proto3" json:"recipientdomain,omitempty"`
	Jobid           bool `protobuf:"varint,6,opt,name=jobid,proto3" json:"jobid,omitempty"`
	Grouping        bool `protobuf:"varint,7,opt,name=grouping,proto3" json:"grouping,omitempty"`
}

func (x *PolicyGroupingRequest_Fields) Reset() {
	*x = PolicyGroupingRequest_Fields{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtpd_proto_msgTypes[197]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyGroupingRequest_Fields) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyGroupingRequest_Fields) ProtoMessage() {}

func (x *PolicyGroupingRequest_Fields) ProtoReflect() protoreflect.Message {
	mi := &file_smtpd_proto_msgTypes[197]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyGroupingRequest_Fields.ProtoReflect.Descriptor instead.
func (*PolicyGroupingRequest_Fields) Descriptor() ([]byte, []int) {
	return file_smtpd_proto_rawDescGZIP(), []int{75, 0}
}

func (x *PolicyGroupingRequest_Fields) GetTransportid() bool {
	if x != nil {
		return x.Transportid
	}
	return false
}

func (x *PolicyGroupingRequest_Fields) GetLocalip() bool {
	if x != nil {
		return x.Localip
	}
	return false
}

func (x *PolicyGroupingRequest_Fields) GetRemoteip() bool {
	if x != nil {
		return x.Remoteip
	}
	return false
}

func (x *PolicyGroupingRequest_Fields) GetRemotemx() bool {
	if x != nil {
		return x.Remotemx
	}
	return false
}

func (x *PolicyGroupingRequest_Fields) GetRecipientdomain() bool {
	if x != nil {
		return x.Recipientdomain
	}
	return false
}

func (x *PolicyGroupingRequest_Fields) GetJobid() bool {
	if x != nil {
		return x.Jobid
	}
	return false
}

func (x *PolicyGroupingRequest_Fields) GetGrouping() bool {
	if x != nil {
		return x.Grouping
	}
	return false
}

var File_smtpd_proto protoreflect.FileDescriptor

var file_smtpd_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x73,
	0x6d, 0x74, 0x70, 0x64, 0x22, 0x23, 0x0a, 0x0b, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x23, 0x0a, 0x0b, 0x44, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x23,
	0x0a, 0x0b, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x82, 0x01, 0x0a, 0x10, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x67, 0x65, 0x78, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x35,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x73,
	0x6d, 0x74, 0x70, 0x64, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x67, 0x65, 0x78,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x21, 0x0a, 0x09, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x58, 0x41, 0x43, 0x54, 0x10, 0x00, 0x12, 0x09, 0x0a,
	0x05, 0x52, 0x45, 0x47, 0x45, 0x58, 0x10, 0x01, 0x22, 0x21, 0x0a, 0x09, 0x42, 0x6f, 0x6f, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x4f, 0x0a, 0x09, 0x54,
	0x69, 0x6d, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1c, 0x0a, 0x08, 0x61, 0x62, 0x73, 0x6f,
	0x6c, 0x75, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x08, 0x61, 0x62,
	0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x08, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x08, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xdf, 0x01, 0x0a,
	0x0b, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x02,
	0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x02, 0x65, 0x71, 0x12, 0x22,
	0x0a, 0x03, 0x6e, 0x65, 0x71, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x73, 0x6d,
	0x74, 0x70, 0x64, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x6e,
	0x65, 0x71, 0x12, 0x20, 0x0a, 0x02, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x02, 0x6c, 0x74, 0x12, 0x20, 0x0a, 0x02, 0x67, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x02, 0x67, 0x74, 0x12, 0x22, 0x0a, 0x03, 0x67, 0x74, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x67, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x03, 0x6c, 0x74,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x6c, 0x74, 0x65, 0x22, 0xed,
	0x01, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x12, 0x22, 0x0a, 0x02, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73,
	0x6d, 0x74, 0x70, 0x64, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x02, 0x65, 0x71, 0x12, 0x24, 0x0a, 0x03, 0x6e, 0x65, 0x71, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x6e, 0x65, 0x71, 0x12, 0x22, 0x0a, 0x02, 0x6c, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x55,
	0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x02, 0x6c, 0x74, 0x12, 0x22,
	0x0a, 0x02, 0x67, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x6d, 0x74,
	0x70, 0x64, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x02,
	0x67, 0x74, 0x12, 0x24, 0x0a, 0x03, 0x67, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x03, 0x67, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x03, 0x6c, 0x74, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x55, 0x49,
	0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x6c, 0x74, 0x65, 0x22, 0xed,
	0x01, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x12, 0x22, 0x0a, 0x02, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73,
	0x6d, 0x74, 0x70, 0x64, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x02, 0x65, 0x71, 0x12, 0x24, 0x0a, 0x03, 0x6e, 0x65, 0x71, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x6e, 0x65, 0x71, 0x12, 0x22, 0x0a, 0x02, 0x6c, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x44,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x02, 0x6c, 0x74, 0x12, 0x22,
	0x0a, 0x02, 0x67, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x6d, 0x74,
	0x70, 0x64, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x02,
	0x67, 0x74, 0x12, 0x24, 0x0a, 0x03, 0x67, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x03, 0x67, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x03, 0x6c, 0x74, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x44, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x6c, 0x74, 0x65, 0x22, 0xbb,
	0x01, 0x0a, 0x0b, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x18,
	0x0a, 0x07, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x30,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x73,
	0x6d, 0x74, 0x70, 0x64, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x73, 0x65, 0x6c, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x63, 0x61, 0x73, 0x65, 0x6c, 0x65, 0x73, 0x73, 0x22, 0x2e, 0x0a, 0x09,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x58, 0x41,
	0x43, 0x54, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x41, 0x52, 0x54, 0x49, 0x41, 0x4c, 0x10,
	0x01, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x45, 0x47, 0x45, 0x58, 0x10, 0x02, 0x22, 0x53, 0x0a, 0x0f,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05,
	0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x70,
	0x61, 0x74, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x70, 0x61, 0x74, 0x63,
	0x68, 0x22, 0x45, 0x0a, 0x0b, 0x51, 0x75, 0x65, 0x75, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x44,
	0x12, 0x20, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x22, 0xa8, 0x16, 0x0a, 0x09, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x06, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x06, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x07, 0x66,
	0x72, 0x65, 0x65, 0x7a, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73,
	0x6d, 0x74, 0x70, 0x64, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46,
	0x72, 0x65, 0x65, 0x7a, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x07, 0x66, 0x72, 0x65, 0x65,
	0x7a, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x2e,
	0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x6d,
	0x74, 0x70, 0x64, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x44, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x24,
	0x0a, 0x04, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x73,
	0x6d, 0x74, 0x70, 0x64, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04,
	0x68, 0x6f, 0x6c, 0x64, 0x12, 0x41, 0x0a, 0x09, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x69, 0x64,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72,
	0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x69, 0x64, 0x73, 0x12, 0x41, 0x0a, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x69, 0x70, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x6d, 0x74,
	0x70, 0x64, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x72, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x09, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x69, 0x70, 0x73, 0x12, 0x4c, 0x0a, 0x0c, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x64, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x67, 0x65, 0x78, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x64, 0x73, 0x12, 0x40, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x69,
	0x64, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64,
	0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x72, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x67, 0x65, 0x78, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x06, 0x6a, 0x6f, 0x62, 0x69, 0x64, 0x73, 0x12, 0x46, 0x0a, 0x09, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x67,
	0x65, 0x78, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e,
	0x67, 0x73, 0x12, 0x3f, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x67, 0x65, 0x69, 0x64, 0x73, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x73, 0x74, 0x61, 0x67, 0x65,
	0x69, 0x64, 0x73, 0x12, 0x36, 0x0a, 0x07, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x18, 0x0b,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x61, 0x69, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x52, 0x07, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x12, 0x3c, 0x0a, 0x0a, 0x72,
	0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x4d, 0x61, 0x69, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0a, 0x72,
	0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x24, 0x0a, 0x03, 0x74, 0x73, 0x73,
	0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x03, 0x74, 0x73, 0x73, 0x12,
	0x2e, 0x0a, 0x08, 0x72, 0x65, 0x74, 0x72, 0x79, 0x74, 0x73, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x08, 0x72, 0x65, 0x74, 0x72, 0x79, 0x74, 0x73, 0x73, 0x12,
	0x36, 0x0a, 0x0b, 0x72, 0x65, 0x74, 0x72, 0x79, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x0f,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x72, 0x65, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x52, 0x0b, 0x72, 0x65, 0x74, 0x72,
	0x79, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x2e, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x6d, 0x74, 0x70,
	0x64, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x08, 0x73,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x3d, 0x0a, 0x09, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x6d, 0x74,
	0x70, 0x64, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x61, 0x70,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x73, 0x12, 0x3b, 0x0a, 0x06, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x73,
	0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x71, 0x75, 0x6f,
	0x74, 0x61, 0x73, 0x12, 0x2a, 0x0a, 0x05, 0x73, 0x69, 0x7a, 0x65, 0x73, 0x18, 0x13, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x72, 0x65, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x52, 0x05, 0x73, 0x69, 0x7a, 0x65, 0x73, 0x12,
	0x36, 0x0a, 0x0c, 0x72, 0x65, 0x74, 0x72, 0x79, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x18,
	0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x0c, 0x72, 0x65, 0x74, 0x72, 0x79,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x12, 0x3f, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x69, 0x70, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x6d, 0x74, 0x70,
	0x64, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x72, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x70, 0x73, 0x12, 0x41, 0x0a, 0x09, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x69, 0x70, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x6d,
	0x74, 0x70, 0x64, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x72, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x09, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x69, 0x70, 0x73, 0x12, 0x46, 0x0a, 0x09, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x6d, 0x78, 0x73, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x67, 0x65, 0x78, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x6d, 0x78, 0x73, 0x12, 0x37, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x18, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x34, 0x0a, 0x0a,
	0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65,
	0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x12, 0x41, 0x0a, 0x0f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x0f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x1a, 0x5f, 0x0a, 0x0b, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x49, 0x74, 0x65, 0x6d, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x1a, 0x64, 0x0a, 0x08, 0x41, 0x6e, 0x79, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x12, 0x2a, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x12, 0x2c, 0x0a, 0x06, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65,
	0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x52, 0x06, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x1a, 0x8a,
	0x01, 0x0a, 0x0b, 0x4d, 0x61, 0x69, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x30,
	0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x70, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x70, 0x61, 0x72, 0x74,
	0x12, 0x2f, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x67, 0x65, 0x78, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x1a, 0xc1, 0x01, 0x0a, 0x0e,
	0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x40,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x1a, 0x53, 0x0a, 0x0a, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2f, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x6d, 0x74, 0x70,
	0x64, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x6e, 0x79, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x30, 0x0a, 0x0a, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a,
	0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x73,
	0x6d, 0x74, 0x70, 0x64, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x05, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x1a, 0x34, 0x0a, 0x0b, 0x46, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x25, 0x0a, 0x06, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0d, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x46, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x52,
	0x06, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x1a, 0x72, 0x0a, 0x0c, 0x57, 0x6f, 0x72, 0x6b, 0x69,
	0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x07, 0x77, 0x6f, 0x72, 0x6b, 0x69,
	0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64,
	0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e,
	0x67, 0x12, 0x38, 0x0a, 0x0e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x66, 0x72, 0x65, 0x65, 0x7a,
	0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x73, 0x6d, 0x74, 0x70,
	0x64, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x69, 0x6e, 0x67, 0x1a, 0x44, 0x0a, 0x12, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x78, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x1a, 0xb4, 0x01, 0x0a, 0x17, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x67, 0x65, 0x78, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x12, 0x46, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x73, 0x6d,
	0x74, 0x70, 0x64, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x72, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x67, 0x65, 0x78,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x21, 0x0a, 0x09, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x58, 0x41, 0x43, 0x54, 0x10, 0x00, 0x12, 0x09, 0x0a,
	0x05, 0x52, 0x45, 0x47, 0x45, 0x58, 0x10, 0x01, 0x1a, 0xd8, 0x01, 0x0a, 0x06, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70,
	0x6f, 0x72, 0x74, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x70,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x70, 0x12,
	0x1a, 0x0a, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x69, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x6d, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x6d, 0x78, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x69, 0x70,
	0x69, 0x65, 0x6e, 0x74, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0f, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6a, 0x6f, 0x62, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x05, 0x6a, 0x6f, 0x62, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x69, 0x6e, 0x67, 0x22, 0x91, 0x0b, 0x0a, 0x12, 0x51, 0x75, 0x65, 0x75, 0x65, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x0a, 0x63, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x34, 0x0a, 0x04,
	0x6d, 0x6f, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x6d, 0x74,
	0x70, 0x64, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x6f, 0x76, 0x65, 0x48, 0x00, 0x52, 0x04, 0x6d, 0x6f,
	0x76, 0x65, 0x12, 0x33, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3a, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x06, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x64, 0x12, 0x43, 0x0a, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x6d,
	0x74, 0x70, 0x64, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x16,
	0x0a, 0x06, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x66, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x64, 0x75, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x12, 0x3d, 0x0a, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x4d, 0x61, 0x69, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x06, 0x73, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x12, 0x43, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x4d, 0x61, 0x69, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x09, 0x72,
	0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x0a, 0x72, 0x65, 0x74, 0x72,
	0x79, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73,
	0x6d, 0x74, 0x70, 0x64, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0a, 0x72, 0x65, 0x74, 0x72, 0x79, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x08,
	0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x38, 0x0a, 0x06,
	0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73,
	0x6d, 0x74, 0x70, 0x64, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x06,
	0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x1a, 0x6b, 0x0a, 0x0b, 0x4d, 0x61, 0x69, 0x6c, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x30, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x70, 0x61,
	0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x70, 0x61, 0x72, 0x74, 0x12, 0x2a, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x1a, 0xca, 0x01, 0x0a, 0x04, 0x4d, 0x6f, 0x76, 0x65, 0x12, 0x24, 0x0a, 0x05,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x73, 0x6d,
	0x74, 0x70, 0x64, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x48, 0x00, 0x52, 0x05, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x12, 0x27, 0x0a, 0x06, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x46, 0x72, 0x65, 0x65, 0x7a,
	0x65, 0x48, 0x00, 0x52, 0x06, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x12, 0x2a, 0x0a, 0x07, 0x72,
	0x65, 0x74, 0x72, 0x79, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x73,
	0x6d, 0x74, 0x70, 0x64, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07,
	0x72, 0x65, 0x74, 0x72, 0x79, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x0d, 0x72, 0x65, 0x74, 0x72, 0x79,
	0x74, 0x73, 0x6a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0d, 0x72, 0x65, 0x74, 0x72, 0x79, 0x74, 0x73, 0x6a, 0x69, 0x74, 0x74, 0x65,
	0x72, 0x42, 0x0d, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x1a, 0xaf, 0x02, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x73, 0x6d, 0x74, 0x70,
	0x64, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x36, 0x0a, 0x03, 0x64, 0x73, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x44, 0x53, 0x4e, 0x52, 0x03, 0x64, 0x73, 0x6e, 0x1a, 0x53, 0x0a, 0x09, 0x44, 0x53,
	0x4e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07,
	0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x1a,
	0x71, 0x0a, 0x03, 0x44, 0x53, 0x4e, 0x12, 0x42, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x53, 0x4e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x64, 0x69,
	0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x63, 0x6f,
	0x64, 0x65, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x1e, 0x0a, 0x06, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x42,
	0x06, 0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x22, 0x4b, 0x0a, 0x13, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x08, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x77, 0x6f,
	0x72, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x77, 0x6f, 0x72,
	0x6b, 0x69, 0x6e, 0x67, 0x22, 0x80, 0x03, 0x0a, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e,
	0x67, 0x73, 0x12, 0x39, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x67, 0x65, 0x78, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x64, 0x12, 0x2c, 0x0a,
	0x07, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x70, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x07, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x70, 0x12, 0x2e, 0x0a, 0x08, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x69, 0x70, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x69, 0x70, 0x12, 0x33, 0x0a, 0x08, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x6d, 0x78, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x67, 0x65,
	0x78, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x6d, 0x78,
	0x12, 0x41, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x6d, 0x74, 0x70,
	0x64, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x67, 0x65, 0x78, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x12, 0x2d, 0x0a, 0x05, 0x6a, 0x6f, 0x62, 0x69, 0x64, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x67, 0x65, 0x78, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x6a, 0x6f, 0x62,
	0x69, 0x64, 0x12, 0x33, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x67, 0x65, 0x78, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x22, 0xff, 0x13, 0x0a, 0x13, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x30, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x3e, 0x0a, 0x08, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x53, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x12, 0x39, 0x0a, 0x06, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x61,
	0x67, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x12, 0x3e, 0x0a, 0x08,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x62, 0x79, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x42, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x42, 0x79, 0x52, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x62, 0x79, 0x73, 0x12, 0x39, 0x0a, 0x06,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73,
	0x6d, 0x74, 0x70, 0x64, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52,
	0x06, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x3d, 0x0a, 0x06, 0x72, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06,
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x12, 0x47, 0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69,
	0x6e, 0x67, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x6d, 0x74, 0x70,
	0x64, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x12,
	0x4b, 0x0a, 0x0f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e,
	0x67, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64,
	0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x0f, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x1a, 0x36, 0x0a, 0x06,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x1a, 0xd8, 0x02, 0x0a, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79,
	0x12, 0x22, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f,
	0x72, 0x74, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e,
	0x74, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52,
	0x0f, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x12, 0x24, 0x0a, 0x0c, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x05, 0x6a, 0x6f, 0x62, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x69, 0x64, 0x12, 0x1c,
	0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x00, 0x52, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x1c, 0x0a, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x08, 0x73, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x69, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x08,
	0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x69, 0x70, 0x12, 0x1c, 0x0a, 0x08, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x69, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x08, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x69, 0x70, 0x12, 0x1c, 0x0a, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x6d, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x08, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x6d, 0x78, 0x12, 0x1a, 0x0a, 0x07, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x70, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x07, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x70,
	0x42, 0x0d, 0x0a, 0x0b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x1a,
	0x88, 0x01, 0x0a, 0x07, 0x53, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x1a, 0x0a, 0x07, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x62, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x07,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x62, 0x79, 0x12, 0x16, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12,
	0x16, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00,
	0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x0d, 0x0a, 0x0b, 0x53,
	0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x1a, 0x30, 0x0a, 0x0a, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x1a, 0x34, 0x0a, 0x0b,
	0x46, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x06, 0x66,
	0x72, 0x65, 0x65, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x73, 0x6d,
	0x74, 0x70, 0x64, 0x2e, 0x46, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x52, 0x06, 0x66, 0x72, 0x65, 0x65,
	0x7a, 0x65, 0x1a, 0x38, 0x0a, 0x0c, 0x57, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x28, 0x0a, 0x07, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x57, 0x6f, 0x72, 0x6b,
	0x69, 0x6e, 0x67, 0x52, 0x07, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x1a, 0xdb, 0x07, 0x0a,
	0x06, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x24, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x48, 0x00, 0x52, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x12, 0x27, 0x0a,
	0x06, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e,
	0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x46, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x48, 0x00, 0x52, 0x06,
	0x66, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x12, 0x2a, 0x0a, 0x07, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e,
	0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e,
	0x57, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x07, 0x77, 0x6f, 0x72, 0x6b, 0x69,
	0x6e, 0x67, 0x12, 0x24, 0x0a, 0x02, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x48, 0x00, 0x52, 0x02, 0x74, 0x73, 0x12, 0x2e, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x72,
	0x79, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x6d, 0x74, 0x70,
	0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52,
	0x07, 0x72, 0x65, 0x74, 0x72, 0x79, 0x74, 0x73, 0x12, 0x36, 0x0a, 0x0a, 0x72, 0x65, 0x74, 0x72,
	0x79, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73,
	0x6d, 0x74, 0x70, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x55, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x48, 0x00, 0x52, 0x0a, 0x72, 0x65, 0x74, 0x72, 0x79, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x32, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x72, 0x65, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x48, 0x00, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x12, 0x44, 0x0a, 0x06, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x06, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x1a, 0xc5, 0x04, 0x0a, 0x0a, 0x52,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x47, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x4d, 0x0a, 0x06, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x33, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x2e, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x48, 0x00, 0x52, 0x06, 0x75, 0x6e, 0x69, 0x71, 0x75,
	0x65, 0x1a, 0xf2, 0x02, 0x0a, 0x06, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x12, 0x22, 0x0a, 0x0b,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x00, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x64,
	0x12, 0x2a, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0f, 0x72, 0x65, 0x63,
	0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x24, 0x0a, 0x0c,
	0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x12, 0x16, 0x0a, 0x05, 0x6a, 0x6f, 0x62, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x00, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x08, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x08,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x1c, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x69, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x08, 0x73, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x69, 0x70, 0x12, 0x1c, 0x0a, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x69, 0x70,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x69, 0x70, 0x12, 0x1c, 0x0a, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x6d, 0x78, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x6d, 0x78,
	0x12, 0x1a, 0x0a, 0x07, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x00, 0x52, 0x07, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x70, 0x12, 0x1e, 0x0a, 0x0a,
	0x6e, 0x6f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x6e, 0x6f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x42, 0x08, 0x0a, 0x06,
	0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x22, 0x1c, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09,
	0x0a, 0x05, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x42, 0x59, 0x54,
	0x45, 0x53, 0x10, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x1a, 0x4e, 0x0a, 0x0e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x26,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0xd8, 0x01, 0x0a, 0x06, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f,
	0x72, 0x74, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69,
	0x70, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x69, 0x70, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x69, 0x70, 0x12, 0x1a, 0x0a,
	0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x6d, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x6d, 0x78, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65, 0x63,
	0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6a, 0x6f, 0x62, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x69, 0x6e, 0x67, 0x22, 0x22, 0x0a, 0x0a, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x00, 0x12, 0x09,
	0x0a, 0x05, 0x42, 0x59, 0x54, 0x45, 0x53, 0x10, 0x01, 0x22, 0xfc, 0x01, 0x0a, 0x14, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x36, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x3a, 0x0a, 0x06, 0x70, 0x61,
	0x67, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x6d, 0x74,
	0x70, 0x64, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x06,
	0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x1a, 0x50, 0x0a, 0x04, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x1a,
	0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x62, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x62, 0x79, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x04, 0x52, 0x06, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x1a, 0x1e, 0x0a, 0x06, 0x50, 0x61, 0x67, 0x69,
	0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0xcf, 0x06, 0x0a, 0x10, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a,
	0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x3b, 0x0a, 0x08, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x69,
	0x6e, 0x67, 0x52, 0x08, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x36, 0x0a, 0x06,
	0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73,
	0x6d, 0x74, 0x70, 0x64, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x70, 0x61,
	0x67, 0x69, 0x6e, 0x67, 0x1a, 0x80, 0x01, 0x0a, 0x12, 0x53, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67,
	0x4d, 0x61, 0x69, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2c, 0x0a, 0x09, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x70, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c,
	0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x00, 0x52, 0x09,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x70, 0x61, 0x72, 0x74, 0x12, 0x26, 0x0a, 0x06, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x73, 0x6d, 0x74, 0x70,
	0x64, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x00, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x42, 0x14, 0x0a, 0x12, 0x53, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x69, 0x6c,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x1a, 0x4e, 0x0a, 0x0e, 0x53, 0x6f, 0x72, 0x74, 0x69,
	0x6e, 0x67, 0x57, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x2a, 0x0a, 0x08, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x73, 0x6d,
	0x74, 0x70, 0x64, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x00, 0x52, 0x08, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x10, 0x0a, 0x0e, 0x53, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67,
	0x57, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x1a, 0x88, 0x03, 0x0a, 0x07, 0x53, 0x6f, 0x72, 0x74,
	0x69, 0x6e, 0x67, 0x12, 0x1e, 0x0a, 0x02, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0c, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x00, 0x52,
	0x02, 0x74, 0x73, 0x12, 0x44, 0x0a, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x6f, 0x72,
	0x74, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x69, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48,
	0x00, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x4a, 0x0a, 0x09, 0x72, 0x65, 0x63,
	0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73,
	0x6d, 0x74, 0x70, 0x64, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x69,
	0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x63, 0x69,
	0x70, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x42, 0x0a, 0x07, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x53, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x57, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x48, 0x00,
	0x52, 0x07, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x28, 0x0a, 0x07, 0x72, 0x65, 0x74,
	0x72, 0x79, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x73, 0x6d, 0x74,
	0x70, 0x64, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x00, 0x52, 0x07, 0x72, 0x65, 0x74, 0x72,
	0x79, 0x74, 0x73, 0x12, 0x22, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0c, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x48,
	0x00, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x2e, 0x0a, 0x0a, 0x72, 0x65, 0x74, 0x72, 0x79,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x73, 0x6d,
	0x74, 0x70, 0x64, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0a, 0x72, 0x65, 0x74,
	0x72, 0x79, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x53, 0x6f, 0x72, 0x74, 0x69,
	0x6e, 0x67, 0x1a, 0x36, 0x0a, 0x06, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0xa0, 0x0e, 0x0a, 0x11, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x38, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x37, 0x0a, 0x06, 0x70, 0x61,
	0x67, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x6d, 0x74,
	0x70, 0x64, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x70, 0x61, 0x67,
	0x69, 0x6e, 0x67, 0x1a, 0xf7, 0x0c, 0x0a, 0x09, 0x51, 0x75, 0x65, 0x75, 0x65, 0x49, 0x74, 0x65,
	0x6d, 0x12, 0x22, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x49,
	0x44, 0x52, 0x02, 0x69, 0x64, 0x12, 0x45, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x12, 0x48, 0x0a, 0x06,
	0x66, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73,
	0x6d, 0x74, 0x70, 0x64, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x49, 0x74, 0x65, 0x6d,
	0x2e, 0x46, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x06,
	0x66, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x12, 0x4b, 0x0a, 0x07, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e,
	0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x57, 0x6f, 0x72, 0x6b,
	0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x07, 0x77, 0x6f, 0x72, 0x6b,
	0x69, 0x6e, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x71, 0x66, 0x70, 0x61, 0x74, 0x68, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x68, 0x71, 0x66, 0x70, 0x61, 0x74, 0x68, 0x12, 0x0e, 0x0a,
	0x02, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x74, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x68, 0x6f, 0x6c,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x6a, 0x6f, 0x62, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6a, 0x6f, 0x62, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x69, 0x6e, 0x67, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x69, 0x6e, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x67, 0x65, 0x69, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x74, 0x61, 0x67, 0x65, 0x69, 0x64, 0x12, 0x4c, 0x0a,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x30, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x70, 0x6f, 0x72, 0x74, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x64, 0x12, 0x46, 0x0a, 0x06, 0x73, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x6d, 0x74, 0x70,
	0x64, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x4d, 0x61,
	0x69, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x12, 0x4c, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x4d, 0x61, 0x69, 0x6c, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x52, 0x09, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x12,
	0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x74, 0x72, 0x79, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0a, 0x72, 0x65, 0x74, 0x72, 0x79, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x74, 0x72, 0x79, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0a, 0x72, 0x65, 0x74, 0x72, 0x79, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x12,
	0x20, 0x0a, 0x0b, 0x72, 0x65, 0x74, 0x72, 0x79, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x74, 0x72, 0x79, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x69,
	0x70, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x69,
	0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x68, 0x65, 0x6c, 0x6f, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x68, 0x65, 0x6c,
	0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x61, 0x73, 0x6c, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x61, 0x73, 0x6c, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x70, 0x73, 0x18, 0x17, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x70, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x69, 0x70, 0x73, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x64, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x70, 0x73, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x69,
	0x70, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x69,
	0x70, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x6d, 0x78, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x6d, 0x78, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x73, 0x18, 0x1b, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x06, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x73, 0x12, 0x38, 0x0a, 0x03, 0x64, 0x73, 0x6e,
	0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x44, 0x53, 0x4e, 0x52, 0x03,
	0x64, 0x73, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18,
	0x1d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x1a,
	0x43, 0x0a, 0x0b, 0x4d, 0x61, 0x69, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1c,
	0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x70, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x70, 0x61, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x1a, 0x30, 0x0a, 0x0a, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x22, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0c, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52,
	0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x1a, 0x34, 0x0a, 0x0b, 0x46, 0x72, 0x65, 0x65, 0x7a, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x06, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x46, 0x72,
	0x65, 0x65, 0x7a, 0x65, 0x52, 0x06, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x1a, 0x7c, 0x0a, 0x0c,
	0x57, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x07,
	0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e,
	0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x77,
	0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x26, 0x0a, 0x0e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x66, 0x72, 0x65, 0x65, 0x7a, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x69, 0x6e, 0x67, 0x12, 0x1a,
	0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x5b, 0x0a, 0x03, 0x44, 0x53,
	0x4e, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6e, 0x76, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x65, 0x6e, 0x76, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x63, 0x70, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6f, 0x72, 0x63, 0x70, 0x74, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x1e, 0x0a,
	0x06, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x78, 0x0a,
	0x12, 0x51, 0x75, 0x65, 0x75, 0x65, 0x55, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x22, 0x65, 0x0a, 0x13, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x55, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x68, 0x71, 0x66, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x08, 0x68, 0x71, 0x66, 0x70, 0x61, 0x74, 0x68, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x61, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x22, 0xd3,
	0x02, 0x0a, 0x12, 0x51, 0x75, 0x65, 0x75, 0x65, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x49,
	0x6d, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x35, 0x0a, 0x05, 0x72, 0x65, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x49, 0x6d, 0x70, 0x6f,
	0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x52,
	0x05, 0x72, 0x65, 0x73, 0x65, 0x74, 0x1a, 0x36, 0x0a, 0x0a, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x66, 0x63, 0x38, 0x32, 0x32, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x72, 0x66, 0x63, 0x38, 0x32, 0x32, 0x12, 0x10, 0x0a, 0x03,
	0x68, 0x71, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x68, 0x71, 0x66, 0x1a, 0x93,
	0x01, 0x0a, 0x05, 0x52, 0x65, 0x73, 0x65, 0x74, 0x12, 0x36, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x64,
	0x12, 0x20, 0x0a, 0x02, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x73,
	0x6d, 0x74, 0x70, 0x64, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x02,
	0x74, 0x73, 0x12, 0x30, 0x0a, 0x0a, 0x72, 0x65, 0x74, 0x72, 0x79, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x74, 0x72, 0x79, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0x3b, 0x0a, 0x13, 0x51, 0x75, 0x65, 0x75, 0x65, 0x49, 0x6d, 0x70,
	0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x69,
	0x64, 0x22, 0x38, 0x0a, 0x12, 0x51, 0x75, 0x65, 0x75, 0x65, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x44, 0x52, 0x02, 0x69, 0x64, 0x22, 0x9f, 0x01, 0x0a, 0x15,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x47, 0x72, 0x65, 0x65, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x69,
	0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x69, 0x70, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x69, 0x64, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x69, 0x64,
	0x73, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xad, 0x01,
	0x0a, 0x19, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x47, 0x72, 0x65, 0x65, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x3c, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x47, 0x72, 0x65, 0x65, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xaa, 0x01,
	0x0a, 0x18, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x47, 0x72, 0x65, 0x65, 0x6e, 0x44, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x0a, 0x63, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x47, 0x72, 0x65,
	0x65, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0a, 0x63, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x28, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x62, 0x6f,
	0x75, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x22, 0x91, 0x02, 0x0a, 0x10, 0x48,
	0x53, 0x4c, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x32, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x48, 0x53, 0x4c, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x1a, 0xc8, 0x01, 0x0a, 0x04, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x1c, 0x0a, 0x09,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x73, 0x69, 0x7a, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04,
	0x73, 0x69, 0x7a, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x69, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x04, 0x68, 0x69, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69, 0x73, 0x73,
	0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6d, 0x69, 0x73, 0x73, 0x65, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x65, 0x76, 0x69, 0x63, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x06, 0x65, 0x76, 0x69, 0x63, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x61, 0x69, 0x74,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x77, 0x61, 0x69, 0x74, 0x73, 0x22, 0x89,
	0x02, 0x0a, 0x0e, 0x48, 0x53, 0x4c, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x3a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x48, 0x53, 0x4c, 0x4c,
	0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x1a, 0x96, 0x01, 0x0a, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c,
	0x0a, 0x09, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x65, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x65,
	0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x62, 0x65, 0x67,
	0x69, 0x6e, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x6e, 0x64, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x65, 0x6e, 0x64,
	0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x22, 0xde, 0x03, 0x0a, 0x15, 0x48,
	0x53, 0x4c, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x62, 0x75, 0x67, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x65, 0x62, 0x75, 0x67, 0x69, 0x64, 0x12, 0x24,
	0x0a, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x48,
	0x53, 0x4c, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x74, 0x61, 0x63, 0x6b,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x48,
	0x53, 0x4c, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x09,
	0x63, 0x61, 0x6c, 0x6c, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x1a, 0x96, 0x01, 0x0a, 0x08, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x62, 0x65, 0x67, 0x69, 0x6e,
	0x6c, 0x69, 0x6e, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0b, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x12, 0x1c, 0x0a, 0x09, 0x65, 0x6e, 0x64, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x69,
	0x6c, 0x65, 0x1a, 0x27, 0x0a, 0x09, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x12,
	0x1a, 0x0a, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x80, 0x02, 0x0a, 0x14,
	0x48, 0x53, 0x4c, 0x43, 0x61, 0x63, 0x68, 0x65, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x2e, 0x0a, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x66, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x09, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x6d, 0x74, 0x70,
	0x64, 0x2e, 0x48, 0x53, 0x4c, 0x43, 0x61, 0x63, 0x68, 0x65, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x1a, 0x3c, 0x0a, 0x0e, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x33,
	0x0a, 0x15, 0x48, 0x53, 0x4c, 0x43, 0x61, 0x63, 0x68, 0x65, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x61, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x22, 0xe7, 0x28, 0x0a, 0x14, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x07,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x40, 0x0a, 0x08, 0x72,
	0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c,
	0x76, 0x65, 0x72, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x12, 0x44, 0x0a,
	0x07, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x73, 0x12, 0x37, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x12, 0x3d, 0x0a, 0x07,
	0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x61,
	0x64, 0x73, 0x52, 0x07, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x1a, 0xc9, 0x01, 0x0a, 0x07,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x70, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x75, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x72, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x12, 0x45, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x4b, 0x0a, 0x07, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6d,
	0x69, 0x6e, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6d, 0x69, 0x6e, 0x6f,
	0x72, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x74, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x05, 0x70, 0x61, 0x74, 0x63, 0x68, 0x1a, 0x53, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x63, 0x6f, 0x6e,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x6d,
	0x61, 0x78, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x1a, 0xc4, 0x01, 0x0a,
	0x06, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x65, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x07, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x66,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x66,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x07, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x75, 0x73,
	0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x75,
	0x73, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x68, 0x72, 0x65, 0x61,
	0x64, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x68, 0x72, 0x65, 0x61,
	0x64, 0x69, 0x64, 0x1a, 0xe7, 0x03, 0x0a, 0x07, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x73, 0x12,
	0x3c, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x12, 0x38, 0x0a,
	0x05, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73,
	0x6d, 0x74, 0x70, 0x64, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x52, 0x05, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x36, 0x0a, 0x04, 0x68, 0x65, 0x6c, 0x6f, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x04, 0x68, 0x65, 0x6c, 0x6f, 0x12,
	0x36, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x3e, 0x0a, 0x08, 0x6d, 0x61, 0x69, 0x6c, 0x66,
	0x72, 0x6f, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x6d, 0x74, 0x70,
	0x64, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x08, 0x6d,
	0x61, 0x69, 0x6c, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x3a, 0x0a, 0x06, 0x72, 0x63, 0x70, 0x74, 0x74,
	0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x06, 0x72, 0x63, 0x70,
	0x74, 0x74, 0x6f, 0x12, 0x34, 0x0a, 0x03, 0x65, 0x6f, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x52, 0x03, 0x65, 0x6f, 0x64, 0x12, 0x42, 0x0a, 0x0a, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x52, 0x0a, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x1a, 0xb6, 0x01,
	0x0a, 0x0e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x69, 0x64, 0x12, 0x49, 0x0a, 0x0b,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3d, 0x0a, 0x07, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64,
	0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x73, 0x52, 0x07, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x73, 0x1a, 0x91, 0x05, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x6c,
	0x76, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x14, 0x0a,
	0x05, 0x64, 0x65, 0x64, 0x75, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x64, 0x65,
	0x64, 0x75, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x1e, 0x0a,
	0x0a, 0x6d, 0x61, 0x78, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x40, 0x0a,
	0x05, 0x63, 0x61, 0x63, 0x68, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73,
	0x6d, 0x74, 0x70, 0x64, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76,
	0x65, 0x72, 0x2e, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x05, 0x63, 0x61, 0x63, 0x68, 0x65, 0x12,
	0x43, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73,
	0x6f, 0x6c, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x06, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x1a, 0xa9, 0x01, 0x0a, 0x05, 0x43, 0x61, 0x63, 0x68, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x61, 0x78, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x07, 0x6d, 0x61, 0x78, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x68, 0x69, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x68, 0x69, 0x74, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69, 0x73, 0x73, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x06, 0x6d, 0x69, 0x73, 0x73, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x76, 0x69, 0x63, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x06, 0x65, 0x76, 0x69, 0x63, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x6b,
	0x69, 0x70, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x73, 0x6b, 0x69, 0x70, 0x73,
	0x1a, 0xe7, 0x01, 0x0a, 0x06, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x47, 0x0a, 0x05, 0x63,
	0x61, 0x63, 0x68, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x73, 0x6d, 0x74,
	0x70, 0x64, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72,
	0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x05, 0x63,
	0x61, 0x63, 0x68, 0x65, 0x1a, 0x93, 0x01, 0x0a, 0x05, 0x43, 0x61, 0x63, 0x68, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x61, 0x78, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x07, 0x6d, 0x61, 0x78, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x68, 0x69, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x68, 0x69, 0x74, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69, 0x73, 0x73, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x06, 0x6d, 0x69, 0x73, 0x73, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x76, 0x69, 0x63, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x06, 0x65, 0x76, 0x69, 0x63, 0x74, 0x73, 0x1a, 0xd1, 0x15, 0x0a, 0x05, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x12, 0x40, 0x0a, 0x06, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06,
	0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x12, 0x43, 0x0a, 0x07, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x53, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x73, 0x52, 0x07, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x73, 0x12, 0x3d, 0x0a, 0x05, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x6d, 0x74,
	0x70, 0x64, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x52, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x12, 0x40, 0x0a, 0x06, 0x66, 0x72,
	0x65, 0x65, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x6d, 0x74,
	0x70, 0x64, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x46, 0x72,
	0x65, 0x65, 0x7a, 0x65, 0x52, 0x06, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x12, 0x40, 0x0a, 0x06,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73,
	0x6d, 0x74, 0x70, 0x64, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x40,
	0x0a, 0x06, 0x70, 0x69, 0x63, 0x6b, 0x75, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x2e, 0x50, 0x69, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x06, 0x70, 0x69, 0x63, 0x6b, 0x75, 0x70,
	0x12, 0x4f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x3d, 0x0a, 0x05, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x52, 0x05, 0x71, 0x75, 0x6f, 0x74, 0x61,
	0x12, 0x46, 0x0a, 0x08, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x52, 0x08,
	0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x12, 0x43, 0x0a, 0x07, 0x72, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x6d, 0x74, 0x70,
	0x64, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x52, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x52, 0x07, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x1a, 0xc4, 0x01,
	0x0a, 0x06, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x65, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x70, 0x65, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x07, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x1a, 0x0a, 0x08,
	0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08,
	0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x07, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x75,
	0x73, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73,
	0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x68, 0x72, 0x65,
	0x61, 0x64, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x68, 0x72, 0x65,
	0x61, 0x64, 0x69, 0x64, 0x1a, 0xa3, 0x01, 0x0a, 0x07, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x73,
	0x12, 0x4a, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52,
	0x0b, 0x70, 0x72, 0x65, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x12, 0x4c, 0x0a, 0x0c,
	0x70, 0x6f, 0x73, 0x74, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x0c, 0x70, 0x6f,
	0x73, 0x74, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x1a, 0x6e, 0x0a, 0x06, 0x4c, 0x6f,
	0x61, 0x64, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x65,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x70, 0x65, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x6d, 0x61, 0x78, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x6d, 0x61, 0x78, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x1a, 0xc9, 0x02, 0x0a, 0x05, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x12, 0x43, 0x0a, 0x05, 0x64, 0x65, 0x66, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x44, 0x65, 0x66,
	0x65, 0x72, 0x52, 0x05, 0x64, 0x65, 0x66, 0x65, 0x72, 0x12, 0x46, 0x0a, 0x06, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x6d, 0x74, 0x70,
	0x64, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x1a, 0x1b, 0x0a, 0x05, 0x44, 0x65, 0x66, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x1a, 0x95,
	0x01, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x57, 0x0a,
	0x0a, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x37, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x2e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x69, 0x65, 0x73, 0x1a, 0x1e, 0x0a, 0x08, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x1a, 0xe8, 0x01, 0x0a, 0x06, 0x46, 0x72, 0x65, 0x65, 0x7a,
	0x65, 0x12, 0x41, 0x0a, 0x04, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x2e, 0x46, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x2e, 0x48, 0x6f, 0x6c, 0x64, 0x52, 0x04,
	0x68, 0x6f, 0x6c, 0x64, 0x12, 0x47, 0x0a, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x46, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x1a, 0x1a, 0x0a,
	0x04, 0x48, 0x6f, 0x6c, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x1a, 0x36, 0x0a, 0x06, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x65, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x1a, 0xbb, 0x03, 0x0a, 0x06, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x56, 0x0a, 0x0b,
	0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x34, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x43, 0x6f, 0x6e, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x12, 0x41, 0x0a, 0x04, 0x72, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x52, 0x61, 0x74,
	0x65, 0x52, 0x04, 0x72, 0x61, 0x74, 0x65, 0x12, 0x4a, 0x0a, 0x07, 0x64, 0x79, 0x6e, 0x61, 0x6d,
	0x69, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64,
	0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x52, 0x07, 0x64, 0x79, 0x6e, 0x61,
	0x6d, 0x69, 0x63, 0x1a, 0x45, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x08, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x73, 0x1a, 0x3c, 0x0a, 0x04, 0x52, 0x61,
	0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x07, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08,
	0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x73, 0x1a, 0x45, 0x0a, 0x07, 0x44, 0x79, 0x6e, 0x61,
	0x6d, 0x69, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x73, 0x12,
	0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a,
	0xab, 0x01, 0x0a, 0x07, 0x50, 0x6f, 0x6f, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x07, 0x6d, 0x61, 0x78, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x69, 0x74,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x68, 0x69, 0x74, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x6d, 0x69, 0x73, 0x73, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6d,
	0x69, 0x73, 0x73, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x65, 0x76, 0x69, 0x63, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x65, 0x76, 0x69, 0x63, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x6b, 0x69, 0x70, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x73, 0x6b, 0x69, 0x70, 0x73, 0x1a, 0x98, 0x01,
	0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1e, 0x0a,
	0x0a, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x24, 0x0a,
	0x0d, 0x6d, 0x61, 0x78, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x6d, 0x61, 0x78, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x12, 0x43, 0x0a, 0x07, 0x70, 0x6f, 0x6f, 0x6c, 0x69, 0x6e, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x50, 0x6f, 0x6f, 0x6c, 0x69, 0x6e, 0x67, 0x52,
	0x07, 0x70, 0x6f, 0x6f, 0x6c, 0x69, 0x6e, 0x67, 0x1a, 0x66, 0x0a, 0x06, 0x50, 0x69, 0x63, 0x6b,
	0x75, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x6b, 0x69, 0x70,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x73, 0x6b, 0x69, 0x70, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x6d, 0x69, 0x73, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x6d, 0x69, 0x73, 0x73, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x1a, 0x1b, 0x0a, 0x05, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x1a, 0x5a, 0x0a,
	0x08, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x64, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x61, 0x79,
	0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x65,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x1a, 0x23, 0x0a, 0x07, 0x52, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x1a, 0x9c,
	0x02, 0x0a, 0x07, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x12, 0x45, 0x0a, 0x07, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x6d,
	0x74, 0x70, 0x64, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73,
	0x2e, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x73, 0x52, 0x07, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x73, 0x1a, 0xc9, 0x01, 0x0a, 0x07, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x73, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07,
	0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x72, 0x65,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x75, 0x6e,
	0x6e, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x72, 0x75, 0x6e, 0x6e,
	0x69, 0x6e, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e,
	0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x72, 0x75, 0x6e, 0x6e,
	0x69, 0x6e, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x73, 0x12, 0x1e, 0x0a,
	0x0a, 0x6d, 0x61, 0x78, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x73, 0x22, 0x29, 0x0a,
	0x11, 0x51, 0x75, 0x65, 0x75, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x22, 0x40, 0x0a, 0x12, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x22, 0x24, 0x0a, 0x10, 0x48, 0x53,
	0x4c, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x22, 0x29, 0x0a, 0x11, 0x48, 0x53, 0x4c, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x82, 0x02, 0x0a, 0x14,
	0x48, 0x53, 0x4c, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e,
	0x48, 0x53, 0x4c, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x06, 0x70, 0x61, 0x67,
	0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x6d, 0x74, 0x70,
	0x64, 0x2e, 0x48, 0x53, 0x4c, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x70,
	0x61, 0x67, 0x69, 0x6e, 0x67, 0x1a, 0x31, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x1a, 0x36, 0x0a, 0x06, 0x50, 0x61, 0x67, 0x69,
	0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x22, 0x2b, 0x0a, 0x15, 0x48, 0x53, 0x4c, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x65, 0x79,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x22, 0x57, 0x0a,
	0x15, 0x48, 0x53, 0x4c, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x22, 0x2e, 0x0a, 0x16, 0x48, 0x53, 0x4c, 0x4d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x42, 0x0a, 0x16, 0x48, 0x53, 0x4c, 0x4d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x22, 0x4b, 0x0a, 0x17, 0x48, 0x53,
	0x4c, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xd9, 0x04, 0x0a, 0x0e, 0x53, 0x75, 0x73, 0x70,
	0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09,
	0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a,
	0x06, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x70, 0x61, 0x67,
	0x69, 0x6e, 0x67, 0x1a, 0x93, 0x03, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x34, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x69, 0x70, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x69, 0x70, 0x73, 0x12, 0x2e, 0x0a, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x69, 0x70, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x69, 0x70, 0x12, 0x2e, 0x0a, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x6d, 0x78, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x6d, 0x78, 0x12, 0x3c, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73,
	0x6d, 0x74, 0x70, 0x64, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0f, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x12, 0x28, 0x0a, 0x05, 0x6a, 0x6f, 0x62, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x08, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x24, 0x0a, 0x03, 0x74,
	0x61, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x74, 0x61,
	0x67, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x69, 0x63, 0x6b, 0x75, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x70, 0x69, 0x63, 0x6b, 0x75, 0x70, 0x1a, 0x1e, 0x0a, 0x06, 0x50, 0x61, 0x67,
	0x69, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x22, 0xe6, 0x04, 0x0a, 0x0f, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x53,
	0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x1a, 0xe1, 0x03, 0x0a, 0x04, 0x49,
	0x74, 0x65, 0x6d, 0x12, 0x35, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x53, 0x75, 0x73, 0x70,
	0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x34, 0x0a, 0x0b, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x64,
	0x12, 0x2c, 0x0a, 0x07, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x70, 0x12, 0x2e,
	0x0a, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x69, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x69, 0x70, 0x12, 0x2e,
	0x0a, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x6d, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x6d, 0x78, 0x12, 0x3c,
	0x0a, 0x0f, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x72, 0x65, 0x63,
	0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x28, 0x0a, 0x05,
	0x6a, 0x6f, 0x62, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x6d,
	0x74, 0x70, 0x64, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x05, 0x6a, 0x6f, 0x62, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69,
	0x6e, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x74, 0x6c, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x03, 0x74, 0x74, 0x6c, 0x12, 0x24, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x74, 0x61, 0x67, 0x22, 0x3c,
	0x0a, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x41, 0x54,
	0x49, 0x43, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x4f, 0x4e, 0x43, 0x55, 0x52, 0x52, 0x45,
	0x4e, 0x43, 0x59, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x52, 0x41, 0x54, 0x45, 0x10, 0x02, 0x12,
	0x0b, 0x0a, 0x07, 0x44, 0x59, 0x4e, 0x41, 0x4d, 0x49, 0x43, 0x10, 0x03, 0x22, 0xb7, 0x03, 0x0a,
	0x11, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x34, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x07, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x6d, 0x74, 0x70,
	0x64, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x69, 0x70, 0x12, 0x2e, 0x0a, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x69, 0x70, 0x12, 0x2e, 0x0a, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x6d, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x6d, 0x78, 0x12, 0x3c, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69,
	0x65, 0x6e, 0x74, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x12, 0x28, 0x0a, 0x05, 0x6a, 0x6f, 0x62, 0x69, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x69, 0x64, 0x12, 0x2e,
	0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x10,
	0x0a, 0x03, 0x74, 0x74, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x74, 0x74, 0x6c,
	0x12, 0x24, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x03, 0x74, 0x61, 0x67, 0x22, 0x24, 0x0a, 0x12, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e,
	0x64, 0x41, 0x64, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x5e, 0x0a, 0x14,
	0x53, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x74, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x03, 0x74, 0x74, 0x6c, 0x12, 0x24, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x74, 0x61, 0x67, 0x22, 0x33, 0x0a, 0x15,
	0x53, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x22, 0x26, 0x0a, 0x14, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x33, 0x0a, 0x15, 0x53, 0x75, 0x73,
	0x70, 0x65, 0x6e, 0x64, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x22, 0xa1,
	0x09, 0x0a, 0x19, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x06,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73,
	0x6d, 0x74, 0x70, 0x64, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x33, 0x0a,
	0x02, 0x69, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x6d, 0x74, 0x70,
	0x64, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x66, 0x52, 0x02,
	0x69, 0x66, 0x12, 0x39, 0x0a, 0x04, 0x74, 0x68, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x54, 0x68, 0x65, 0x6e, 0x52, 0x04, 0x74, 0x68, 0x65, 0x6e, 0x12, 0x10, 0x0a,
	0x03, 0x74, 0x74, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x74, 0x74, 0x6c, 0x1a,
	0xd8, 0x01, 0x0a, 0x06, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x69, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x69, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x6d, 0x78, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x6d, 0x78, 0x12, 0x28,
	0x0a, 0x0f, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65,
	0x6e, 0x74, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6a, 0x6f, 0x62, 0x69,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x69, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x1a, 0xe0, 0x02, 0x0a, 0x02, 0x49,
	0x66, 0x12, 0x34, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x07, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x69, 0x70, 0x12, 0x2e, 0x0a, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x69,
	0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x69, 0x70, 0x12, 0x2e, 0x0a, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x6d,
	0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x6d, 0x78, 0x12, 0x3c, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65,
	0x6e, 0x74, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x12, 0x28, 0x0a, 0x05, 0x6a, 0x6f, 0x62, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x69, 0x64, 0x12, 0x2e, 0x0a,
	0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x1a, 0xf2, 0x02,
	0x0a, 0x04, 0x54, 0x68, 0x65, 0x6e, 0x12, 0x3e, 0x0a, 0x04, 0x72, 0x61, 0x74, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x68, 0x65, 0x6e, 0x2e, 0x52, 0x61, 0x74, 0x65,
	0x52, 0x04, 0x72, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x63, 0x6f, 0x6e,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x24, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x74, 0x6f, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x73, 0x74,
	0x6f, 0x70, 0x12, 0x55, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x68, 0x65, 0x6e, 0x2e, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x70,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x1a, 0x38, 0x0a, 0x04, 0x52, 0x61, 0x74,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x1a, 0x3d, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x2c, 0x0a, 0x1a, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x22, 0xe0, 0x02, 0x0a, 0x1c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x3c, 0x0a, 0x04, 0x74, 0x68, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x68, 0x65, 0x6e, 0x52, 0x04, 0x74, 0x68, 0x65, 0x6e, 0x12,
	0x10, 0x0a, 0x03, 0x74, 0x74, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x74, 0x74,
	0x6c, 0x1a, 0xdf, 0x01, 0x0a, 0x04, 0x54, 0x68, 0x65, 0x6e, 0x12, 0x41, 0x0a, 0x04, 0x72, 0x61,
	0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64,
	0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x68,
	0x65, 0x6e, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x52, 0x04, 0x72, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12,
	0x24, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73,
	0x6d, 0x74, 0x70, 0x64, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x74, 0x6f, 0x70, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x04, 0x73, 0x74, 0x6f, 0x70, 0x1a, 0x38, 0x0a, 0x04, 0x52, 0x61, 0x74,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x22, 0x3b, 0x0a, 0x1d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x22, 0x2e, 0x0a, 0x1c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x3b, 0x0a, 0x1d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x08, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x22, 0xf2, 0x09,
	0x0a, 0x17, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64,
	0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x1a, 0x9b, 0x09, 0x0a, 0x04, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x42, 0x0a,
	0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x49, 0x74,
	0x65, 0x6d, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x12, 0x36, 0x0a, 0x02, 0x69, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x49, 0x74,
	0x65, 0x6d, 0x2e, 0x49, 0x66, 0x52, 0x02, 0x69, 0x66, 0x12, 0x3c, 0x0a, 0x04, 0x74, 0x68, 0x65,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x54, 0x68, 0x65,
	0x6e, 0x52, 0x04, 0x74, 0x68, 0x65, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x74, 0x6c, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x74, 0x74, 0x6c, 0x1a, 0xd8, 0x01, 0x0a, 0x06, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72,
	0x74, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x70, 0x6f, 0x72, 0x74, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69,
	0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x70,
	0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x69, 0x70, 0x12, 0x1a, 0x0a, 0x08,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x6d, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x6d, 0x78, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x69,
	0x70, 0x69, 0x65, 0x6e, 0x74, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6a, 0x6f, 0x62, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x69, 0x6e, 0x67, 0x1a, 0xe0, 0x02, 0x0a, 0x02, 0x49, 0x66, 0x12, 0x34, 0x0a, 0x0b, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x69,
	0x64, 0x12, 0x2c, 0x0a, 0x07, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x70, 0x12,
	0x2e, 0x0a, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x69, 0x70, 0x12,
	0x2e, 0x0a, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x6d, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x6d, 0x78, 0x12,
	0x3c, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x72, 0x65,
	0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x28, 0x0a,
	0x05, 0x6a, 0x6f, 0x62, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73,
	0x6d, 0x74, 0x70, 0x64, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x05, 0x6a, 0x6f, 0x62, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x6d, 0x74, 0x70,
	0x64, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x1a, 0xf8, 0x02, 0x0a, 0x04, 0x54, 0x68, 0x65, 0x6e,
	0x12, 0x41, 0x0a, 0x04, 0x72, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x49,
	0x74, 0x65, 0x6d, 0x2e, 0x54, 0x68, 0x65, 0x6e, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x52, 0x04, 0x72,
	0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x24, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x74, 0x6f, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x73, 0x74, 0x6f, 0x70, 0x12,
	0x58, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x54, 0x68, 0x65, 0x6e, 0x2e, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x70,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x1a, 0x38, 0x0a, 0x04, 0x52, 0x61, 0x74,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x1a, 0x3d, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x8d, 0x03, 0x0a, 0x17, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x66, 0x69, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34,
	0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f,
	0x72, 0x74, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x07, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x70, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x69, 0x70, 0x12, 0x2e, 0x0a, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x69, 0x70, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x69, 0x70, 0x12, 0x2e, 0x0a, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x6d, 0x78, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x6d, 0x78, 0x12, 0x3c, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x6d,
	0x74, 0x70, 0x64, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0f, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x12, 0x28, 0x0a, 0x05, 0x6a, 0x6f, 0x62, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x08, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73,
	0x6d, 0x74, 0x70, 0x64, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x73, 0x22, 0x36, 0x0a, 0x18, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x66, 0x69, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x08, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x22, 0x44, 0x0a, 0x14, 0x50, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x09, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x22, 0x33, 0x0a, 0x15, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xeb, 0x02, 0x0a, 0x1c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4b, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x6d, 0x74, 0x70,
	0x64, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x06, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52,
	0x06, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x1a, 0x81, 0x01, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x69, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x69,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x70, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x70, 0x1a, 0x36, 0x0a, 0x06, 0x50,
	0x61, 0x67, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x22, 0x93, 0x03, 0x0a, 0x1d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x6d, 0x74,
	0x70, 0x64, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x9e, 0x02, 0x0a, 0x0a, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x69, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x70, 0x74, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x70, 0x74, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x70,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x70, 0x12,
	0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x8c, 0x02, 0x0a, 0x1d, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43,
	0x6c, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x05, 0x72,
	0x65, 0x70, 0x6c, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x6d, 0x74,
	0x70, 0x64, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x22, 0x0a,
	0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x69,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x69, 0x70, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x69, 0x70, 0x12, 0x1a, 0x0a,
	0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x69, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x69, 0x70, 0x1a, 0x33, 0x0a, 0x05, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x3c, 0x0a, 0x1e, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6c, 0x6f,
	0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x61, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x22, 0xa6, 0x03, 0x0a, 0x1b, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x6d, 0x74, 0x70,
	0x64, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x06, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x70,
	0x61, 0x67, 0x69, 0x6e, 0x67, 0x1a, 0xbf, 0x01, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69,
	0x70, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x69, 0x70, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x69, 0x70, 0x12, 0x1a, 0x0a,
	0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x6d, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x6d, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f,
	0x78, 0x79, 0x69, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x78,
	0x79, 0x69, 0x70, 0x12, 0x22, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x49, 0x74, 0x65,
	0x6d, 0x49, 0x44, 0x52, 0x02, 0x69, 0x64, 0x1a, 0x36, 0x0a, 0x06, 0x50, 0x61, 0x67, 0x69, 0x6e,
	0x67, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22,
	0xed, 0x03, 0x0a, 0x1c, 0x51, 0x75, 0x65, 0x75, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x50, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x1a, 0xfa, 0x02, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x70,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x70, 0x12,
	0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x69, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x69, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x6d, 0x78, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x6d, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x69, 0x70,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x69, 0x70, 0x12,
	0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x65, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x44, 0x52, 0x02, 0x69, 0x64, 0x22,
	0xd2, 0x01, 0x0a, 0x1c, 0x51, 0x75, 0x65, 0x75, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x70, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x70, 0x12, 0x1a,
	0x0a, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x69, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x6d, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x6d, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x69,
	0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x69, 0x70,
	0x12, 0x22, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73,
	0x6d, 0x74, 0x70, 0x64, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x44,
	0x52, 0x02, 0x69, 0x64, 0x22, 0x3b, 0x0a, 0x1d, 0x51, 0x75, 0x65, 0x75, 0x65, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x22, 0xe4, 0x01, 0x0a, 0x12, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x69, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x69, 0x70,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x69, 0x70,
	0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x6d, 0x78, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x6d, 0x78, 0x12, 0x28, 0x0a, 0x0f,
	0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6a, 0x6f, 0x62, 0x69, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x22, 0xbc, 0x0a, 0x0a, 0x13, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x42, 0x0a, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x08, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x69, 0x65, 0x73, 0x1a, 0xe0, 0x09, 0x0a, 0x0b, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x12, 0x45, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x4b, 0x0a, 0x08, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e,
	0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x08,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x48, 0x0a, 0x07, 0x64, 0x79, 0x6e, 0x61,
	0x6d, 0x69, 0x63, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x6d, 0x74, 0x70,
	0x64, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x52, 0x07, 0x64, 0x79, 0x6e, 0x61, 0x6d,
	0x69, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x6d,
	0x74, 0x70, 0x64, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0b, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x3f, 0x0a, 0x04,
	0x72, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x6d, 0x74,
	0x70, 0x64, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x52, 0x04, 0x72, 0x61, 0x74, 0x65, 0x12, 0x56, 0x0a,
	0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x36, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x74, 0x6f, 0x70, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x04, 0x73, 0x74, 0x6f, 0x70, 0x1a, 0xd8, 0x01, 0x0a, 0x06, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72,
	0x74, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x70, 0x6f, 0x72, 0x74, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69,
	0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x70,
	0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x69, 0x70, 0x12, 0x1a, 0x0a, 0x08,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x6d, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x6d, 0x78, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x69,
	0x70, 0x69, 0x65, 0x6e, 0x74, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6a, 0x6f, 0x62, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x69, 0x6e, 0x67, 0x1a, 0xe6, 0x02, 0x0a, 0x08, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e,
	0x67, 0x12, 0x34, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x07, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x69, 0x70, 0x12, 0x2e, 0x0a, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x69,
	0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x69, 0x70, 0x12, 0x2e, 0x0a, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x6d,
	0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x6d, 0x78, 0x12, 0x3c, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65,
	0x6e, 0x74, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x12, 0x28, 0x0a, 0x05, 0x6a, 0x6f, 0x62, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x69, 0x64, 0x12, 0x2e, 0x0a,
	0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x1a, 0x3f, 0x0a,
	0x07, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x74, 0x61, 0x67, 0x1a, 0x38,
	0x0a, 0x04, 0x52, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x1a, 0x3d, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x94, 0x01, 0x0a, 0x19, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x06, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x06,
	0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x1a, 0x36, 0x0a, 0x06, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67,
	0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x80,
	0x05, 0x0a, 0x1a, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e,
	0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a,
	0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x09, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x1a, 0x97, 0x04, 0x0a, 0x08, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x69, 0x6e, 0x67, 0x12, 0x49, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67,
	0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12,
	0x22, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72,
	0x74, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x07, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x70, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x70, 0x12,
	0x1c, 0x0a, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x69, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x69, 0x70, 0x12, 0x1c, 0x0a,
	0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x6d, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x6d, 0x78, 0x12, 0x2a, 0x0a, 0x0f, 0x72,
	0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e,
	0x74, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x05, 0x6a, 0x6f, 0x62, 0x69, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x69, 0x64, 0x12,
	0x1c, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x1a, 0xd8, 0x01,
	0x0a, 0x06, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x69, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x69, 0x70,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x69, 0x70,
	0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x6d, 0x78, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x6d, 0x78, 0x12, 0x28, 0x0a, 0x0f,
	0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6a, 0x6f, 0x62, 0x69, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x42, 0x07, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x22, 0x96, 0x04, 0x0a, 0x15, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x06, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x6d,
	0x74, 0x70, 0x64, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x22, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x07,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x07, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x70, 0x12, 0x1c, 0x0a, 0x08, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x69, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x69, 0x70, 0x12, 0x1c, 0x0a, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x6d, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x6d, 0x78, 0x12, 0x2a, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e,
	0x74, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x0f, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x12, 0x16, 0x0a, 0x05, 0x6a, 0x6f, 0x62, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x69, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x1a, 0xd8, 0x01, 0x0a, 0x06, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72,
	0x74, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x70, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x70, 0x12, 0x1a, 0x0a,
	0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x69, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x6d, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x6d, 0x78, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65,
	0x6e, 0x74, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f,
	0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12,
	0x14, 0x0a, 0x05, 0x6a, 0x6f, 0x62, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05,
	0x6a, 0x6f, 0x62, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e,
	0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e,
	0x67, 0x42, 0x07, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x22, 0x2e, 0x0a, 0x16, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x47, 0x0a, 0x19, 0x52, 0x65,
	0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x43, 0x61, 0x63, 0x68, 0x65, 0x43, 0x6c, 0x65, 0x61, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x22, 0x38, 0x0a, 0x1a, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x43,
	0x61, 0x63, 0x68, 0x65, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x08, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x22, 0xc6, 0x03,
	0x0a, 0x10, 0x54, 0x72, 0x61, 0x63, 0x65, 0x53, 0x4d, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x34, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x07, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x6d, 0x74, 0x70,
	0x64, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x69, 0x70, 0x12, 0x2e, 0x0a, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x69, 0x70, 0x12, 0x2e, 0x0a, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x6d, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x6d, 0x78, 0x12, 0x3c, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69,
	0x65, 0x6e, 0x74, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x12, 0x28, 0x0a, 0x05, 0x6a, 0x6f, 0x62, 0x69, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x69, 0x64, 0x12, 0x2e,
	0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x64, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x65, 0x78, 0x64,
	0x75, 0x6d, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x68, 0x65, 0x78, 0x64, 0x75,
	0x6d, 0x70, 0x12, 0x22, 0x0a, 0x0c, 0x6e, 0x6f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x69,
	0x6e, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x6e, 0x6f, 0x70, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x2a, 0x1e, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x75, 0x65, 0x12,
	0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x44,
	0x45, 0x46, 0x45, 0x52, 0x10, 0x01, 0x2a, 0x1e, 0x0a, 0x06, 0x46, 0x72, 0x65, 0x65, 0x7a, 0x65,
	0x12, 0x08, 0x0a, 0x04, 0x48, 0x4f, 0x4c, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x50,
	0x44, 0x41, 0x54, 0x45, 0x10, 0x01, 0x2a, 0x23, 0x0a, 0x07, 0x57, 0x6f, 0x72, 0x6b, 0x69, 0x6e,
	0x67, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0b,
	0x0a, 0x07, 0x53, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x2a, 0x24, 0x0a, 0x0a, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45, 0x4c,
	0x45, 0x54, 0x45, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x42, 0x4f, 0x55, 0x4e, 0x43, 0x45, 0x10,
	0x01, 0x2a, 0x1a, 0x0a, 0x05, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x53,
	0x43, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x45, 0x53, 0x43, 0x10, 0x01, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_smtpd_proto_rawDescOnce sync.Once
	file_smtpd_proto_rawDescData = file_smtpd_proto_rawDesc
)

func file_smtpd_proto_rawDescGZIP() []byte {
	file_smtpd_proto_rawDescOnce.Do(func() {
		file_smtpd_proto_rawDescData = protoimpl.X.CompressGZIP(file_smtpd_proto_rawDescData)
	})
	return file_smtpd_proto_rawDescData
}

var file_smtpd_proto_enumTypes = make([]protoimpl.EnumInfo, 11)
var file_smtpd_proto_msgTypes = make([]protoimpl.MessageInfo, 198)
var file_smtpd_proto_goTypes = []any{
	(Queue)(0),                      // 0: smtpd.Queue
	(Freeze)(0),                     // 1: smtpd.Freeze
	(Working)(0),                    // 2: smtpd.Working
	(ActionType)(0),                 // 3: smtpd.ActionType
	(Order)(0),                      // 4: smtpd.Order
	(StringRegexValue_MatchType)(0), // 5: smtpd.StringRegexValue.MatchType
	(StringMatch_MatchType)(0),      // 6: smtpd.StringMatch.MatchType
	(Condition_CompareStringRegexValue_MatchType)(0),         // 7: smtpd.Condition.CompareStringRegexValue.MatchType
	(QueueGroupByRequest_ReturnType)(0),                      // 8: smtpd.QueueGroupByRequest.ReturnType
	(QueueGroupByRequest_Counts_ReturnType_Type)(0),          // 9: smtpd.QueueGroupByRequest.Counts.ReturnType.Type
	(SuspendResponse_Source)(0),                              // 10: smtpd.SuspendResponse.Source
	(*UInt64Value)(nil),                                      // 11: smtpd.UInt64Value
	(*DoubleValue)(nil),                                      // 12: smtpd.DoubleValue
	(*StringValue)(nil),                                      // 13: smtpd.StringValue
	(*StringRegexValue)(nil),                                 // 14: smtpd.StringRegexValue
	(*BoolValue)(nil),                                        // 15: smtpd.BoolValue
	(*TimeValue)(nil),                                        // 16: smtpd.TimeValue
	(*CompareTime)(nil),                                      // 17: smtpd.CompareTime
	(*CompareUInt64)(nil),                                    // 18: smtpd.CompareUInt64
	(*CompareDouble)(nil),                                    // 19: smtpd.CompareDouble
	(*StringMatch)(nil),                                      // 20: smtpd.StringMatch
	(*VersionResponse)(nil),                                  // 21: smtpd.VersionResponse
	(*QueueItemID)(nil),                                      // 22: smtpd.QueueItemID
	(*Condition)(nil),                                        // 23: smtpd.Condition
	(*QueueUpdateRequest)(nil),                               // 24: smtpd.QueueUpdateRequest
	(*QueueUpdateResponse)(nil),                              // 25: smtpd.QueueUpdateResponse
	(*Groupings)(nil),                                        // 26: smtpd.Groupings
	(*QueueGroupByRequest)(nil),                              // 27: smtpd.QueueGroupByRequest
	(*QueueGroupByResponse)(nil),                             // 28: smtpd.QueueGroupByResponse
	(*QueueListRequest)(nil),                                 // 29: smtpd.QueueListRequest
	(*QueueListResponse)(nil),                                // 30: smtpd.QueueListResponse
	(*QueueUnloadRequest)(nil),                               // 31: smtpd.QueueUnloadRequest
	(*QueueUnloadResponse)(nil),                              // 32: smtpd.QueueUnloadResponse
	(*QueueImportRequest)(nil),                               // 33: smtpd.QueueImportRequest
	(*QueueImportResponse)(nil),                              // 34: smtpd.QueueImportResponse
	(*QueueExportRequest)(nil),                               // 35: smtpd.QueueExportRequest
	(*ConfigGreenConditions)(nil),                            // 36: smtpd.ConfigGreenConditions
	(*ConfigGreenStatusResponse)(nil),                        // 37: smtpd.ConfigGreenStatusResponse
	(*ConfigGreenDeployRequest)(nil),                         // 38: smtpd.ConfigGreenDeployRequest
	(*HSLCacheResponse)(nil),                                 // 39: smtpd.HSLCacheResponse
	(*HSLLogResponse)(nil),                                   // 40: smtpd.HSLLogResponse
	(*HSLBreakPointResponse)(nil),                            // 41: smtpd.HSLBreakPointResponse
	(*HSLCacheClearRequest)(nil),                             // 42: smtpd.HSLCacheClearRequest
	(*HSLCacheClearResponse)(nil),                            // 43: smtpd.HSLCacheClearResponse
	(*ProcessStatsResponse)(nil),                             // 44: smtpd.ProcessStatsResponse
	(*QueueQuotaRequest)(nil),                                // 45: smtpd.QueueQuotaRequest
	(*QueueQuotaResponse)(nil),                               // 46: smtpd.QueueQuotaResponse
	(*HSLMemoryRequest)(nil),                                 // 47: smtpd.HSLMemoryRequest
	(*HSLMemoryResponse)(nil),                                // 48: smtpd.HSLMemoryResponse
	(*HSLMemoryListRequest)(nil),                             // 49: smtpd.HSLMemoryListRequest
	(*HSLMemoryListResponse)(nil),                            // 50: smtpd.HSLMemoryListResponse
	(*HSLMemoryStoreRequest)(nil),                            // 51: smtpd.HSLMemoryStoreRequest
	(*HSLMemoryStoreResponse)(nil),                           // 52: smtpd.HSLMemoryStoreResponse
	(*HSLMemoryDeleteRequest)(nil),                           // 53: smtpd.HSLMemoryDeleteRequest
	(*HSLMemoryDeleteResponse)(nil),                          // 54: smtpd.HSLMemoryDeleteResponse
	(*SuspendRequest)(nil),                                   // 55: smtpd.SuspendRequest
	(*SuspendResponse)(nil),                                  // 56: smtpd.SuspendResponse
	(*SuspendAddRequest)(nil),                                // 57: smtpd.SuspendAddRequest
	(*SuspendAddResponse)(nil),                               // 58: smtpd.SuspendAddResponse
	(*SuspendUpdateRequest)(nil),                             // 59: smtpd.SuspendUpdateRequest
	(*SuspendUpdateResponse)(nil),                            // 60: smtpd.SuspendUpdateResponse
	(*SuspendDeleteRequest)(nil),                             // 61: smtpd.SuspendDeleteRequest
	(*SuspendDeleteResponse)(nil),                            // 62: smtpd.SuspendDeleteResponse
	(*PolicyConditionAddRequest)(nil),                        // 63: smtpd.PolicyConditionAddRequest
	(*PolicyConditionAddResponse)(nil),                       // 64: smtpd.PolicyConditionAddResponse
	(*PolicyConditionUpdateRequest)(nil),                     // 65: smtpd.PolicyConditionUpdateRequest
	(*PolicyConditionUpdateResponse)(nil),                    // 66: smtpd.PolicyConditionUpdateResponse
	(*PolicyConditionDeleteRequest)(nil),                     // 67: smtpd.PolicyConditionDeleteRequest
	(*PolicyConditionDeleteResponse)(nil),                    // 68: smtpd.PolicyConditionDeleteResponse
	(*PolicyConditionResponse)(nil),                          // 69: smtpd.PolicyConditionResponse
	(*PolicyRateRefillRequest)(nil),                          // 70: smtpd.PolicyRateRefillRequest
	(*PolicyRateRefillResponse)(nil),                         // 71: smtpd.PolicyRateRefillResponse
	(*PluginCommandRequest)(nil),                             // 72: smtpd.PluginCommandRequest
	(*PluginCommandResponse)(nil),                            // 73: smtpd.PluginCommandResponse
	(*ServerConnectionsListRequest)(nil),                     // 74: smtpd.ServerConnectionsListRequest
	(*ServerConnectionsListResponse)(nil),                    // 75: smtpd.ServerConnectionsListResponse
	(*ServerConnectionsCloseRequest)(nil),                    // 76: smtpd.ServerConnectionsCloseRequest
	(*ServerConnectionsCloseResponse)(nil),                   // 77: smtpd.ServerConnectionsCloseResponse
	(*QueueConnectionsListRequest)(nil),                      // 78: smtpd.QueueConnectionsListRequest
	(*QueueConnectionsListResponse)(nil),                     // 79: smtpd.QueueConnectionsListResponse
	(*QueueConnectionsCloseRequest)(nil),                     // 80: smtpd.QueueConnectionsCloseRequest
	(*QueueConnectionsCloseResponse)(nil),                    // 81: smtpd.QueueConnectionsCloseResponse
	(*PolicyMatchRequest)(nil),                               // 82: smtpd.PolicyMatchRequest
	(*PolicyMatchResponse)(nil),                              // 83: smtpd.PolicyMatchResponse
	(*PolicyGroupingListRequest)(nil),                        // 84: smtpd.PolicyGroupingListRequest
	(*PolicyGroupingListResponse)(nil),                       // 85: smtpd.PolicyGroupingListResponse
	(*PolicyGroupingRequest)(nil),                            // 86: smtpd.PolicyGroupingRequest
	(*PolicyGroupingResponse)(nil),                           // 87: smtpd.PolicyGroupingResponse
	(*ResolverCacheClearRequest)(nil),                        // 88: smtpd.ResolverCacheClearRequest
	(*ResolverCacheClearResponse)(nil),                       // 89: smtpd.ResolverCacheClearResponse
	(*TraceSMTPRequest)(nil),                                 // 90: smtpd.TraceSMTPRequest
	(*Condition_QueueItemID)(nil),                            // 91: smtpd.Condition.QueueItemID
	(*Condition_AnyMatch)(nil),                               // 92: smtpd.Condition.AnyMatch
	(*Condition_MailAddress)(nil),                            // 93: smtpd.Condition.MailAddress
	(*Condition_MapStringValue)(nil),                         // 94: smtpd.Condition.MapStringValue
	(*Condition_QueueState)(nil),                             // 95: smtpd.Condition.QueueState
	(*Condition_FreezeState)(nil),                            // 96: smtpd.Condition.FreezeState
	(*Condition_WorkingState)(nil),                           // 97: smtpd.Condition.WorkingState
	(*Condition_CompareStringValue)(nil),                     // 98: smtpd.Condition.CompareStringValue
	(*Condition_CompareStringRegexValue)(nil),                // 99: smtpd.Condition.CompareStringRegexValue
	(*Condition_Fields)(nil),                                 // 100: smtpd.Condition.Fields
	nil,                                                      // 101: smtpd.Condition.MapStringValue.ValueEntry
	(*QueueUpdateRequest_MailAddress)(nil),                   // 102: smtpd.QueueUpdateRequest.MailAddress
	(*QueueUpdateRequest_Move)(nil),                          // 103: smtpd.QueueUpdateRequest.Move
	(*QueueUpdateRequest_Action)(nil),                        // 104: smtpd.QueueUpdateRequest.Action
	nil,                                                      // 105: smtpd.QueueUpdateRequest.MetadataEntry
	(*QueueUpdateRequest_Paging)(nil),                        // 106: smtpd.QueueUpdateRequest.Paging
	(*QueueUpdateRequest_Action_DSNStatus)(nil),              // 107: smtpd.QueueUpdateRequest.Action.DSNStatus
	(*QueueUpdateRequest_Action_DSN)(nil),                    // 108: smtpd.QueueUpdateRequest.Action.DSN
	(*QueueGroupByRequest_Paging)(nil),                       // 109: smtpd.QueueGroupByRequest.Paging
	(*QueueGroupByRequest_GroupBy)(nil),                      // 110: smtpd.QueueGroupByRequest.GroupBy
	(*QueueGroupByRequest_Sorting)(nil),                      // 111: smtpd.QueueGroupByRequest.Sorting
	(*QueueGroupByRequest_QueueState)(nil),                   // 112: smtpd.QueueGroupByRequest.QueueState
	(*QueueGroupByRequest_FreezeState)(nil),                  // 113: smtpd.QueueGroupByRequest.FreezeState
	(*QueueGroupByRequest_WorkingState)(nil),                 // 114: smtpd.QueueGroupByRequest.WorkingState
	(*QueueGroupByRequest_Counts)(nil),                       // 115: smtpd.QueueGroupByRequest.Counts
	nil,                                                      // 116: smtpd.QueueGroupByRequest.GroupingsEntry
	(*QueueGroupByRequest_Fields)(nil),                       // 117: smtpd.QueueGroupByRequest.Fields
	(*QueueGroupByRequest_Counts_ReturnType)(nil),            // 118: smtpd.QueueGroupByRequest.Counts.ReturnType
	(*QueueGroupByRequest_Counts_ReturnType_Unique)(nil),     // 119: smtpd.QueueGroupByRequest.Counts.ReturnType.Unique
	(*QueueGroupByResponse_Item)(nil),                        // 120: smtpd.QueueGroupByResponse.Item
	(*QueueGroupByResponse_Paging)(nil),                      // 121: smtpd.QueueGroupByResponse.Paging
	(*QueueListRequest_SortingMailAddress)(nil),              // 122: smtpd.QueueListRequest.SortingMailAddress
	(*QueueListRequest_SortingWorking)(nil),                  // 123: smtpd.QueueListRequest.SortingWorking
	(*QueueListRequest_Sorting)(nil),                         // 124: smtpd.QueueListRequest.Sorting
	(*QueueListRequest_Paging)(nil),                          // 125: smtpd.QueueListRequest.Paging
	(*QueueListResponse_QueueItem)(nil),                      // 126: smtpd.QueueListResponse.QueueItem
	(*QueueListResponse_Paging)(nil),                         // 127: smtpd.QueueListResponse.Paging
	(*QueueListResponse_QueueItem_MailAddress)(nil),          // 128: smtpd.QueueListResponse.QueueItem.MailAddress
	(*QueueListResponse_QueueItem_QueueState)(nil),           // 129: smtpd.QueueListResponse.QueueItem.QueueState
	(*QueueListResponse_QueueItem_FreezeState)(nil),          // 130: smtpd.QueueListResponse.QueueItem.FreezeState
	(*QueueListResponse_QueueItem_WorkingState)(nil),         // 131: smtpd.QueueListResponse.QueueItem.WorkingState
	(*QueueListResponse_QueueItem_DSN)(nil),                  // 132: smtpd.QueueListResponse.QueueItem.DSN
	nil,                                                      // 133: smtpd.QueueListResponse.QueueItem.MetadataEntry
	(*QueueImportRequest_ImportData)(nil),                    // 134: smtpd.QueueImportRequest.ImportData
	(*QueueImportRequest_Reset)(nil),                         // 135: smtpd.QueueImportRequest.Reset
	(*HSLCacheResponse_Item)(nil),                            // 136: smtpd.HSLCacheResponse.Item
	(*HSLLogResponse_Location)(nil),                          // 137: smtpd.HSLLogResponse.Location
	(*HSLBreakPointResponse_Location)(nil),                   // 138: smtpd.HSLBreakPointResponse.Location
	(*HSLBreakPointResponse_Callstack)(nil),                  // 139: smtpd.HSLBreakPointResponse.Callstack
	nil,                                                      // 140: smtpd.HSLCacheClearRequest.ArgumentsEntry
	(*ProcessStatsResponse_Process)(nil),                     // 141: smtpd.ProcessStatsResponse.Process
	(*ProcessStatsResponse_Connections)(nil),                 // 142: smtpd.ProcessStatsResponse.Connections
	(*ProcessStatsResponse_Script)(nil),                      // 143: smtpd.ProcessStatsResponse.Script
	(*ProcessStatsResponse_Scripts)(nil),                     // 144: smtpd.ProcessStatsResponse.Scripts
	(*ProcessStatsResponse_ServerCounters)(nil),              // 145: smtpd.ProcessStatsResponse.ServerCounters
	(*ProcessStatsResponse_Resolver)(nil),                    // 146: smtpd.ProcessStatsResponse.Resolver
	(*ProcessStatsResponse_Queue)(nil),                       // 147: smtpd.ProcessStatsResponse.Queue
	(*ProcessStatsResponse_Threads)(nil),                     // 148: smtpd.ProcessStatsResponse.Threads
	(*ProcessStatsResponse_Process_Version)(nil),             // 149: smtpd.ProcessStatsResponse.Process.Version
	(*ProcessStatsResponse_Resolver_Cache)(nil),              // 150: smtpd.ProcessStatsResponse.Resolver.Cache
	(*ProcessStatsResponse_Resolver_Domain)(nil),             // 151: smtpd.ProcessStatsResponse.Resolver.Domain
	(*ProcessStatsResponse_Resolver_Domain_Cache)(nil),       // 152: smtpd.ProcessStatsResponse.Resolver.Domain.Cache
	(*ProcessStatsResponse_Queue_Script)(nil),                // 153: smtpd.ProcessStatsResponse.Queue.Script
	(*ProcessStatsResponse_Queue_Scripts)(nil),               // 154: smtpd.ProcessStatsResponse.Queue.Scripts
	(*ProcessStatsResponse_Queue_Loader)(nil),                // 155: smtpd.ProcessStatsResponse.Queue.Loader
	(*ProcessStatsResponse_Queue_Queue)(nil),                 // 156: smtpd.ProcessStatsResponse.Queue.Queue
	(*ProcessStatsResponse_Queue_Freeze)(nil),                // 157: smtpd.ProcessStatsResponse.Queue.Freeze
	(*ProcessStatsResponse_Queue_Policy)(nil),                // 158: smtpd.ProcessStatsResponse.Queue.Policy
	(*ProcessStatsResponse_Queue_Pooling)(nil),               // 159: smtpd.ProcessStatsResponse.Queue.Pooling
	(*ProcessStatsResponse_Queue_Connections)(nil),           // 160: smtpd.ProcessStatsResponse.Queue.Connections
	(*ProcessStatsResponse_Queue_Pickup)(nil),                // 161: smtpd.ProcessStatsResponse.Queue.Pickup
	(*ProcessStatsResponse_Queue_Quota)(nil),                 // 162: smtpd.ProcessStatsResponse.Queue.Quota
	(*ProcessStatsResponse_Queue_Delivery)(nil),              // 163: smtpd.ProcessStatsResponse.Queue.Delivery
	(*ProcessStatsResponse_Queue_Release)(nil),               // 164: smtpd.ProcessStatsResponse.Queue.Release
	(*ProcessStatsResponse_Queue_Queue_Defer)(nil),           // 165: smtpd.ProcessStatsResponse.Queue.Queue.Defer
	(*ProcessStatsResponse_Queue_Queue_Active)(nil),          // 166: smtpd.ProcessStatsResponse.Queue.Queue.Active
	(*ProcessStatsResponse_Queue_Queue_Active_Priority)(nil), // 167: smtpd.ProcessStatsResponse.Queue.Queue.Active.Priority
	(*ProcessStatsResponse_Queue_Freeze_Hold)(nil),           // 168: smtpd.ProcessStatsResponse.Queue.Freeze.Hold
	(*ProcessStatsResponse_Queue_Freeze_Update)(nil),         // 169: smtpd.ProcessStatsResponse.Queue.Freeze.Update
	(*ProcessStatsResponse_Queue_Policy_Concurrency)(nil),    // 170: smtpd.ProcessStatsResponse.Queue.Policy.Concurrency
	(*ProcessStatsResponse_Queue_Policy_Rate)(nil),           // 171: smtpd.ProcessStatsResponse.Queue.Policy.Rate
	(*ProcessStatsResponse_Queue_Policy_Dynamic)(nil),        // 172: smtpd.ProcessStatsResponse.Queue.Policy.Dynamic
	(*ProcessStatsResponse_Threads_Scripts)(nil),             // 173: smtpd.ProcessStatsResponse.Threads.Scripts
	(*HSLMemoryListRequest_Condition)(nil),                   // 174: smtpd.HSLMemoryListRequest.Condition
	(*HSLMemoryListRequest_Paging)(nil),                      // 175: smtpd.HSLMemoryListRequest.Paging
	(*SuspendRequest_Condition)(nil),                         // 176: smtpd.SuspendRequest.Condition
	(*SuspendRequest_Paging)(nil),                            // 177: smtpd.SuspendRequest.Paging
	(*SuspendResponse_Item)(nil),                             // 178: smtpd.SuspendResponse.Item
	(*PolicyConditionAddRequest_Fields)(nil),                 // 179: smtpd.PolicyConditionAddRequest.Fields
	(*PolicyConditionAddRequest_If)(nil),                     // 180: smtpd.PolicyConditionAddRequest.If
	(*PolicyConditionAddRequest_Then)(nil),                   // 181: smtpd.PolicyConditionAddRequest.Then
	(*PolicyConditionAddRequest_Then_Rate)(nil),              // 182: smtpd.PolicyConditionAddRequest.Then.Rate
	nil, // 183: smtpd.PolicyConditionAddRequest.Then.PropertiesEntry
	(*PolicyConditionUpdateRequest_Then)(nil),      // 184: smtpd.PolicyConditionUpdateRequest.Then
	(*PolicyConditionUpdateRequest_Then_Rate)(nil), // 185: smtpd.PolicyConditionUpdateRequest.Then.Rate
	(*PolicyConditionResponse_Item)(nil),           // 186: smtpd.PolicyConditionResponse.Item
	(*PolicyConditionResponse_Item_Fields)(nil),    // 187: smtpd.PolicyConditionResponse.Item.Fields
	(*PolicyConditionResponse_Item_If)(nil),        // 188: smtpd.PolicyConditionResponse.Item.If
	(*PolicyConditionResponse_Item_Then)(nil),      // 189: smtpd.PolicyConditionResponse.Item.Then
	(*PolicyConditionResponse_Item_Then_Rate)(nil), // 190: smtpd.PolicyConditionResponse.Item.Then.Rate
	nil, // 191: smtpd.PolicyConditionResponse.Item.Then.PropertiesEntry
	(*ServerConnectionsListRequest_Condition)(nil),   // 192: smtpd.ServerConnectionsListRequest.Condition
	(*ServerConnectionsListRequest_Paging)(nil),      // 193: smtpd.ServerConnectionsListRequest.Paging
	(*ServerConnectionsListResponse_Connection)(nil), // 194: smtpd.ServerConnectionsListResponse.Connection
	(*ServerConnectionsCloseRequest_Reply)(nil),      // 195: smtpd.ServerConnectionsCloseRequest.Reply
	(*QueueConnectionsListRequest_Condition)(nil),    // 196: smtpd.QueueConnectionsListRequest.Condition
	(*QueueConnectionsListRequest_Paging)(nil),       // 197: smtpd.QueueConnectionsListRequest.Paging
	(*QueueConnectionsListResponse_Connection)(nil),  // 198: smtpd.QueueConnectionsListResponse.Connection
	(*PolicyMatchResponse_PolicyMatch)(nil),          // 199: smtpd.PolicyMatchResponse.PolicyMatch
	(*PolicyMatchResponse_PolicyMatch_Fields)(nil),   // 200: smtpd.PolicyMatchResponse.PolicyMatch.Fields
	(*PolicyMatchResponse_PolicyMatch_Grouping)(nil), // 201: smtpd.PolicyMatchResponse.PolicyMatch.Grouping
	(*PolicyMatchResponse_PolicyMatch_Dynamic)(nil),  // 202: smtpd.PolicyMatchResponse.PolicyMatch.Dynamic
	(*PolicyMatchResponse_PolicyMatch_Rate)(nil),     // 203: smtpd.PolicyMatchResponse.PolicyMatch.Rate
	nil,                                      // 204: smtpd.PolicyMatchResponse.PolicyMatch.PropertiesEntry
	(*PolicyGroupingListRequest_Paging)(nil), // 205: smtpd.PolicyGroupingListRequest.Paging
	(*PolicyGroupingListResponse_Grouping)(nil),        // 206: smtpd.PolicyGroupingListResponse.Grouping
	(*PolicyGroupingListResponse_Grouping_Fields)(nil), // 207: smtpd.PolicyGroupingListResponse.Grouping.Fields
	(*PolicyGroupingRequest_Fields)(nil),               // 208: smtpd.PolicyGroupingRequest.Fields
}
var file_smtpd_proto_depIdxs = []int32{
	5,   // 0: smtpd.StringRegexValue.type:type_name -> smtpd.StringRegexValue.MatchType
	16,  // 1: smtpd.CompareTime.eq:type_name -> smtpd.TimeValue
	16,  // 2: smtpd.CompareTime.neq:type_name -> smtpd.TimeValue
	16,  // 3: smtpd.CompareTime.lt:type_name -> smtpd.TimeValue
	16,  // 4: smtpd.CompareTime.gt:type_name -> smtpd.TimeValue
	16,  // 5: smtpd.CompareTime.gte:type_name -> smtpd.TimeValue
	16,  // 6: smtpd.CompareTime.lte:type_name -> smtpd.TimeValue
	11,  // 7: smtpd.CompareUInt64.eq:type_name -> smtpd.UInt64Value
	11,  // 8: smtpd.CompareUInt64.neq:type_name -> smtpd.UInt64Value
	11,  // 9: smtpd.CompareUInt64.lt:type_name -> smtpd.UInt64Value
	11,  // 10: smtpd.CompareUInt64.gt:type_name -> smtpd.UInt64Value
	11,  // 11: smtpd.CompareUInt64.gte:type_name -> smtpd.UInt64Value
	11,  // 12: smtpd.CompareUInt64.lte:type_name -> smtpd.UInt64Value
	12,  // 13: smtpd.CompareDouble.eq:type_name -> smtpd.DoubleValue
	12,  // 14: smtpd.CompareDouble.neq:type_name -> smtpd.DoubleValue
	12,  // 15: smtpd.CompareDouble.lt:type_name -> smtpd.DoubleValue
	12,  // 16: smtpd.CompareDouble.gt:type_name -> smtpd.DoubleValue
	12,  // 17: smtpd.CompareDouble.gte:type_name -> smtpd.DoubleValue
	12,  // 18: smtpd.CompareDouble.lte:type_name -> smtpd.DoubleValue
	6,   // 19: smtpd.StringMatch.type:type_name -> smtpd.StringMatch.MatchType
	95,  // 20: smtpd.Condition.queues:type_name -> smtpd.Condition.QueueState
	96,  // 21: smtpd.Condition.freezes:type_name -> smtpd.Condition.FreezeState
	97,  // 22: smtpd.Condition.workings:type_name -> smtpd.Condition.WorkingState
	91,  // 23: smtpd.Condition.ids:type_name -> smtpd.Condition.QueueItemID
	15,  // 24: smtpd.Condition.hold:type_name -> smtpd.BoolValue
	98,  // 25: smtpd.Condition.serverids:type_name -> smtpd.Condition.CompareStringValue
	98,  // 26: smtpd.Condition.senderips:type_name -> smtpd.Condition.CompareStringValue
	99,  // 27: smtpd.Condition.transportids:type_name -> smtpd.Condition.CompareStringRegexValue
	99,  // 28: smtpd.Condition.jobids:type_name -> smtpd.Condition.CompareStringRegexValue
	99,  // 29: smtpd.Condition.groupings:type_name -> smtpd.Condition.CompareStringRegexValue
	98,  // 30: smtpd.Condition.stageids:type_name -> smtpd.Condition.CompareStringValue
	93,  // 31: smtpd.Condition.senders:type_name -> smtpd.Condition.MailAddress
	93,  // 32: smtpd.Condition.recipients:type_name -> smtpd.Condition.MailAddress
	17,  // 33: smtpd.Condition.tss:type_name -> smtpd.CompareTime
	17,  // 34: smtpd.Condition.retrytss:type_name -> smtpd.CompareTime
	18,  // 35: smtpd.Condition.retrycounts:type_name -> smtpd.CompareUInt64
	20,  // 36: smtpd.Condition.subjects:type_name -> smtpd.StringMatch
	94,  // 37: smtpd.Condition.metadatas:type_name -> smtpd.Condition.MapStringValue
	98,  // 38: smtpd.Condition.quotas:type_name -> smtpd.Condition.CompareStringValue
	18,  // 39: smtpd.Condition.sizes:type_name -> smtpd.CompareUInt64
	20,  // 40: smtpd.Condition.retryreasons:type_name -> smtpd.StringMatch
	98,  // 41: smtpd.Condition.localips:type_name -> smtpd.Condition.CompareStringValue
	98,  // 42: smtpd.Condition.remoteips:type_name -> smtpd.Condition.CompareStringValue
	99,  // 43: smtpd.Condition.remotemxs:type_name -> smtpd.Condition.CompareStringRegexValue
	98,  // 44: smtpd.Condition.tags:type_name -> smtpd.Condition.CompareStringValue
	18,  // 45: smtpd.Condition.priorities:type_name -> smtpd.CompareUInt64
	100, // 46: smtpd.Condition.policygroupings:type_name -> smtpd.Condition.Fields
	23,  // 47: smtpd.QueueUpdateRequest.conditions:type_name -> smtpd.Condition
	103, // 48: smtpd.QueueUpdateRequest.move:type_name -> smtpd.QueueUpdateRequest.Move
	3,   // 49: smtpd.QueueUpdateRequest.actiontype:type_name -> smtpd.ActionType
	104, // 50: smtpd.QueueUpdateRequest.action:type_name -> smtpd.QueueUpdateRequest.Action
	13,  // 51: smtpd.QueueUpdateRequest.transportid:type_name -> smtpd.StringValue
	105, // 52: smtpd.QueueUpdateRequest.metadata:type_name -> smtpd.QueueUpdateRequest.MetadataEntry
	102, // 53: smtpd.QueueUpdateRequest.sender:type_name -> smtpd.QueueUpdateRequest.MailAddress
	102, // 54: smtpd.QueueUpdateRequest.recipient:type_name -> smtpd.QueueUpdateRequest.MailAddress
	11,  // 55: smtpd.QueueUpdateRequest.retrycount:type_name -> smtpd.UInt64Value
	11,  // 56: smtpd.QueueUpdateRequest.priority:type_name -> smtpd.UInt64Value
	106, // 57: smtpd.QueueUpdateRequest.paging:type_name -> smtpd.QueueUpdateRequest.Paging
	14,  // 58: smtpd.Groupings.transportid:type_name -> smtpd.StringRegexValue
	13,  // 59: smtpd.Groupings.localip:type_name -> smtpd.StringValue
	13,  // 60: smtpd.Groupings.remoteip:type_name -> smtpd.StringValue
	14,  // 61: smtpd.Groupings.remotemx:type_name -> smtpd.StringRegexValue
	14,  // 62: smtpd.Groupings.recipientdomain:type_name -> smtpd.StringRegexValue
	14,  // 63: smtpd.Groupings.jobid:type_name -> smtpd.StringRegexValue
	14,  // 64: smtpd.Groupings.grouping:type_name -> smtpd.StringRegexValue
	23,  // 65: smtpd.QueueGroupByRequest.conditions:type_name -> smtpd.Condition
	111, // 66: smtpd.QueueGroupByRequest.sortings:type_name -> smtpd.QueueGroupByRequest.Sorting
	109, // 67: smtpd.QueueGroupByRequest.paging:type_name -> smtpd.QueueGroupByRequest.Paging
	110, // 68: smtpd.QueueGroupByRequest.groupbys:type_name -> smtpd.QueueGroupByRequest.GroupBy
	115, // 69: smtpd.QueueGroupByRequest.counts:type_name -> smtpd.QueueGroupByRequest.Counts
	8,   // 70: smtpd.QueueGroupByRequest.return:type_name -> smtpd.QueueGroupByRequest.ReturnType
	116, // 71: smtpd.QueueGroupByRequest.groupings:type_name -> smtpd.QueueGroupByRequest.GroupingsEntry
	117, // 72: smtpd.QueueGroupByRequest.policygroupings:type_name -> smtpd.QueueGroupByRequest.Fields
	120, // 73: smtpd.QueueGroupByResponse.items:type_name -> smtpd.QueueGroupByResponse.Item
	121, // 74: smtpd.QueueGroupByResponse.paging:type_name -> smtpd.QueueGroupByResponse.Paging
	23,  // 75: smtpd.QueueListRequest.conditions:type_name -> smtpd.Condition
	124, // 76: smtpd.QueueListRequest.sortings:type_name -> smtpd.QueueListRequest.Sorting
	125, // 77: smtpd.QueueListRequest.paging:type_name -> smtpd.QueueListRequest.Paging
	126, // 78: smtpd.QueueListResponse.items:type_name -> smtpd.QueueListResponse.QueueItem
	127, // 79: smtpd.QueueListResponse.paging:type_name -> smtpd.QueueListResponse.Paging
	23,  // 80: smtpd.QueueUnloadRequest.conditions:type_name -> smtpd.Condition
	134, // 81: smtpd.QueueImportRequest.data:type_name -> smtpd.QueueImportRequest.ImportData
	135, // 82: smtpd.QueueImportRequest.reset:type_name -> smtpd.QueueImportRequest.Reset
	22,  // 83: smtpd.QueueExportRequest.id:type_name -> smtpd.QueueItemID
	36,  // 84: smtpd.ConfigGreenStatusResponse.conditions:type_name -> smtpd.ConfigGreenConditions
	36,  // 85: smtpd.ConfigGreenDeployRequest.conditions:type_name -> smtpd.ConfigGreenConditions
	136, // 86: smtpd.HSLCacheResponse.items:type_name -> smtpd.HSLCacheResponse.Item
	137, // 87: smtpd.HSLLogResponse.location:type_name -> smtpd.HSLLogResponse.Location
	138, // 88: smtpd.HSLBreakPointResponse.location:type_name -> smtpd.HSLBreakPointResponse.Location
	139, // 89: smtpd.HSLBreakPointResponse.callstack:type_name -> smtpd.HSLBreakPointResponse.Callstack
	13,  // 90: smtpd.HSLCacheClearRequest.namespace:type_name -> smtpd.StringValue
	13,  // 91: smtpd.HSLCacheClearRequest.function:type_name -> smtpd.StringValue
	140, // 92: smtpd.HSLCacheClearRequest.arguments:type_name -> smtpd.HSLCacheClearRequest.ArgumentsEntry
	141, // 93: smtpd.ProcessStatsResponse.process:type_name -> smtpd.ProcessStatsResponse.Process
	146, // 94: smtpd.ProcessStatsResponse.resolver:type_name -> smtpd.ProcessStatsResponse.Resolver
	145, // 95: smtpd.ProcessStatsResponse.servers:type_name -> smtpd.ProcessStatsResponse.ServerCounters
	147, // 96: smtpd.ProcessStatsResponse.queue:type_name -> smtpd.ProcessStatsResponse.Queue
	148, // 97: smtpd.ProcessStatsResponse.threads:type_name -> smtpd.ProcessStatsResponse.Threads
	174, // 98: smtpd.HSLMemoryListRequest.condition:type_name -> smtpd.HSLMemoryListRequest.Condition
	175, // 99: smtpd.HSLMemoryListRequest.paging:type_name -> smtpd.HSLMemoryListRequest.Paging
	176, // 100: smtpd.SuspendRequest.condition:type_name -> smtpd.SuspendRequest.Condition
	177, // 101: smtpd.SuspendRequest.paging:type_name -> smtpd.SuspendRequest.Paging
	178, // 102: smtpd.SuspendResponse.items:type_name -> smtpd.SuspendResponse.Item
	13,  // 103: smtpd.SuspendAddRequest.transportid:type_name -> smtpd.StringValue
	13,  // 104: smtpd.SuspendAddRequest.localip:type_name -> smtpd.StringValue
	13,  // 105: smtpd.SuspendAddRequest.remoteip:type_name -> smtpd.StringValue
	13,  // 106: smtpd.SuspendAddRequest.remotemx:type_name -> smtpd.StringValue
	13,  // 107: smtpd.SuspendAddRequest.recipientdomain:type_name -> smtpd.StringValue
	13,  // 108: smtpd.SuspendAddRequest.jobid:type_name -> smtpd.StringValue
	13,  // 109: smtpd.SuspendAddRequest.grouping:type_name -> smtpd.StringValue
	13,  // 110: smtpd.SuspendAddRequest.tag:type_name -> smtpd.StringValue
	13,  // 111: smtpd.SuspendUpdateRequest.tag:type_name -> smtpd.StringValue
	179, // 112: smtpd.PolicyConditionAddRequest.fields:type_name -> smtpd.PolicyConditionAddRequest.Fields
	180, // 113: smtpd.PolicyConditionAddRequest.if:type_name -> smtpd.PolicyConditionAddRequest.If
	181, // 114: smtpd.PolicyConditionAddRequest.then:type_name -> smtpd.PolicyConditionAddRequest.Then
	184, // 115: smtpd.PolicyConditionUpdateRequest.then:type_name -> smtpd.PolicyConditionUpdateRequest.Then
	186, // 116: smtpd.PolicyConditionResponse.items:type_name -> smtpd.PolicyConditionResponse.Item
	13,  // 117: smtpd.PolicyRateRefillRequest.transportid:type_name -> smtpd.StringValue
	13,  // 118: smtpd.PolicyRateRefillRequest.localip:type_name -> smtpd.StringValue
	13,  // 119: smtpd.PolicyRateRefillRequest.remoteip:type_name -> smtpd.StringValue
	13,  // 120: smtpd.PolicyRateRefillRequest.remotemx:type_name -> smtpd.StringValue
	13,  // 121: smtpd.PolicyRateRefillRequest.recipientdomain:type_name -> smtpd.StringValue
	13,  // 122: smtpd.PolicyRateRefillRequest.jobid:type_name -> smtpd.StringValue
	13,  // 123: smtpd.PolicyRateRefillRequest.grouping:type_name -> smtpd.StringValue
	192, // 124: smtpd.ServerConnectionsListRequest.condition:type_name -> smtpd.ServerConnectionsListRequest.Condition
	193, // 125: smtpd.ServerConnectionsListRequest.paging:type_name -> smtpd.ServerConnectionsListRequest.Paging
	194, // 126: smtpd.ServerConnectionsListResponse.connections:type_name -> smtpd.ServerConnectionsListResponse.Connection
	195, // 127: smtpd.ServerConnectionsCloseRequest.reply:type_name -> smtpd.ServerConnectionsCloseRequest.Reply
	196, // 128: smtpd.QueueConnectionsListRequest.condition:type_name -> smtpd.QueueConnectionsListRequest.Condition
	197, // 129: smtpd.QueueConnectionsListRequest.paging:type_name -> smtpd.QueueConnectionsListRequest.Paging
	198, // 130: smtpd.QueueConnectionsListResponse.connections:type_name -> smtpd.QueueConnectionsListResponse.Connection
	22,  // 131: smtpd.QueueConnectionsCloseRequest.id:type_name -> smtpd.QueueItemID
	199, // 132: smtpd.PolicyMatchResponse.policies:type_name -> smtpd.PolicyMatchResponse.PolicyMatch
	205, // 133: smtpd.PolicyGroupingListRequest.paging:type_name -> smtpd.PolicyGroupingListRequest.Paging
	206, // 134: smtpd.PolicyGroupingListResponse.groupings:type_name -> smtpd.PolicyGroupingListResponse.Grouping
	208, // 135: smtpd.PolicyGroupingRequest.fields:type_name -> smtpd.PolicyGroupingRequest.Fields
	13,  // 136: smtpd.ResolverCacheClearRequest.domain:type_name -> smtpd.StringValue
	13,  // 137: smtpd.TraceSMTPRequest.transportid:type_name -> smtpd.StringValue
	13,  // 138: smtpd.TraceSMTPRequest.localip:type_name -> smtpd.StringValue
	13,  // 139: smtpd.TraceSMTPRequest.remoteip:type_name -> smtpd.StringValue
	13,  // 140: smtpd.TraceSMTPRequest.remotemx:type_name -> smtpd.StringValue
	13,  // 141: smtpd.TraceSMTPRequest.recipientdomain:type_name -> smtpd.StringValue
	13,  // 142: smtpd.TraceSMTPRequest.jobid:type_name -> smtpd.StringValue
	13,  // 143: smtpd.TraceSMTPRequest.grouping:type_name -> smtpd.StringValue
	20,  // 144: smtpd.Condition.AnyMatch.string:type_name -> smtpd.StringMatch
	19,  // 145: smtpd.Condition.AnyMatch.double:type_name -> smtpd.CompareDouble
	20,  // 146: smtpd.Condition.MailAddress.localpart:type_name -> smtpd.StringMatch
	14,  // 147: smtpd.Condition.MailAddress.domain:type_name -> smtpd.StringRegexValue
	101, // 148: smtpd.Condition.MapStringValue.value:type_name -> smtpd.Condition.MapStringValue.ValueEntry
	0,   // 149: smtpd.Condition.QueueState.queue:type_name -> smtpd.Queue
	1,   // 150: smtpd.Condition.FreezeState.freeze:type_name -> smtpd.Freeze
	2,   // 151: smtpd.Condition.WorkingState.working:type_name -> smtpd.Working
	15,  // 152: smtpd.Condition.WorkingState.updatefreezing:type_name -> smtpd.BoolValue
	7,   // 153: smtpd.Condition.CompareStringRegexValue.type:type_name -> smtpd.Condition.CompareStringRegexValue.MatchType
	92,  // 154: smtpd.Condition.MapStringValue.ValueEntry.value:type_name -> smtpd.Condition.AnyMatch
	13,  // 155: smtpd.QueueUpdateRequest.MailAddress.localpart:type_name -> smtpd.StringValue
	13,  // 156: smtpd.QueueUpdateRequest.MailAddress.domain:type_name -> smtpd.StringValue
	0,   // 157: smtpd.QueueUpdateRequest.Move.queue:type_name -> smtpd.Queue
	1,   // 158: smtpd.QueueUpdateRequest.Move.freeze:type_name -> smtpd.Freeze
	16,  // 159: smtpd.QueueUpdateRequest.Move.retryts:type_name -> smtpd.TimeValue
	11,  // 160: smtpd.QueueUpdateRequest.Move.retrytsjitter:type_name -> smtpd.UInt64Value
	3,   // 161: smtpd.QueueUpdateRequest.Action.type:type_name -> smtpd.ActionType
	108, // 162: smtpd.QueueUpdateRequest.Action.dsn:type_name -> smtpd.QueueUpdateRequest.Action.DSN
	107, // 163: smtpd.QueueUpdateRequest.Action.DSN.status:type_name -> smtpd.QueueUpdateRequest.Action.DSNStatus
	4,   // 164: smtpd.QueueGroupByRequest.Sorting.order:type_name -> smtpd.Order
	0,   // 165: smtpd.QueueGroupByRequest.QueueState.queue:type_name -> smtpd.Queue
	1,   // 166: smtpd.QueueGroupByRequest.FreezeState.freeze:type_name -> smtpd.Freeze
	2,   // 167: smtpd.QueueGroupByRequest.WorkingState.working:type_name -> smtpd.Working
	0,   // 168: smtpd.QueueGroupByRequest.Counts.queue:type_name -> smtpd.Queue
	1,   // 169: smtpd.QueueGroupByRequest.Counts.freeze:type_name -> smtpd.Freeze
	2,   // 170: smtpd.QueueGroupByRequest.Counts.working:type_name -> smtpd.Working
	17,  // 171: smtpd.QueueGroupByRequest.Counts.ts:type_name -> smtpd.CompareTime
	17,  // 172: smtpd.QueueGroupByRequest.Counts.retryts:type_name -> smtpd.CompareTime
	18,  // 173: smtpd.QueueGroupByRequest.Counts.retrycount:type_name -> smtpd.CompareUInt64
	18,  // 174: smtpd.QueueGroupByRequest.Counts.priority:type_name -> smtpd.CompareUInt64
	118, // 175: smtpd.QueueGroupByRequest.Counts.return:type_name -> smtpd.QueueGroupByRequest.Counts.ReturnType
	26,  // 176: smtpd.QueueGroupByRequest.GroupingsEntry.value:type_name -> smtpd.Groupings
	9,   // 177: smtpd.QueueGroupByRequest.Counts.ReturnType.type:type_name -> smtpd.QueueGroupByRequest.Counts.ReturnType.Type
	119, // 178: smtpd.QueueGroupByRequest.Counts.ReturnType.unique:type_name -> smtpd.QueueGroupByRequest.Counts.ReturnType.Unique
	4,   // 179: smtpd.QueueListRequest.SortingMailAddress.localpart:type_name -> smtpd.Order
	4,   // 180: smtpd.QueueListRequest.SortingMailAddress.domain:type_name -> smtpd.Order
	4,   // 181: smtpd.QueueListRequest.SortingWorking.duration:type_name -> smtpd.Order
	4,   // 182: smtpd.QueueListRequest.Sorting.ts:type_name -> smtpd.Order
	122, // 183: smtpd.QueueListRequest.Sorting.sender:type_name -> smtpd.QueueListRequest.SortingMailAddress
	122, // 184: smtpd.QueueListRequest.Sorting.recipient:type_name -> smtpd.QueueListRequest.SortingMailAddress
	123, // 185: smtpd.QueueListRequest.Sorting.working:type_name -> smtpd.QueueListRequest.SortingWorking
	4,   // 186: smtpd.QueueListRequest.Sorting.retryts:type_name -> smtpd.Order
	4,   // 187: smtpd.QueueListRequest.Sorting.size:type_name -> smtpd.Order
	4,   // 188: smtpd.QueueListRequest.Sorting.retrycount:type_name -> smtpd.Order
	22,  // 189: smtpd.QueueListResponse.QueueItem.id:type_name -> smtpd.QueueItemID
	129, // 190: smtpd.QueueListResponse.QueueItem.queue:type_name -> smtpd.QueueListResponse.QueueItem.QueueState
	130, // 191: smtpd.QueueListResponse.QueueItem.freeze:type_name -> smtpd.QueueListResponse.QueueItem.FreezeState
	131, // 192: smtpd.QueueListResponse.QueueItem.working:type_name -> smtpd.QueueListResponse.QueueItem.WorkingState
	133, // 193: smtpd.QueueListResponse.QueueItem.metadata:type_name -> smtpd.QueueListResponse.QueueItem.MetadataEntry
	128, // 194: smtpd.QueueListResponse.QueueItem.sender:type_name -> smtpd.QueueListResponse.QueueItem.MailAddress
	128, // 195: smtpd.QueueListResponse.QueueItem.recipient:type_name -> smtpd.QueueListResponse.QueueItem.MailAddress
	132, // 196: smtpd.QueueListResponse.QueueItem.dsn:type_name -> smtpd.QueueListResponse.QueueItem.DSN
	0,   // 197: smtpd.QueueListResponse.QueueItem.QueueState.queue:type_name -> smtpd.Queue
	1,   // 198: smtpd.QueueListResponse.QueueItem.FreezeState.freeze:type_name -> smtpd.Freeze
	2,   // 199: smtpd.QueueListResponse.QueueItem.WorkingState.working:type_name -> smtpd.Working
	15,  // 200: smtpd.QueueImportRequest.Reset.transactionid:type_name -> smtpd.BoolValue
	15,  // 201: smtpd.QueueImportRequest.Reset.ts:type_name -> smtpd.BoolValue
	15,  // 202: smtpd.QueueImportRequest.Reset.retrycount:type_name -> smtpd.BoolValue
	149, // 203: smtpd.ProcessStatsResponse.Process.version:type_name -> smtpd.ProcessStatsResponse.Process.Version
	143, // 204: smtpd.ProcessStatsResponse.Scripts.connect:type_name -> smtpd.ProcessStatsResponse.Script
	143, // 205: smtpd.ProcessStatsResponse.Scripts.proxy:type_name -> smtpd.ProcessStatsResponse.Script
	143, // 206: smtpd.ProcessStatsResponse.Scripts.helo:type_name -> smtpd.ProcessStatsResponse.Script
	143, // 207: smtpd.ProcessStatsResponse.Scripts.auth:type_name -> smtpd.ProcessStatsResponse.Script
	143, // 208: smtpd.ProcessStatsResponse.Scripts.mailfrom:type_name -> smtpd.ProcessStatsResponse.Script
	143, // 209: smtpd.ProcessStatsResponse.Scripts.rcptto:type_name -> smtpd.ProcessStatsResponse.Script
	143, // 210: smtpd.ProcessStatsResponse.Scripts.eod:type_name -> smtpd.ProcessStatsResponse.Script
	143, // 211: smtpd.ProcessStatsResponse.Scripts.disconnect:type_name -> smtpd.ProcessStatsResponse.Script
	142, // 212: smtpd.ProcessStatsResponse.ServerCounters.connections:type_name -> smtpd.ProcessStatsResponse.Connections
	144, // 213: smtpd.ProcessStatsResponse.ServerCounters.scripts:type_name -> smtpd.ProcessStatsResponse.Scripts
	150, // 214: smtpd.ProcessStatsResponse.Resolver.cache:type_name -> smtpd.ProcessStatsResponse.Resolver.Cache
	151, // 215: smtpd.ProcessStatsResponse.Resolver.domain:type_name -> smtpd.ProcessStatsResponse.Resolver.Domain
	155, // 216: smtpd.ProcessStatsResponse.Queue.loader:type_name -> smtpd.ProcessStatsResponse.Queue.Loader
	154, // 217: smtpd.ProcessStatsResponse.Queue.scripts:type_name -> smtpd.ProcessStatsResponse.Queue.Scripts
	156, // 218: smtpd.ProcessStatsResponse.Queue.queue:type_name -> smtpd.ProcessStatsResponse.Queue.Queue
	157, // 219: smtpd.ProcessStatsResponse.Queue.freeze:type_name -> smtpd.ProcessStatsResponse.Queue.Freeze
	158, // 220: smtpd.ProcessStatsResponse.Queue.policy:type_name -> smtpd.ProcessStatsResponse.Queue.Policy
	161, // 221: smtpd.ProcessStatsResponse.Queue.pickup:type_name -> smtpd.ProcessStatsResponse.Queue.Pickup
	160, // 222: smtpd.ProcessStatsResponse.Queue.connections:type_name -> smtpd.ProcessStatsResponse.Queue.Connections
	162, // 223: smtpd.ProcessStatsResponse.Queue.quota:type_name -> smtpd.ProcessStatsResponse.Queue.Quota
	163, // 224: smtpd.ProcessStatsResponse.Queue.delivery:type_name -> smtpd.ProcessStatsResponse.Queue.Delivery
	164, // 225: smtpd.ProcessStatsResponse.Queue.release:type_name -> smtpd.ProcessStatsResponse.Queue.Release
	173, // 226: smtpd.ProcessStatsResponse.Threads.scripts:type_name -> smtpd.ProcessStatsResponse.Threads.Scripts
	152, // 227: smtpd.ProcessStatsResponse.Resolver.Domain.cache:type_name -> smtpd.ProcessStatsResponse.Resolver.Domain.Cache
	153, // 228: smtpd.ProcessStatsResponse.Queue.Scripts.predelivery:type_name -> smtpd.ProcessStatsResponse.Queue.Script
	153, // 229: smtpd.ProcessStatsResponse.Queue.Scripts.postdelivery:type_name -> smtpd.ProcessStatsResponse.Queue.Script
	165, // 230: smtpd.ProcessStatsResponse.Queue.Queue.defer:type_name -> smtpd.ProcessStatsResponse.Queue.Queue.Defer
	166, // 231: smtpd.ProcessStatsResponse.Queue.Queue.active:type_name -> smtpd.ProcessStatsResponse.Queue.Queue.Active
	168, // 232: smtpd.ProcessStatsResponse.Queue.Freeze.hold:type_name -> smtpd.ProcessStatsResponse.Queue.Freeze.Hold
	169, // 233: smtpd.ProcessStatsResponse.Queue.Freeze.update:type_name -> smtpd.ProcessStatsResponse.Queue.Freeze.Update
	170, // 234: smtpd.ProcessStatsResponse.Queue.Policy.concurrency:type_name -> smtpd.ProcessStatsResponse.Queue.Policy.Concurrency
	171, // 235: smtpd.ProcessStatsResponse.Queue.Policy.rate:type_name -> smtpd.ProcessStatsResponse.Queue.Policy.Rate
	172, // 236: smtpd.ProcessStatsResponse.Queue.Policy.dynamic:type_name -> smtpd.ProcessStatsResponse.Queue.Policy.Dynamic
	159, // 237: smtpd.ProcessStatsResponse.Queue.Connections.pooling:type_name -> smtpd.ProcessStatsResponse.Queue.Pooling
	167, // 238: smtpd.ProcessStatsResponse.Queue.Queue.Active.priorities:type_name -> smtpd.ProcessStatsResponse.Queue.Queue.Active.Priority
	20,  // 239: smtpd.HSLMemoryListRequest.Condition.key:type_name -> smtpd.StringMatch
	13,  // 240: smtpd.SuspendRequest.Condition.transportid:type_name -> smtpd.StringValue
	13,  // 241: smtpd.SuspendRequest.Condition.remoteip:type_name -> smtpd.StringValue
	13,  // 242: smtpd.SuspendRequest.Condition.remotemx:type_name -> smtpd.StringValue
	13,  // 243: smtpd.SuspendRequest.Condition.recipientdomain:type_name -> smtpd.StringValue
	13,  // 244: smtpd.SuspendRequest.Condition.jobid:type_name -> smtpd.StringValue
	13,  // 245: smtpd.SuspendRequest.Condition.grouping:type_name -> smtpd.StringValue
	13,  // 246: smtpd.SuspendRequest.Condition.tag:type_name -> smtpd.StringValue
	10,  // 247: smtpd.SuspendResponse.Item.source:type_name -> smtpd.SuspendResponse.Source
	13,  // 248: smtpd.SuspendResponse.Item.transportid:type_name -> smtpd.StringValue
	13,  // 249: smtpd.SuspendResponse.Item.localip:type_name -> smtpd.StringValue
	13,  // 250: smtpd.SuspendResponse.Item.remoteip:type_name -> smtpd.StringValue
	13,  // 251: smtpd.SuspendResponse.Item.remotemx:type_name -> smtpd.StringValue
	13,  // 252: smtpd.SuspendResponse.Item.recipientdomain:type_name -> smtpd.StringValue
	13,  // 253: smtpd.SuspendResponse.Item.jobid:type_name -> smtpd.StringValue
	13,  // 254: smtpd.SuspendResponse.Item.grouping:type_name -> smtpd.StringValue
	13,  // 255: smtpd.SuspendResponse.Item.tag:type_name -> smtpd.StringValue
	13,  // 256: smtpd.PolicyConditionAddRequest.If.transportid:type_name -> smtpd.StringValue
	13,  // 257: smtpd.PolicyConditionAddRequest.If.localip:type_name -> smtpd.StringValue
	13,  // 258: smtpd.PolicyConditionAddRequest.If.remoteip:type_name -> smtpd.StringValue
	13,  // 259: smtpd.PolicyConditionAddRequest.If.remotemx:type_name -> smtpd.StringValue
	13,  // 260: smtpd.PolicyConditionAddRequest.If.recipientdomain:type_name -> smtpd.StringValue
	13,  // 261: smtpd.PolicyConditionAddRequest.If.jobid:type_name -> smtpd.StringValue
	13,  // 262: smtpd.PolicyConditionAddRequest.If.grouping:type_name -> smtpd.StringValue
	182, // 263: smtpd.PolicyConditionAddRequest.Then.rate:type_name -> smtpd.PolicyConditionAddRequest.Then.Rate
	13,  // 264: smtpd.PolicyConditionAddRequest.Then.tag:type_name -> smtpd.StringValue
	183, // 265: smtpd.PolicyConditionAddRequest.Then.properties:type_name -> smtpd.PolicyConditionAddRequest.Then.PropertiesEntry
	185, // 266: smtpd.PolicyConditionUpdateRequest.Then.rate:type_name -> smtpd.PolicyConditionUpdateRequest.Then.Rate
	13,  // 267: smtpd.PolicyConditionUpdateRequest.Then.tag:type_name -> smtpd.StringValue
	187, // 268: smtpd.PolicyConditionResponse.Item.fields:type_name -> smtpd.PolicyConditionResponse.Item.Fields
	188, // 269: smtpd.PolicyConditionResponse.Item.if:type_name -> smtpd.PolicyConditionResponse.Item.If
	189, // 270: smtpd.PolicyConditionResponse.Item.then:type_name -> smtpd.PolicyConditionResponse.Item.Then
	13,  // 271: smtpd.PolicyConditionResponse.Item.If.transportid:type_name -> smtpd.StringValue
	13,  // 272: smtpd.PolicyConditionResponse.Item.If.localip:type_name -> smtpd.StringValue
	13,  // 273: smtpd.PolicyConditionResponse.Item.If.remoteip:type_name -> smtpd.StringValue
	13,  // 274: smtpd.PolicyConditionResponse.Item.If.remotemx:type_name -> smtpd.StringValue
	13,  // 275: smtpd.PolicyConditionResponse.Item.If.recipientdomain:type_name -> smtpd.StringValue
	13,  // 276: smtpd.PolicyConditionResponse.Item.If.jobid:type_name -> smtpd.StringValue
	13,  // 277: smtpd.PolicyConditionResponse.Item.If.grouping:type_name -> smtpd.StringValue
	190, // 278: smtpd.PolicyConditionResponse.Item.Then.rate:type_name -> smtpd.PolicyConditionResponse.Item.Then.Rate
	13,  // 279: smtpd.PolicyConditionResponse.Item.Then.tag:type_name -> smtpd.StringValue
	191, // 280: smtpd.PolicyConditionResponse.Item.Then.properties:type_name -> smtpd.PolicyConditionResponse.Item.Then.PropertiesEntry
	22,  // 281: smtpd.QueueConnectionsListRequest.Condition.id:type_name -> smtpd.QueueItemID
	22,  // 282: smtpd.QueueConnectionsListResponse.Connection.id:type_name -> smtpd.QueueItemID
	200, // 283: smtpd.PolicyMatchResponse.PolicyMatch.fields:type_name -> smtpd.PolicyMatchResponse.PolicyMatch.Fields
	201, // 284: smtpd.PolicyMatchResponse.PolicyMatch.grouping:type_name -> smtpd.PolicyMatchResponse.PolicyMatch.Grouping
	202, // 285: smtpd.PolicyMatchResponse.PolicyMatch.dynamic:type_name -> smtpd.PolicyMatchResponse.PolicyMatch.Dynamic
	11,  // 286: smtpd.PolicyMatchResponse.PolicyMatch.concurrency:type_name -> smtpd.UInt64Value
	203, // 287: smtpd.PolicyMatchResponse.PolicyMatch.rate:type_name -> smtpd.PolicyMatchResponse.PolicyMatch.Rate
	204, // 288: smtpd.PolicyMatchResponse.PolicyMatch.properties:type_name -> smtpd.PolicyMatchResponse.PolicyMatch.PropertiesEntry
	13,  // 289: smtpd.PolicyMatchResponse.PolicyMatch.Grouping.transportid:type_name -> smtpd.StringValue
	13,  // 290: smtpd.PolicyMatchResponse.PolicyMatch.Grouping.localip:type_name -> smtpd.StringValue
	13,  // 291: smtpd.PolicyMatchResponse.PolicyMatch.Grouping.remoteip:type_name -> smtpd.StringValue
	13,  // 292: smtpd.PolicyMatchResponse.PolicyMatch.Grouping.remotemx:type_name -> smtpd.StringValue
	13,  // 293: smtpd.PolicyMatchResponse.PolicyMatch.Grouping.recipientdomain:type_name -> smtpd.StringValue
	13,  // 294: smtpd.PolicyMatchResponse.PolicyMatch.Grouping.jobid:type_name -> smtpd.StringValue
	13,  // 295: smtpd.PolicyMatchResponse.PolicyMatch.Grouping.grouping:type_name -> smtpd.StringValue
	13,  // 296: smtpd.PolicyMatchResponse.PolicyMatch.Dynamic.tag:type_name -> smtpd.StringValue
	207, // 297: smtpd.PolicyGroupingListResponse.Grouping.fields:type_name -> smtpd.PolicyGroupingListResponse.Grouping.Fields
	298, // [298:298] is the sub-list for method output_type
	298, // [298:298] is the sub-list for method input_type
	298, // [298:298] is the sub-list for extension type_name
	298, // [298:298] is the sub-list for extension extendee
	0,   // [0:298] is the sub-list for field type_name
}

func init() { file_smtpd_proto_init() }
func file_smtpd_proto_init() {
	if File_smtpd_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_smtpd_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*UInt64Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*DoubleValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*StringValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*StringRegexValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*BoolValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*TimeValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*CompareTime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*CompareUInt64); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*CompareDouble); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*StringMatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*VersionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*QueueItemID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*Condition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*QueueUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*QueueUpdateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*Groupings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*QueueGroupByRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*QueueGroupByResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*QueueListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*QueueListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*QueueUnloadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*QueueUnloadResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*QueueImportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*QueueImportResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*QueueExportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*ConfigGreenConditions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*ConfigGreenStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[27].Exporter = func(v any, i int) any {
			switch v := v.(*ConfigGreenDeployRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[28].Exporter = func(v any, i int) any {
			switch v := v.(*HSLCacheResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[29].Exporter = func(v any, i int) any {
			switch v := v.(*HSLLogResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[30].Exporter = func(v any, i int) any {
			switch v := v.(*HSLBreakPointResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[31].Exporter = func(v any, i int) any {
			switch v := v.(*HSLCacheClearRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[32].Exporter = func(v any, i int) any {
			switch v := v.(*HSLCacheClearResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[33].Exporter = func(v any, i int) any {
			switch v := v.(*ProcessStatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[34].Exporter = func(v any, i int) any {
			switch v := v.(*QueueQuotaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[35].Exporter = func(v any, i int) any {
			switch v := v.(*QueueQuotaResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[36].Exporter = func(v any, i int) any {
			switch v := v.(*HSLMemoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[37].Exporter = func(v any, i int) any {
			switch v := v.(*HSLMemoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[38].Exporter = func(v any, i int) any {
			switch v := v.(*HSLMemoryListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[39].Exporter = func(v any, i int) any {
			switch v := v.(*HSLMemoryListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[40].Exporter = func(v any, i int) any {
			switch v := v.(*HSLMemoryStoreRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[41].Exporter = func(v any, i int) any {
			switch v := v.(*HSLMemoryStoreResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[42].Exporter = func(v any, i int) any {
			switch v := v.(*HSLMemoryDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[43].Exporter = func(v any, i int) any {
			switch v := v.(*HSLMemoryDeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[44].Exporter = func(v any, i int) any {
			switch v := v.(*SuspendRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[45].Exporter = func(v any, i int) any {
			switch v := v.(*SuspendResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[46].Exporter = func(v any, i int) any {
			switch v := v.(*SuspendAddRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[47].Exporter = func(v any, i int) any {
			switch v := v.(*SuspendAddResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[48].Exporter = func(v any, i int) any {
			switch v := v.(*SuspendUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[49].Exporter = func(v any, i int) any {
			switch v := v.(*SuspendUpdateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[50].Exporter = func(v any, i int) any {
			switch v := v.(*SuspendDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[51].Exporter = func(v any, i int) any {
			switch v := v.(*SuspendDeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[52].Exporter = func(v any, i int) any {
			switch v := v.(*PolicyConditionAddRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[53].Exporter = func(v any, i int) any {
			switch v := v.(*PolicyConditionAddResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[54].Exporter = func(v any, i int) any {
			switch v := v.(*PolicyConditionUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[55].Exporter = func(v any, i int) any {
			switch v := v.(*PolicyConditionUpdateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[56].Exporter = func(v any, i int) any {
			switch v := v.(*PolicyConditionDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[57].Exporter = func(v any, i int) any {
			switch v := v.(*PolicyConditionDeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[58].Exporter = func(v any, i int) any {
			switch v := v.(*PolicyConditionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[59].Exporter = func(v any, i int) any {
			switch v := v.(*PolicyRateRefillRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[60].Exporter = func(v any, i int) any {
			switch v := v.(*PolicyRateRefillResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[61].Exporter = func(v any, i int) any {
			switch v := v.(*PluginCommandRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[62].Exporter = func(v any, i int) any {
			switch v := v.(*PluginCommandResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[63].Exporter = func(v any, i int) any {
			switch v := v.(*ServerConnectionsListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[64].Exporter = func(v any, i int) any {
			switch v := v.(*ServerConnectionsListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[65].Exporter = func(v any, i int) any {
			switch v := v.(*ServerConnectionsCloseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[66].Exporter = func(v any, i int) any {
			switch v := v.(*ServerConnectionsCloseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[67].Exporter = func(v any, i int) any {
			switch v := v.(*QueueConnectionsListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[68].Exporter = func(v any, i int) any {
			switch v := v.(*QueueConnectionsListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[69].Exporter = func(v any, i int) any {
			switch v := v.(*QueueConnectionsCloseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[70].Exporter = func(v any, i int) any {
			switch v := v.(*QueueConnectionsCloseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[71].Exporter = func(v any, i int) any {
			switch v := v.(*PolicyMatchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[72].Exporter = func(v any, i int) any {
			switch v := v.(*PolicyMatchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[73].Exporter = func(v any, i int) any {
			switch v := v.(*PolicyGroupingListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[74].Exporter = func(v any, i int) any {
			switch v := v.(*PolicyGroupingListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[75].Exporter = func(v any, i int) any {
			switch v := v.(*PolicyGroupingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[76].Exporter = func(v any, i int) any {
			switch v := v.(*PolicyGroupingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[77].Exporter = func(v any, i int) any {
			switch v := v.(*ResolverCacheClearRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[78].Exporter = func(v any, i int) any {
			switch v := v.(*ResolverCacheClearResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[79].Exporter = func(v any, i int) any {
			switch v := v.(*TraceSMTPRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[80].Exporter = func(v any, i int) any {
			switch v := v.(*Condition_QueueItemID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[81].Exporter = func(v any, i int) any {
			switch v := v.(*Condition_AnyMatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[82].Exporter = func(v any, i int) any {
			switch v := v.(*Condition_MailAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[83].Exporter = func(v any, i int) any {
			switch v := v.(*Condition_MapStringValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[84].Exporter = func(v any, i int) any {
			switch v := v.(*Condition_QueueState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[85].Exporter = func(v any, i int) any {
			switch v := v.(*Condition_FreezeState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[86].Exporter = func(v any, i int) any {
			switch v := v.(*Condition_WorkingState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[87].Exporter = func(v any, i int) any {
			switch v := v.(*Condition_CompareStringValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[88].Exporter = func(v any, i int) any {
			switch v := v.(*Condition_CompareStringRegexValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[89].Exporter = func(v any, i int) any {
			switch v := v.(*Condition_Fields); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[91].Exporter = func(v any, i int) any {
			switch v := v.(*QueueUpdateRequest_MailAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[92].Exporter = func(v any, i int) any {
			switch v := v.(*QueueUpdateRequest_Move); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[93].Exporter = func(v any, i int) any {
			switch v := v.(*QueueUpdateRequest_Action); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[95].Exporter = func(v any, i int) any {
			switch v := v.(*QueueUpdateRequest_Paging); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[96].Exporter = func(v any, i int) any {
			switch v := v.(*QueueUpdateRequest_Action_DSNStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[97].Exporter = func(v any, i int) any {
			switch v := v.(*QueueUpdateRequest_Action_DSN); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[98].Exporter = func(v any, i int) any {
			switch v := v.(*QueueGroupByRequest_Paging); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[99].Exporter = func(v any, i int) any {
			switch v := v.(*QueueGroupByRequest_GroupBy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[100].Exporter = func(v any, i int) any {
			switch v := v.(*QueueGroupByRequest_Sorting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[101].Exporter = func(v any, i int) any {
			switch v := v.(*QueueGroupByRequest_QueueState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[102].Exporter = func(v any, i int) any {
			switch v := v.(*QueueGroupByRequest_FreezeState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[103].Exporter = func(v any, i int) any {
			switch v := v.(*QueueGroupByRequest_WorkingState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[104].Exporter = func(v any, i int) any {
			switch v := v.(*QueueGroupByRequest_Counts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[106].Exporter = func(v any, i int) any {
			switch v := v.(*QueueGroupByRequest_Fields); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[107].Exporter = func(v any, i int) any {
			switch v := v.(*QueueGroupByRequest_Counts_ReturnType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[108].Exporter = func(v any, i int) any {
			switch v := v.(*QueueGroupByRequest_Counts_ReturnType_Unique); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[109].Exporter = func(v any, i int) any {
			switch v := v.(*QueueGroupByResponse_Item); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[110].Exporter = func(v any, i int) any {
			switch v := v.(*QueueGroupByResponse_Paging); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[111].Exporter = func(v any, i int) any {
			switch v := v.(*QueueListRequest_SortingMailAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[112].Exporter = func(v any, i int) any {
			switch v := v.(*QueueListRequest_SortingWorking); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[113].Exporter = func(v any, i int) any {
			switch v := v.(*QueueListRequest_Sorting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[114].Exporter = func(v any, i int) any {
			switch v := v.(*QueueListRequest_Paging); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[115].Exporter = func(v any, i int) any {
			switch v := v.(*QueueListResponse_QueueItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[116].Exporter = func(v any, i int) any {
			switch v := v.(*QueueListResponse_Paging); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[117].Exporter = func(v any, i int) any {
			switch v := v.(*QueueListResponse_QueueItem_MailAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[118].Exporter = func(v any, i int) any {
			switch v := v.(*QueueListResponse_QueueItem_QueueState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[119].Exporter = func(v any, i int) any {
			switch v := v.(*QueueListResponse_QueueItem_FreezeState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[120].Exporter = func(v any, i int) any {
			switch v := v.(*QueueListResponse_QueueItem_WorkingState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[121].Exporter = func(v any, i int) any {
			switch v := v.(*QueueListResponse_QueueItem_DSN); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[123].Exporter = func(v any, i int) any {
			switch v := v.(*QueueImportRequest_ImportData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[124].Exporter = func(v any, i int) any {
			switch v := v.(*QueueImportRequest_Reset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[125].Exporter = func(v any, i int) any {
			switch v := v.(*HSLCacheResponse_Item); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[126].Exporter = func(v any, i int) any {
			switch v := v.(*HSLLogResponse_Location); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[127].Exporter = func(v any, i int) any {
			switch v := v.(*HSLBreakPointResponse_Location); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[128].Exporter = func(v any, i int) any {
			switch v := v.(*HSLBreakPointResponse_Callstack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[130].Exporter = func(v any, i int) any {
			switch v := v.(*ProcessStatsResponse_Process); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[131].Exporter = func(v any, i int) any {
			switch v := v.(*ProcessStatsResponse_Connections); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[132].Exporter = func(v any, i int) any {
			switch v := v.(*ProcessStatsResponse_Script); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[133].Exporter = func(v any, i int) any {
			switch v := v.(*ProcessStatsResponse_Scripts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[134].Exporter = func(v any, i int) any {
			switch v := v.(*ProcessStatsResponse_ServerCounters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[135].Exporter = func(v any, i int) any {
			switch v := v.(*ProcessStatsResponse_Resolver); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[136].Exporter = func(v any, i int) any {
			switch v := v.(*ProcessStatsResponse_Queue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[137].Exporter = func(v any, i int) any {
			switch v := v.(*ProcessStatsResponse_Threads); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[138].Exporter = func(v any, i int) any {
			switch v := v.(*ProcessStatsResponse_Process_Version); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[139].Exporter = func(v any, i int) any {
			switch v := v.(*ProcessStatsResponse_Resolver_Cache); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[140].Exporter = func(v any, i int) any {
			switch v := v.(*ProcessStatsResponse_Resolver_Domain); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[141].Exporter = func(v any, i int) any {
			switch v := v.(*ProcessStatsResponse_Resolver_Domain_Cache); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[142].Exporter = func(v any, i int) any {
			switch v := v.(*ProcessStatsResponse_Queue_Script); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[143].Exporter = func(v any, i int) any {
			switch v := v.(*ProcessStatsResponse_Queue_Scripts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[144].Exporter = func(v any, i int) any {
			switch v := v.(*ProcessStatsResponse_Queue_Loader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[145].Exporter = func(v any, i int) any {
			switch v := v.(*ProcessStatsResponse_Queue_Queue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[146].Exporter = func(v any, i int) any {
			switch v := v.(*ProcessStatsResponse_Queue_Freeze); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[147].Exporter = func(v any, i int) any {
			switch v := v.(*ProcessStatsResponse_Queue_Policy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[148].Exporter = func(v any, i int) any {
			switch v := v.(*ProcessStatsResponse_Queue_Pooling); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[149].Exporter = func(v any, i int) any {
			switch v := v.(*ProcessStatsResponse_Queue_Connections); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[150].Exporter = func(v any, i int) any {
			switch v := v.(*ProcessStatsResponse_Queue_Pickup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[151].Exporter = func(v any, i int) any {
			switch v := v.(*ProcessStatsResponse_Queue_Quota); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[152].Exporter = func(v any, i int) any {
			switch v := v.(*ProcessStatsResponse_Queue_Delivery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[153].Exporter = func(v any, i int) any {
			switch v := v.(*ProcessStatsResponse_Queue_Release); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[154].Exporter = func(v any, i int) any {
			switch v := v.(*ProcessStatsResponse_Queue_Queue_Defer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[155].Exporter = func(v any, i int) any {
			switch v := v.(*ProcessStatsResponse_Queue_Queue_Active); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[156].Exporter = func(v any, i int) any {
			switch v := v.(*ProcessStatsResponse_Queue_Queue_Active_Priority); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[157].Exporter = func(v any, i int) any {
			switch v := v.(*ProcessStatsResponse_Queue_Freeze_Hold); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[158].Exporter = func(v any, i int) any {
			switch v := v.(*ProcessStatsResponse_Queue_Freeze_Update); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[159].Exporter = func(v any, i int) any {
			switch v := v.(*ProcessStatsResponse_Queue_Policy_Concurrency); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[160].Exporter = func(v any, i int) any {
			switch v := v.(*ProcessStatsResponse_Queue_Policy_Rate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[161].Exporter = func(v any, i int) any {
			switch v := v.(*ProcessStatsResponse_Queue_Policy_Dynamic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[162].Exporter = func(v any, i int) any {
			switch v := v.(*ProcessStatsResponse_Threads_Scripts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[163].Exporter = func(v any, i int) any {
			switch v := v.(*HSLMemoryListRequest_Condition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[164].Exporter = func(v any, i int) any {
			switch v := v.(*HSLMemoryListRequest_Paging); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[165].Exporter = func(v any, i int) any {
			switch v := v.(*SuspendRequest_Condition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[166].Exporter = func(v any, i int) any {
			switch v := v.(*SuspendRequest_Paging); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[167].Exporter = func(v any, i int) any {
			switch v := v.(*SuspendResponse_Item); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[168].Exporter = func(v any, i int) any {
			switch v := v.(*PolicyConditionAddRequest_Fields); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[169].Exporter = func(v any, i int) any {
			switch v := v.(*PolicyConditionAddRequest_If); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[170].Exporter = func(v any, i int) any {
			switch v := v.(*PolicyConditionAddRequest_Then); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[171].Exporter = func(v any, i int) any {
			switch v := v.(*PolicyConditionAddRequest_Then_Rate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[173].Exporter = func(v any, i int) any {
			switch v := v.(*PolicyConditionUpdateRequest_Then); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[174].Exporter = func(v any, i int) any {
			switch v := v.(*PolicyConditionUpdateRequest_Then_Rate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[175].Exporter = func(v any, i int) any {
			switch v := v.(*PolicyConditionResponse_Item); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[176].Exporter = func(v any, i int) any {
			switch v := v.(*PolicyConditionResponse_Item_Fields); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[177].Exporter = func(v any, i int) any {
			switch v := v.(*PolicyConditionResponse_Item_If); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[178].Exporter = func(v any, i int) any {
			switch v := v.(*PolicyConditionResponse_Item_Then); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[179].Exporter = func(v any, i int) any {
			switch v := v.(*PolicyConditionResponse_Item_Then_Rate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[181].Exporter = func(v any, i int) any {
			switch v := v.(*ServerConnectionsListRequest_Condition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[182].Exporter = func(v any, i int) any {
			switch v := v.(*ServerConnectionsListRequest_Paging); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[183].Exporter = func(v any, i int) any {
			switch v := v.(*ServerConnectionsListResponse_Connection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[184].Exporter = func(v any, i int) any {
			switch v := v.(*ServerConnectionsCloseRequest_Reply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[185].Exporter = func(v any, i int) any {
			switch v := v.(*QueueConnectionsListRequest_Condition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[186].Exporter = func(v any, i int) any {
			switch v := v.(*QueueConnectionsListRequest_Paging); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[187].Exporter = func(v any, i int) any {
			switch v := v.(*QueueConnectionsListResponse_Connection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[188].Exporter = func(v any, i int) any {
			switch v := v.(*PolicyMatchResponse_PolicyMatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[189].Exporter = func(v any, i int) any {
			switch v := v.(*PolicyMatchResponse_PolicyMatch_Fields); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[190].Exporter = func(v any, i int) any {
			switch v := v.(*PolicyMatchResponse_PolicyMatch_Grouping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[191].Exporter = func(v any, i int) any {
			switch v := v.(*PolicyMatchResponse_PolicyMatch_Dynamic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[192].Exporter = func(v any, i int) any {
			switch v := v.(*PolicyMatchResponse_PolicyMatch_Rate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[194].Exporter = func(v any, i int) any {
			switch v := v.(*PolicyGroupingListRequest_Paging); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[195].Exporter = func(v any, i int) any {
			switch v := v.(*PolicyGroupingListResponse_Grouping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[196].Exporter = func(v any, i int) any {
			switch v := v.(*PolicyGroupingListResponse_Grouping_Fields); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtpd_proto_msgTypes[197].Exporter = func(v any, i int) any {
			switch v := v.(*PolicyGroupingRequest_Fields); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_smtpd_proto_msgTypes[5].OneofWrappers = []any{
		(*TimeValue_Absolute)(nil),
		(*TimeValue_Relative)(nil),
	}
	file_smtpd_proto_msgTypes[13].OneofWrappers = []any{
		(*QueueUpdateRequest_Move_)(nil),
		(*QueueUpdateRequest_Actiontype)(nil),
		(*QueueUpdateRequest_Action_)(nil),
	}
	file_smtpd_proto_msgTypes[44].OneofWrappers = []any{
		(*SuspendRequest_Id)(nil),
		(*SuspendRequest_Condition_)(nil),
	}
	file_smtpd_proto_msgTypes[75].OneofWrappers = []any{
		(*PolicyGroupingRequest_Transportid)(nil),
		(*PolicyGroupingRequest_Localip)(nil),
		(*PolicyGroupingRequest_Remoteip)(nil),
		(*PolicyGroupingRequest_Remotemx)(nil),
		(*PolicyGroupingRequest_Recipientdomain)(nil),
		(*PolicyGroupingRequest_Jobid)(nil),
		(*PolicyGroupingRequest_Grouping)(nil),
	}
	file_smtpd_proto_msgTypes[92].OneofWrappers = []any{
		(*QueueUpdateRequest_Move_Queue)(nil),
		(*QueueUpdateRequest_Move_Freeze)(nil),
	}
	file_smtpd_proto_msgTypes[99].OneofWrappers = []any{
		(*QueueGroupByRequest_GroupBy_Transportid)(nil),
		(*QueueGroupByRequest_GroupBy_Recipientdomain)(nil),
		(*QueueGroupByRequest_GroupBy_Senderdomain)(nil),
		(*QueueGroupByRequest_GroupBy_Jobid)(nil),
		(*QueueGroupByRequest_GroupBy_Grouping)(nil),
		(*QueueGroupByRequest_GroupBy_Metadata)(nil),
		(*QueueGroupByRequest_GroupBy_Senderip)(nil),
		(*QueueGroupByRequest_GroupBy_Remoteip)(nil),
		(*QueueGroupByRequest_GroupBy_Remotemx)(nil),
		(*QueueGroupByRequest_GroupBy_Localip)(nil),
	}
	file_smtpd_proto_msgTypes[100].OneofWrappers = []any{
		(*QueueGroupByRequest_Sorting_Groupby)(nil),
		(*QueueGroupByRequest_Sorting_Total)(nil),
		(*QueueGroupByRequest_Sorting_Count)(nil),
	}
	file_smtpd_proto_msgTypes[104].OneofWrappers = []any{
		(*QueueGroupByRequest_Counts_Queue)(nil),
		(*QueueGroupByRequest_Counts_Freeze)(nil),
		(*QueueGroupByRequest_Counts_Working)(nil),
		(*QueueGroupByRequest_Counts_Ts)(nil),
		(*QueueGroupByRequest_Counts_Retryts)(nil),
		(*QueueGroupByRequest_Counts_Retrycount)(nil),
		(*QueueGroupByRequest_Counts_Priority)(nil),
	}
	file_smtpd_proto_msgTypes[107].OneofWrappers = []any{
		(*QueueGroupByRequest_Counts_ReturnType_Type_)(nil),
		(*QueueGroupByRequest_Counts_ReturnType_Unique_)(nil),
	}
	file_smtpd_proto_msgTypes[108].OneofWrappers = []any{
		(*QueueGroupByRequest_Counts_ReturnType_Unique_Transportid)(nil),
		(*QueueGroupByRequest_Counts_ReturnType_Unique_Recipientdomain)(nil),
		(*QueueGroupByRequest_Counts_ReturnType_Unique_Senderdomain)(nil),
		(*QueueGroupByRequest_Counts_ReturnType_Unique_Jobid)(nil),
		(*QueueGroupByRequest_Counts_ReturnType_Unique_Grouping)(nil),
		(*QueueGroupByRequest_Counts_ReturnType_Unique_Metadata)(nil),
		(*QueueGroupByRequest_Counts_ReturnType_Unique_Senderip)(nil),
		(*QueueGroupByRequest_Counts_ReturnType_Unique_Remoteip)(nil),
		(*QueueGroupByRequest_Counts_ReturnType_Unique_Remotemx)(nil),
		(*QueueGroupByRequest_Counts_ReturnType_Unique_Localip)(nil),
	}
	file_smtpd_proto_msgTypes[111].OneofWrappers = []any{
		(*QueueListRequest_SortingMailAddress_Localpart)(nil),
		(*QueueListRequest_SortingMailAddress_Domain)(nil),
	}
	file_smtpd_proto_msgTypes[112].OneofWrappers = []any{
		(*QueueListRequest_SortingWorking_Duration)(nil),
	}
	file_smtpd_proto_msgTypes[113].OneofWrappers = []any{
		(*QueueListRequest_Sorting_Ts)(nil),
		(*QueueListRequest_Sorting_Sender)(nil),
		(*QueueListRequest_Sorting_Recipient)(nil),
		(*QueueListRequest_Sorting_Working)(nil),
		(*QueueListRequest_Sorting_Retryts)(nil),
		(*QueueListRequest_Sorting_Size)(nil),
		(*QueueListRequest_Sorting_Retrycount)(nil),
	}
	file_smtpd_proto_msgTypes[115].OneofWrappers = []any{
		(*QueueListResponse_QueueItem_Queue)(nil),
		(*QueueListResponse_QueueItem_Freeze)(nil),
		(*QueueListResponse_QueueItem_Working)(nil),
	}
	file_smtpd_proto_msgTypes[195].OneofWrappers = []any{
		(*PolicyGroupingListResponse_Grouping_Transportid)(nil),
		(*PolicyGroupingListResponse_Grouping_Localip)(nil),
		(*PolicyGroupingListResponse_Grouping_Remoteip)(nil),
		(*PolicyGroupingListResponse_Grouping_Remotemx)(nil),
		(*PolicyGroupingListResponse_Grouping_Recipientdomain)(nil),
		(*PolicyGroupingListResponse_Grouping_Jobid)(nil),
		(*PolicyGroupingListResponse_Grouping_Grouping)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_smtpd_proto_rawDesc,
			NumEnums:      11,
			NumMessages:   198,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_smtpd_proto_goTypes,
		DependencyIndexes: file_smtpd_proto_depIdxs,
		EnumInfos:         file_smtpd_proto_enumTypes,
		MessageInfos:      file_smtpd_proto_msgTypes,
	}.Build()
	File_smtpd_proto = out.File
	file_smtpd_proto_rawDesc = nil
	file_smtpd_proto_goTypes = nil
	file_smtpd_proto_depIdxs = nil
}
